<?xml version="1.0" encoding="utf-8"?>
<reflection>
  <assemblies>
    <assembly name="Assembly-CSharp">
      <assemblydata version="0.0.0.0" culture="" key="" hash="SHA1" />
    </assembly>
  </assemblies>
  <apis>
    <api id="N:">
      <apidata name="" group="namespace" />
      <elements>
        <element api="T:BaseItem" />
        <element api="T:Triggerable" />
        <element api="T:MovementManager" />
        <element api="T:AnimatedTexture" />
        <element api="T:BackgroundSound" />
        <element api="T:IHitable" />
        <element api="T:CommonEntity" />
        <element api="T:CommonEntity.EntityState" />
        <element api="T:CommonEntity.DamageOverTime" />
        <element api="T:CommonEntity.Faction" />
        <element api="T:Credits" />
        <element api="T:Credits.Coords" />
        <element api="T:IntroCutscene" />
        <element api="T:JeveAndIgor" />
        <element api="T:JeveDie" />
        <element api="T:LeaveLevel1" />
        <element api="T:IgorLeaveEnemyTest" />
        <element api="T:IgorLeaveIgorMaker" />
        <element api="T:IgorLeaveJump" />
        <element api="T:IgorLeaveTutorial" />
        <element api="T:IgotLeaveItemTest" />
        <element api="T:DropChest" />
        <element api="T:Lightning" />
        <element api="T:EnemyAI" />
        <element api="T:EnemyAI.EnemyTpye" />
        <element api="T:BossAI" />
        <element api="T:BossRocket" />
        <element api="T:Transformer" />
        <element api="T:ArmEnemy" />
        <element api="T:DiagnosisRobotEnemy" />
        <element api="T:FlyingEyeEnemy" />
        <element api="T:LittleFightingRobot" />
        <element api="T:ItemDropper" />
        <element api="T:ItemDropper.ItemDropData" />
        <element api="T:EnemyHitUnit" />
        <element api="T:Fire" />
        <element api="T:BrokenCeilingLamp" />
        <element api="T:IUsable" />
        <element api="T:Chest" />
        <element api="T:Conveyor" />
        <element api="T:ITrigger" />
        <element api="T:DestructionTrigger" />
        <element api="T:Door" />
        <element api="T:Elevator" />
        <element api="T:ElevatorLoader" />
        <element api="T:FloorTrigger" />
        <element api="T:MoveToCeiling" />
        <element api="T:PushableBox" />
        <element api="T:Siren" />
        <element api="T:SteamyObstacle" />
        <element api="T:SwitchTrigger" />
        <element api="T:WallTexture" />
        <element api="T:WeightTrigger" />
        <element api="T:DragNDrop" />
        <element api="T:DragNDrop.MetaData" />
        <element api="T:DragNDrop.MetaData.Source" />
        <element api="T:Drawing" />
        <element api="T:MessageBoard" />
        <element api="T:MessageBoard.BackgroundTexturePartIndices" />
        <element api="T:MessageBoardMessage" />
        <element api="T:SkillBar" />
        <element api="T:SkillBar.SkillBarItem" />
        <element api="T:SkillBar.SkillBarItem.ItemType" />
        <element api="T:SkillTree" />
        <element api="T:SkillTree.SkillTreeNode" />
        <element api="T:Game" />
        <element api="T:Game.Difficulty" />
        <element api="T:Igor" />
        <element api="T:IgorCamera" />
        <element api="T:MicrowaveAttackSphere" />
        <element api="T:IAction" />
        <element api="T:IInvItem" />
        <element api="T:IPauseHandler" />
        <element api="T:ISkill" />
        <element api="T:Inventory" />
        <element api="T:Inventory.InventoryItem" />
        <element api="T:Prism" />
        <element api="T:Prism.InvItem" />
        <element api="T:BasicItem" />
        <element api="T:Coil" />
        <element api="T:Coil.InvItem" />
        <element api="T:EnergyCapsule" />
        <element api="T:EnergyCapsule.InvEnergyCapsule" />
        <element api="T:Fan" />
        <element api="T:Fan.InvItem" />
        <element api="T:Microchip" />
        <element api="T:Microwave" />
        <element api="T:RepairKit" />
        <element api="T:RepairKit.InvRepairKit" />
        <element api="T:Spring" />
        <element api="T:Spring.InvItem" />
        <element api="T:USBStick" />
        <element api="T:USBStick.InvItem" />
        <element api="T:Loader" />
        <element api="T:Controls" />
        <element api="T:LoadGameScreen" />
        <element api="T:Loadscreen" />
        <element api="T:MySettings" />
        <element api="T:Score" />
        <element api="T:SplashScreen" />
        <element api="T:Matrix2x2" />
        <element api="T:AutoTransparency" />
        <element api="T:ActionGeneric" />
        <element api="T:ActionAnimate" />
        <element api="T:ActionInstantiate" />
        <element api="T:ActionLoadScene" />
        <element api="T:ActionMoveTo" />
        <element api="T:ActionRemove" />
        <element api="T:ActionReset" />
        <element api="T:ActionRotate" />
        <element api="T:ActionScale" />
        <element api="T:ActionSetCutscene" />
        <element api="T:ActionSetKinematic" />
        <element api="T:ActionSetLookAt" />
        <element api="T:ActionSetRenderer" />
        <element api="T:ActionShowMessage" />
        <element api="T:ActionSleep" />
        <element api="T:ActionTranslate" />
        <element api="T:PauseScreen" />
        <element api="T:Projectile" />
        <element api="T:Puzzle1Platform" />
        <element api="T:Remove" />
        <element api="T:GameData" />
        <element api="T:GameData.Operation" />
        <element api="T:GameData.IgorData" />
        <element api="T:GameData.IgorData.InventoryRecover" />
        <element api="T:GameData.SkillBarData" />
        <element api="T:GameData.SkillBarData.SkillSlot" />
        <element api="T:GameData.SkillData" />
        <element api="T:GameData.SkillData.SkillDataList" />
        <element api="T:GameData.ScenePrefab" />
        <element api="T:GameData.ChestData" />
        <element api="T:GameData.EnemyPrefab" />
        <element api="T:GameData.BossData" />
        <element api="T:GameData.BossTransformerData" />
        <element api="T:GameData.CutscenePrefab" />
        <element api="T:GameData.CutscenePrefabJeveData" />
        <element api="T:GameData.GameDifficultyData" />
        <element api="T:GameDataManager" />
        <element api="T:GameDataManager.SwapData" />
        <element api="T:GameDataManager.SaveLoadDataShow" />
        <element api="T:GameDataRecover" />
        <element api="T:XMLGameSaver" />
        <element api="T:BaseSkill" />
        <element api="T:MeleeAttack" />
        <element api="T:ElectroFistAttack" />
        <element api="T:HackAttack" />
        <element api="T:HeadbangAttack" />
        <element api="T:MeleeAttackHelper" />
        <element api="T:LaserAttack" />
        <element api="T:LightningAttack" />
        <element api="T:HeadMarker" />
        <element api="T:LightningSourceMarker" />
        <element api="T:MicrowaveAttack" />
        <element api="T:PassiveBaseSkill" />
        <element api="T:PassiveIgorSkill" />
        <element api="T:PrismAttack" />
        <element api="T:PrismAttack.LaserAttack" />
        <element api="T:RoundhouseAttack" />
        <element api="T:Skills" />
        <element api="T:Skills.SkillData" />
        <element api="T:DestructIgor" />
        <element api="T:DontDestruct" />
        <element api="T:SceneLoader" />
        <element api="T:SelfDestructor" />
        <element api="T:SpawnPoint" />
        <element api="T:Waypoint" />
        <element api="T:SwitchPlatform" />
        <element api="T:TestCutscene" />
        <element api="T:Mine" />
      </elements>
    </api>
    <api id="T:ActionAnimate">
      <apidata name="ActionAnimate" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:ActionGeneric" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:ActionAnimate.gameObject" />
        <element api="F:ActionAnimate.animation" />
        <element api="F:ActionAnimate.state" />
        <element api="M:ActionAnimate.#ctor(UnityEngine.GameObject,System.String,System.Int32)" />
        <element api="M:ActionAnimate.OnStart" />
        <element api="M:ActionAnimate.Finished" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ActionAnimate.#ctor(UnityEngine.GameObject,System.String,System.Int32)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="gameObject">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="animation">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionAnimate" ref="true" />
      </containers>
    </api>
    <api id="F:ActionAnimate.animation">
      <apidata name="animation" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionAnimate" ref="true" />
      </containers>
    </api>
    <api id="M:ActionAnimate.Finished">
      <apidata name="Finished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.Finished">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IAction.Finished">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionAnimate" ref="true" />
      </containers>
    </api>
    <api id="F:ActionAnimate.gameObject">
      <apidata name="gameObject" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionAnimate" ref="true" />
      </containers>
    </api>
    <api id="M:ActionAnimate.OnStart">
      <apidata name="OnStart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.OnStart">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:IAction.OnStart">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionAnimate" ref="true" />
      </containers>
    </api>
    <api id="F:ActionAnimate.state">
      <apidata name="state" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionAnimate" ref="true" />
      </containers>
    </api>
    <api id="T:ActionGeneric">
      <apidata name="ActionGeneric" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:ActionAnimate" ref="true" />
          <type api="T:ActionInstantiate" ref="true" />
          <type api="T:ActionLoadScene" ref="true" />
          <type api="T:ActionRemove" ref="true" />
          <type api="T:ActionReset" ref="true" />
          <type api="T:ActionRotate" ref="true" />
          <type api="T:ActionScale" ref="true" />
          <type api="T:ActionSetCutscene" ref="true" />
          <type api="T:ActionSetKinematic" ref="true" />
          <type api="T:ActionSetLookAt" ref="true" />
          <type api="T:ActionSetRenderer" ref="true" />
          <type api="T:ActionShowMessage" ref="true" />
          <type api="T:ActionSleep" ref="true" />
          <type api="T:ActionTranslate" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:IAction" ref="true" />
      </implements>
      <elements>
        <element api="M:ActionGeneric.OnStart" />
        <element api="M:ActionGeneric.OnFinish" />
        <element api="M:ActionGeneric.OnUpdate" />
        <element api="M:ActionGeneric.GUI" />
        <element api="M:ActionGeneric.Finished" />
        <element api="M:ActionGeneric.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ActionGeneric.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionGeneric" ref="true" />
      </containers>
    </api>
    <api id="M:ActionGeneric.Finished">
      <apidata name="Finished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IAction.Finished">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionGeneric" ref="true" />
      </containers>
    </api>
    <api id="M:ActionGeneric.GUI">
      <apidata name="GUI" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <implements>
        <member api="M:IAction.GUI">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionGeneric" ref="true" />
      </containers>
    </api>
    <api id="M:ActionGeneric.OnFinish">
      <apidata name="OnFinish" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <implements>
        <member api="M:IAction.OnFinish">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionGeneric" ref="true" />
      </containers>
    </api>
    <api id="M:ActionGeneric.OnStart">
      <apidata name="OnStart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <implements>
        <member api="M:IAction.OnStart">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionGeneric" ref="true" />
      </containers>
    </api>
    <api id="M:ActionGeneric.OnUpdate">
      <apidata name="OnUpdate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <implements>
        <member api="M:IAction.OnUpdate">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionGeneric" ref="true" />
      </containers>
    </api>
    <api id="T:ActionInstantiate">
      <apidata name="ActionInstantiate" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:ActionGeneric" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:ActionInstantiate.gameObject" />
        <element api="F:ActionInstantiate.position" />
        <element api="F:ActionInstantiate.rotation" />
        <element api="M:ActionInstantiate.#ctor(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion)" />
        <element api="M:ActionInstantiate.OnStart" />
        <element api="M:ActionInstantiate.Finished" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ActionInstantiate.#ctor(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="gameObject">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="position">
          <type api="T:UnityEngine.Vector3" ref="false" />
        </parameter>
        <parameter name="rotation">
          <type api="T:UnityEngine.Quaternion" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionInstantiate" ref="true" />
      </containers>
    </api>
    <api id="M:ActionInstantiate.Finished">
      <apidata name="Finished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.Finished">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IAction.Finished">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionInstantiate" ref="true" />
      </containers>
    </api>
    <api id="F:ActionInstantiate.gameObject">
      <apidata name="gameObject" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionInstantiate" ref="true" />
      </containers>
    </api>
    <api id="M:ActionInstantiate.OnStart">
      <apidata name="OnStart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.OnStart">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:IAction.OnStart">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionInstantiate" ref="true" />
      </containers>
    </api>
    <api id="F:ActionInstantiate.position">
      <apidata name="position" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionInstantiate" ref="true" />
      </containers>
    </api>
    <api id="F:ActionInstantiate.rotation">
      <apidata name="rotation" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Quaternion" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionInstantiate" ref="true" />
      </containers>
    </api>
    <api id="T:ActionLoadScene">
      <apidata name="ActionLoadScene" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:ActionGeneric" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:ActionLoadScene.levelName" />
        <element api="M:ActionLoadScene.#ctor(System.String)" />
        <element api="M:ActionLoadScene.OnStart" />
        <element api="M:ActionLoadScene.Finished" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ActionLoadScene.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="levelName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionLoadScene" ref="true" />
      </containers>
    </api>
    <api id="M:ActionLoadScene.Finished">
      <apidata name="Finished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.Finished">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IAction.Finished">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionLoadScene" ref="true" />
      </containers>
    </api>
    <api id="F:ActionLoadScene.levelName">
      <apidata name="levelName" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionLoadScene" ref="true" />
      </containers>
    </api>
    <api id="M:ActionLoadScene.OnStart">
      <apidata name="OnStart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.OnStart">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:IAction.OnStart">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionLoadScene" ref="true" />
      </containers>
    </api>
    <api id="T:ActionMoveTo">
      <apidata name="ActionMoveTo" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:IAction" ref="true" />
      </implements>
      <elements>
        <element api="F:ActionMoveTo.relative" />
        <element api="F:ActionMoveTo.duration" />
        <element api="F:ActionMoveTo.remaining" />
        <element api="F:ActionMoveTo.start" />
        <element api="F:ActionMoveTo.to" />
        <element api="F:ActionMoveTo.gameObject" />
        <element api="M:ActionMoveTo.#ctor(UnityEngine.GameObject,UnityEngine.Vector3,System.Single,System.Boolean)" />
        <element api="M:ActionMoveTo.#ctor(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)" />
        <element api="M:ActionMoveTo.#ctor(UnityEngine.GameObject,UnityEngine.Vector3)" />
        <element api="M:ActionMoveTo.OnStart" />
        <element api="M:ActionMoveTo.OnFinish" />
        <element api="M:ActionMoveTo.OnUpdate" />
        <element api="M:ActionMoveTo.GUI" />
        <element api="M:ActionMoveTo.Finished" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ActionMoveTo.#ctor(UnityEngine.GameObject,UnityEngine.Vector3)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="gameObject">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="to">
          <type api="T:UnityEngine.Vector3" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionMoveTo" ref="true" />
      </containers>
    </api>
    <api id="M:ActionMoveTo.#ctor(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="gameObject">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="to">
          <type api="T:UnityEngine.Vector3" ref="false" />
        </parameter>
        <parameter name="duration">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionMoveTo" ref="true" />
      </containers>
    </api>
    <api id="M:ActionMoveTo.#ctor(UnityEngine.GameObject,UnityEngine.Vector3,System.Single,System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="gameObject">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="to">
          <type api="T:UnityEngine.Vector3" ref="false" />
        </parameter>
        <parameter name="duration">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="relative">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionMoveTo" ref="true" />
      </containers>
    </api>
    <api id="F:ActionMoveTo.duration">
      <apidata name="duration" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionMoveTo" ref="true" />
      </containers>
    </api>
    <api id="M:ActionMoveTo.Finished">
      <apidata name="Finished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IAction.Finished">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionMoveTo" ref="true" />
      </containers>
    </api>
    <api id="F:ActionMoveTo.gameObject">
      <apidata name="gameObject" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionMoveTo" ref="true" />
      </containers>
    </api>
    <api id="M:ActionMoveTo.GUI">
      <apidata name="GUI" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:IAction.GUI">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionMoveTo" ref="true" />
      </containers>
    </api>
    <api id="M:ActionMoveTo.OnFinish">
      <apidata name="OnFinish" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:IAction.OnFinish">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionMoveTo" ref="true" />
      </containers>
    </api>
    <api id="M:ActionMoveTo.OnStart">
      <apidata name="OnStart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:IAction.OnStart">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionMoveTo" ref="true" />
      </containers>
    </api>
    <api id="M:ActionMoveTo.OnUpdate">
      <apidata name="OnUpdate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:IAction.OnUpdate">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionMoveTo" ref="true" />
      </containers>
    </api>
    <api id="F:ActionMoveTo.relative">
      <apidata name="relative" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionMoveTo" ref="true" />
      </containers>
    </api>
    <api id="F:ActionMoveTo.remaining">
      <apidata name="remaining" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionMoveTo" ref="true" />
      </containers>
    </api>
    <api id="F:ActionMoveTo.start">
      <apidata name="start" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionMoveTo" ref="true" />
      </containers>
    </api>
    <api id="F:ActionMoveTo.to">
      <apidata name="to" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionMoveTo" ref="true" />
      </containers>
    </api>
    <api id="T:ActionRemove">
      <apidata name="ActionRemove" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:ActionGeneric" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:ActionRemove.gameObject" />
        <element api="M:ActionRemove.#ctor(UnityEngine.GameObject)" />
        <element api="M:ActionRemove.OnStart" />
        <element api="M:ActionRemove.Finished" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ActionRemove.#ctor(UnityEngine.GameObject)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="gameObject">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionRemove" ref="true" />
      </containers>
    </api>
    <api id="M:ActionRemove.Finished">
      <apidata name="Finished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.Finished">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IAction.Finished">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionRemove" ref="true" />
      </containers>
    </api>
    <api id="F:ActionRemove.gameObject">
      <apidata name="gameObject" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionRemove" ref="true" />
      </containers>
    </api>
    <api id="M:ActionRemove.OnStart">
      <apidata name="OnStart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.OnStart">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:IAction.OnStart">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionRemove" ref="true" />
      </containers>
    </api>
    <api id="T:ActionReset">
      <apidata name="ActionReset" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:ActionGeneric" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:ActionReset.movementManager" />
        <element api="M:ActionReset.#ctor(MovementManager)" />
        <element api="M:ActionReset.OnStart" />
        <element api="M:ActionReset.OnFinish" />
        <element api="M:ActionReset.Finished" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ActionReset.#ctor(MovementManager)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="man">
          <type api="T:MovementManager" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionReset" ref="true" />
      </containers>
    </api>
    <api id="M:ActionReset.Finished">
      <apidata name="Finished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.Finished">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IAction.Finished">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionReset" ref="true" />
      </containers>
    </api>
    <api id="F:ActionReset.movementManager">
      <apidata name="movementManager" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:MovementManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionReset" ref="true" />
      </containers>
    </api>
    <api id="M:ActionReset.OnFinish">
      <apidata name="OnFinish" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.OnFinish">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:IAction.OnFinish">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionReset" ref="true" />
      </containers>
    </api>
    <api id="M:ActionReset.OnStart">
      <apidata name="OnStart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.OnStart">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:IAction.OnStart">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionReset" ref="true" />
      </containers>
    </api>
    <api id="T:ActionRotate">
      <apidata name="ActionRotate" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:ActionGeneric" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:ActionRotate.gameObject" />
        <element api="F:ActionRotate.rotation" />
        <element api="F:ActionRotate.start" />
        <element api="F:ActionRotate.direction" />
        <element api="F:ActionRotate.duration" />
        <element api="F:ActionRotate.remaining" />
        <element api="M:ActionRotate.#ctor(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)" />
        <element api="M:ActionRotate.OnStart" />
        <element api="M:ActionRotate.OnUpdate" />
        <element api="M:ActionRotate.Finished" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ActionRotate.#ctor(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="gameObject">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="rotation">
          <type api="T:UnityEngine.Vector3" ref="false" />
        </parameter>
        <parameter name="duration">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionRotate" ref="true" />
      </containers>
    </api>
    <api id="F:ActionRotate.direction">
      <apidata name="direction" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionRotate" ref="true" />
      </containers>
    </api>
    <api id="F:ActionRotate.duration">
      <apidata name="duration" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionRotate" ref="true" />
      </containers>
    </api>
    <api id="M:ActionRotate.Finished">
      <apidata name="Finished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.Finished">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IAction.Finished">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionRotate" ref="true" />
      </containers>
    </api>
    <api id="F:ActionRotate.gameObject">
      <apidata name="gameObject" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionRotate" ref="true" />
      </containers>
    </api>
    <api id="M:ActionRotate.OnStart">
      <apidata name="OnStart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.OnStart">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:IAction.OnStart">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionRotate" ref="true" />
      </containers>
    </api>
    <api id="M:ActionRotate.OnUpdate">
      <apidata name="OnUpdate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.OnUpdate">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:IAction.OnUpdate">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionRotate" ref="true" />
      </containers>
    </api>
    <api id="F:ActionRotate.remaining">
      <apidata name="remaining" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionRotate" ref="true" />
      </containers>
    </api>
    <api id="F:ActionRotate.rotation">
      <apidata name="rotation" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionRotate" ref="true" />
      </containers>
    </api>
    <api id="F:ActionRotate.start">
      <apidata name="start" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionRotate" ref="true" />
      </containers>
    </api>
    <api id="T:ActionScale">
      <apidata name="ActionScale" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:ActionGeneric" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:ActionScale.gameObject" />
        <element api="F:ActionScale.scale" />
        <element api="F:ActionScale.relative" />
        <element api="F:ActionScale.duration" />
        <element api="F:ActionScale.remaining" />
        <element api="M:ActionScale.#ctor(UnityEngine.Transform,UnityEngine.Vector3,System.Single)" />
        <element api="M:ActionScale.OnStart" />
        <element api="M:ActionScale.OnUpdate" />
        <element api="M:ActionScale.Finished" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ActionScale.#ctor(UnityEngine.Transform,UnityEngine.Vector3,System.Single)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="gameObject">
          <type api="T:UnityEngine.Transform" ref="true" />
        </parameter>
        <parameter name="scale">
          <type api="T:UnityEngine.Vector3" ref="false" />
        </parameter>
        <parameter name="duration">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionScale" ref="true" />
      </containers>
    </api>
    <api id="F:ActionScale.duration">
      <apidata name="duration" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionScale" ref="true" />
      </containers>
    </api>
    <api id="M:ActionScale.Finished">
      <apidata name="Finished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.Finished">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IAction.Finished">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionScale" ref="true" />
      </containers>
    </api>
    <api id="F:ActionScale.gameObject">
      <apidata name="gameObject" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Transform" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionScale" ref="true" />
      </containers>
    </api>
    <api id="M:ActionScale.OnStart">
      <apidata name="OnStart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.OnStart">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:IAction.OnStart">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionScale" ref="true" />
      </containers>
    </api>
    <api id="M:ActionScale.OnUpdate">
      <apidata name="OnUpdate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.OnUpdate">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:IAction.OnUpdate">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionScale" ref="true" />
      </containers>
    </api>
    <api id="F:ActionScale.relative">
      <apidata name="relative" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionScale" ref="true" />
      </containers>
    </api>
    <api id="F:ActionScale.remaining">
      <apidata name="remaining" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionScale" ref="true" />
      </containers>
    </api>
    <api id="F:ActionScale.scale">
      <apidata name="scale" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionScale" ref="true" />
      </containers>
    </api>
    <api id="T:ActionSetCutscene">
      <apidata name="ActionSetCutscene" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:ActionGeneric" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:ActionSetCutscene.value" />
        <element api="F:ActionSetCutscene.ignore" />
        <element api="M:ActionSetCutscene.#ctor(System.Boolean)" />
        <element api="M:ActionSetCutscene.#ctor(System.Boolean,System.Boolean)" />
        <element api="M:ActionSetCutscene.OnStart" />
        <element api="M:ActionSetCutscene.Finished" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ActionSetCutscene.#ctor(System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="to">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetCutscene" ref="true" />
      </containers>
    </api>
    <api id="M:ActionSetCutscene.#ctor(System.Boolean,System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="to">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="ignore">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetCutscene" ref="true" />
      </containers>
    </api>
    <api id="M:ActionSetCutscene.Finished">
      <apidata name="Finished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.Finished">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IAction.Finished">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetCutscene" ref="true" />
      </containers>
    </api>
    <api id="F:ActionSetCutscene.ignore">
      <apidata name="ignore" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetCutscene" ref="true" />
      </containers>
    </api>
    <api id="M:ActionSetCutscene.OnStart">
      <apidata name="OnStart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.OnStart">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:IAction.OnStart">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetCutscene" ref="true" />
      </containers>
    </api>
    <api id="F:ActionSetCutscene.value">
      <apidata name="value" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetCutscene" ref="true" />
      </containers>
    </api>
    <api id="T:ActionSetKinematic">
      <apidata name="ActionSetKinematic" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:ActionGeneric" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:ActionSetKinematic.obj" />
        <element api="F:ActionSetKinematic.value" />
        <element api="M:ActionSetKinematic.#ctor(UnityEngine.GameObject,System.Boolean)" />
        <element api="M:ActionSetKinematic.OnStart" />
        <element api="M:ActionSetKinematic.Finished" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ActionSetKinematic.#ctor(UnityEngine.GameObject,System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="gameObject">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="to">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetKinematic" ref="true" />
      </containers>
    </api>
    <api id="M:ActionSetKinematic.Finished">
      <apidata name="Finished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.Finished">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IAction.Finished">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetKinematic" ref="true" />
      </containers>
    </api>
    <api id="F:ActionSetKinematic.obj">
      <apidata name="obj" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetKinematic" ref="true" />
      </containers>
    </api>
    <api id="M:ActionSetKinematic.OnStart">
      <apidata name="OnStart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.OnStart">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:IAction.OnStart">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetKinematic" ref="true" />
      </containers>
    </api>
    <api id="F:ActionSetKinematic.value">
      <apidata name="value" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetKinematic" ref="true" />
      </containers>
    </api>
    <api id="T:ActionSetLookAt">
      <apidata name="ActionSetLookAt" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:ActionGeneric" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:ActionSetLookAt.me" />
        <element api="F:ActionSetLookAt.coord" />
        <element api="M:ActionSetLookAt.#ctor(UnityEngine.GameObject,UnityEngine.Vector3)" />
        <element api="M:ActionSetLookAt.OnStart" />
        <element api="M:ActionSetLookAt.Finished" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ActionSetLookAt.#ctor(UnityEngine.GameObject,UnityEngine.Vector3)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="me">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="coord">
          <type api="T:UnityEngine.Vector3" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetLookAt" ref="true" />
      </containers>
    </api>
    <api id="F:ActionSetLookAt.coord">
      <apidata name="coord" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetLookAt" ref="true" />
      </containers>
    </api>
    <api id="M:ActionSetLookAt.Finished">
      <apidata name="Finished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.Finished">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IAction.Finished">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetLookAt" ref="true" />
      </containers>
    </api>
    <api id="F:ActionSetLookAt.me">
      <apidata name="me" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetLookAt" ref="true" />
      </containers>
    </api>
    <api id="M:ActionSetLookAt.OnStart">
      <apidata name="OnStart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.OnStart">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:IAction.OnStart">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetLookAt" ref="true" />
      </containers>
    </api>
    <api id="T:ActionSetRenderer">
      <apidata name="ActionSetRenderer" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:ActionGeneric" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:ActionSetRenderer.renderer" />
        <element api="F:ActionSetRenderer.value" />
        <element api="M:ActionSetRenderer.#ctor(UnityEngine.Renderer,System.Boolean)" />
        <element api="M:ActionSetRenderer.OnStart" />
        <element api="M:ActionSetRenderer.Finished" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ActionSetRenderer.#ctor(UnityEngine.Renderer,System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="renderer">
          <type api="T:UnityEngine.Renderer" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetRenderer" ref="true" />
      </containers>
    </api>
    <api id="M:ActionSetRenderer.Finished">
      <apidata name="Finished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.Finished">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IAction.Finished">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetRenderer" ref="true" />
      </containers>
    </api>
    <api id="M:ActionSetRenderer.OnStart">
      <apidata name="OnStart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.OnStart">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:IAction.OnStart">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetRenderer" ref="true" />
      </containers>
    </api>
    <api id="F:ActionSetRenderer.renderer">
      <apidata name="renderer" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Renderer" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetRenderer" ref="true" />
      </containers>
    </api>
    <api id="F:ActionSetRenderer.value">
      <apidata name="value" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSetRenderer" ref="true" />
      </containers>
    </api>
    <api id="T:ActionShowMessage">
      <apidata name="ActionShowMessage" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:ActionGeneric" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:ActionShowMessage.message" />
        <element api="M:ActionShowMessage.#ctor(System.String)" />
        <element api="M:ActionShowMessage.OnStart" />
        <element api="M:ActionShowMessage.Finished" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ActionShowMessage.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionShowMessage" ref="true" />
      </containers>
    </api>
    <api id="M:ActionShowMessage.Finished">
      <apidata name="Finished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.Finished">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IAction.Finished">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionShowMessage" ref="true" />
      </containers>
    </api>
    <api id="F:ActionShowMessage.message">
      <apidata name="message" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionShowMessage" ref="true" />
      </containers>
    </api>
    <api id="M:ActionShowMessage.OnStart">
      <apidata name="OnStart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.OnStart">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:IAction.OnStart">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionShowMessage" ref="true" />
      </containers>
    </api>
    <api id="T:ActionSleep">
      <apidata name="ActionSleep" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:ActionGeneric" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:ActionSleep.sleep" />
        <element api="M:ActionSleep.#ctor(System.Single)" />
        <element api="M:ActionSleep.OnUpdate" />
        <element api="M:ActionSleep.Finished" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ActionSleep.#ctor(System.Single)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="seconds">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSleep" ref="true" />
      </containers>
    </api>
    <api id="M:ActionSleep.Finished">
      <apidata name="Finished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.Finished">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IAction.Finished">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSleep" ref="true" />
      </containers>
    </api>
    <api id="M:ActionSleep.OnUpdate">
      <apidata name="OnUpdate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.OnUpdate">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:IAction.OnUpdate">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSleep" ref="true" />
      </containers>
    </api>
    <api id="F:ActionSleep.sleep">
      <apidata name="sleep" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionSleep" ref="true" />
      </containers>
    </api>
    <api id="T:ActionTranslate">
      <apidata name="ActionTranslate" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:ActionGeneric" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:ActionTranslate.relative" />
        <element api="F:ActionTranslate.duration" />
        <element api="F:ActionTranslate.remaining" />
        <element api="F:ActionTranslate.start" />
        <element api="F:ActionTranslate.to" />
        <element api="F:ActionTranslate.gameObject" />
        <element api="M:ActionTranslate.#ctor(UnityEngine.GameObject,UnityEngine.Vector3,System.Single,System.Boolean)" />
        <element api="M:ActionTranslate.#ctor(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)" />
        <element api="M:ActionTranslate.#ctor(UnityEngine.GameObject,UnityEngine.Vector3)" />
        <element api="M:ActionTranslate.OnStart" />
        <element api="M:ActionTranslate.OnUpdate" />
        <element api="M:ActionTranslate.Finished" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ActionTranslate.#ctor(UnityEngine.GameObject,UnityEngine.Vector3)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="gameObject">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="to">
          <type api="T:UnityEngine.Vector3" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionTranslate" ref="true" />
      </containers>
    </api>
    <api id="M:ActionTranslate.#ctor(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="gameObject">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="to">
          <type api="T:UnityEngine.Vector3" ref="false" />
        </parameter>
        <parameter name="duration">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionTranslate" ref="true" />
      </containers>
    </api>
    <api id="M:ActionTranslate.#ctor(UnityEngine.GameObject,UnityEngine.Vector3,System.Single,System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="gameObject">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="to">
          <type api="T:UnityEngine.Vector3" ref="false" />
        </parameter>
        <parameter name="duration">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="relative">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionTranslate" ref="true" />
      </containers>
    </api>
    <api id="F:ActionTranslate.duration">
      <apidata name="duration" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionTranslate" ref="true" />
      </containers>
    </api>
    <api id="M:ActionTranslate.Finished">
      <apidata name="Finished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.Finished">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IAction.Finished">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionTranslate" ref="true" />
      </containers>
    </api>
    <api id="F:ActionTranslate.gameObject">
      <apidata name="gameObject" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionTranslate" ref="true" />
      </containers>
    </api>
    <api id="M:ActionTranslate.OnStart">
      <apidata name="OnStart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.OnStart">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:IAction.OnStart">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionTranslate" ref="true" />
      </containers>
    </api>
    <api id="M:ActionTranslate.OnUpdate">
      <apidata name="OnUpdate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:ActionGeneric.OnUpdate">
          <type api="T:ActionGeneric" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:IAction.OnUpdate">
          <type api="T:IAction" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionTranslate" ref="true" />
      </containers>
    </api>
    <api id="F:ActionTranslate.relative">
      <apidata name="relative" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionTranslate" ref="true" />
      </containers>
    </api>
    <api id="F:ActionTranslate.remaining">
      <apidata name="remaining" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionTranslate" ref="true" />
      </containers>
    </api>
    <api id="F:ActionTranslate.start">
      <apidata name="start" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionTranslate" ref="true" />
      </containers>
    </api>
    <api id="F:ActionTranslate.to">
      <apidata name="to" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ActionTranslate" ref="true" />
      </containers>
    </api>
    <api id="T:AnimatedTexture">
      <apidata name="AnimatedTexture" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:AnimatedTexture.maxTextureSize" />
        <element api="F:AnimatedTexture.minTextureSize" />
        <element api="F:AnimatedTexture.maxTextureOffsetX" />
        <element api="F:AnimatedTexture.minTextureOffsetX" />
        <element api="F:AnimatedTexture.maxTextureOffsetY" />
        <element api="F:AnimatedTexture.minTextureOffsetY" />
        <element api="F:AnimatedTexture.textureScaleSpeed" />
        <element api="F:AnimatedTexture.textureOffsetSpeed" />
        <element api="F:AnimatedTexture.offsetX" />
        <element api="F:AnimatedTexture.offsetY" />
        <element api="F:AnimatedTexture.scale" />
        <element api="M:AnimatedTexture.Start" />
        <element api="M:AnimatedTexture.Update" />
        <element api="M:AnimatedTexture.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:AnimatedTexture.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AnimatedTexture" ref="true" />
      </containers>
    </api>
    <api id="F:AnimatedTexture.maxTextureOffsetX">
      <apidata name="maxTextureOffsetX" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AnimatedTexture" ref="true" />
      </containers>
    </api>
    <api id="F:AnimatedTexture.maxTextureOffsetY">
      <apidata name="maxTextureOffsetY" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AnimatedTexture" ref="true" />
      </containers>
    </api>
    <api id="F:AnimatedTexture.maxTextureSize">
      <apidata name="maxTextureSize" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AnimatedTexture" ref="true" />
      </containers>
    </api>
    <api id="F:AnimatedTexture.minTextureOffsetX">
      <apidata name="minTextureOffsetX" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AnimatedTexture" ref="true" />
      </containers>
    </api>
    <api id="F:AnimatedTexture.minTextureOffsetY">
      <apidata name="minTextureOffsetY" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AnimatedTexture" ref="true" />
      </containers>
    </api>
    <api id="F:AnimatedTexture.minTextureSize">
      <apidata name="minTextureSize" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AnimatedTexture" ref="true" />
      </containers>
    </api>
    <api id="F:AnimatedTexture.offsetX">
      <apidata name="offsetX" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AnimatedTexture" ref="true" />
      </containers>
    </api>
    <api id="F:AnimatedTexture.offsetY">
      <apidata name="offsetY" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AnimatedTexture" ref="true" />
      </containers>
    </api>
    <api id="F:AnimatedTexture.scale">
      <apidata name="scale" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AnimatedTexture" ref="true" />
      </containers>
    </api>
    <api id="M:AnimatedTexture.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AnimatedTexture" ref="true" />
      </containers>
    </api>
    <api id="F:AnimatedTexture.textureOffsetSpeed">
      <apidata name="textureOffsetSpeed" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AnimatedTexture" ref="true" />
      </containers>
    </api>
    <api id="F:AnimatedTexture.textureScaleSpeed">
      <apidata name="textureScaleSpeed" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AnimatedTexture" ref="true" />
      </containers>
    </api>
    <api id="M:AnimatedTexture.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AnimatedTexture" ref="true" />
      </containers>
    </api>
    <api id="T:ArmEnemy">
      <apidata name="ArmEnemy" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:EnemyAI" ref="true" />
          <type api="T:CommonEntity" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:ArmEnemy.meleeAttackDamage" />
        <element api="F:ArmEnemy.animator" />
        <element api="F:ArmEnemy.viewRange" />
        <element api="F:ArmEnemy.attackRange" />
        <element api="F:ArmEnemy.inAttack" />
        <element api="F:ArmEnemy.attack1Cooldown" />
        <element api="F:ArmEnemy.attack2Cooldown" />
        <element api="F:ArmEnemy.explosionPrefab" />
        <element api="F:ArmEnemy.smoke" />
        <element api="F:ArmEnemy.smokePrefab" />
        <element api="M:ArmEnemy.Start" />
        <element api="M:ArmEnemy.Update" />
        <element api="M:ArmEnemy.Attack1CooldownAnimation" />
        <element api="M:ArmEnemy.Die" />
        <element api="M:ArmEnemy.Destruct" />
        <element api="M:ArmEnemy.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ArmEnemy.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ArmEnemy" ref="true" />
      </containers>
    </api>
    <api id="F:ArmEnemy.animator">
      <apidata name="animator" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Animator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ArmEnemy" ref="true" />
      </containers>
    </api>
    <api id="F:ArmEnemy.attack1Cooldown">
      <apidata name="attack1Cooldown" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ArmEnemy" ref="true" />
      </containers>
    </api>
    <api id="M:ArmEnemy.Attack1CooldownAnimation">
      <apidata name="Attack1CooldownAnimation" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ArmEnemy" ref="true" />
      </containers>
    </api>
    <api id="F:ArmEnemy.attack2Cooldown">
      <apidata name="attack2Cooldown" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ArmEnemy" ref="true" />
      </containers>
    </api>
    <api id="F:ArmEnemy.attackRange">
      <apidata name="attackRange" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ArmEnemy" ref="true" />
      </containers>
    </api>
    <api id="M:ArmEnemy.Destruct">
      <apidata name="Destruct" group="member" subgroup="method" />
      <memberdata visibility="assembly" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:EnemyAI.Destruct">
          <type api="T:EnemyAI" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ArmEnemy" ref="true" />
      </containers>
    </api>
    <api id="M:ArmEnemy.Die">
      <apidata name="Die" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:EnemyAI.Die">
          <type api="T:EnemyAI" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ArmEnemy" ref="true" />
      </containers>
    </api>
    <api id="F:ArmEnemy.explosionPrefab">
      <apidata name="explosionPrefab" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ArmEnemy" ref="true" />
      </containers>
    </api>
    <api id="F:ArmEnemy.inAttack">
      <apidata name="inAttack" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ArmEnemy" ref="true" />
      </containers>
    </api>
    <api id="F:ArmEnemy.meleeAttackDamage">
      <apidata name="meleeAttackDamage" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ArmEnemy" ref="true" />
      </containers>
    </api>
    <api id="F:ArmEnemy.smoke">
      <apidata name="smoke" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ArmEnemy" ref="true" />
      </containers>
    </api>
    <api id="F:ArmEnemy.smokePrefab">
      <apidata name="smokePrefab" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ArmEnemy" ref="true" />
      </containers>
    </api>
    <api id="M:ArmEnemy.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ArmEnemy" ref="true" />
      </containers>
    </api>
    <api id="M:ArmEnemy.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ArmEnemy" ref="true" />
      </containers>
    </api>
    <api id="F:ArmEnemy.viewRange">
      <apidata name="viewRange" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ArmEnemy" ref="true" />
      </containers>
    </api>
    <api id="T:AutoTransparency">
      <apidata name="AutoTransparency" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:AutoTransparency.WantedTransparency" />
        <element api="F:AutoTransparency.FalloffTime" />
        <element api="F:AutoTransparency.oldShader" />
        <element api="F:AutoTransparency.oldColor" />
        <element api="F:AutoTransparency.transparency" />
        <element api="M:AutoTransparency.Start" />
        <element api="M:AutoTransparency.BeTransparent" />
        <element api="M:AutoTransparency.Update" />
        <element api="M:AutoTransparency.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:AutoTransparency.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AutoTransparency" ref="true" />
      </containers>
    </api>
    <api id="M:AutoTransparency.BeTransparent">
      <apidata name="BeTransparent" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AutoTransparency" ref="true" />
      </containers>
    </api>
    <api id="F:AutoTransparency.FalloffTime">
      <apidata name="FalloffTime" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AutoTransparency" ref="true" />
      </containers>
    </api>
    <api id="F:AutoTransparency.oldColor">
      <apidata name="oldColor" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Color" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AutoTransparency" ref="true" />
      </containers>
    </api>
    <api id="F:AutoTransparency.oldShader">
      <apidata name="oldShader" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Shader" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AutoTransparency" ref="true" />
      </containers>
    </api>
    <api id="M:AutoTransparency.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AutoTransparency" ref="true" />
      </containers>
    </api>
    <api id="F:AutoTransparency.transparency">
      <apidata name="transparency" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AutoTransparency" ref="true" />
      </containers>
    </api>
    <api id="M:AutoTransparency.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AutoTransparency" ref="true" />
      </containers>
    </api>
    <api id="F:AutoTransparency.WantedTransparency">
      <apidata name="WantedTransparency" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:AutoTransparency" ref="true" />
      </containers>
    </api>
    <api id="T:BackgroundSound">
      <apidata name="BackgroundSound" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:BackgroundSound._instance" />
        <element api="F:BackgroundSound.backgroundSongs" />
        <element api="F:BackgroundSound.currentTrack" />
        <element api="F:BackgroundSound.currentAudioClip" />
        <element api="F:BackgroundSound.fadeIn" />
        <element api="F:BackgroundSound.fadeOut" />
        <element api="F:BackgroundSound.maxVolume" />
        <element api="F:BackgroundSound.minVolume" />
        <element api="F:BackgroundSound.volumeFadingStep" />
        <element api="M:BackgroundSound.Awake" />
        <element api="M:BackgroundSound.Start" />
        <element api="M:BackgroundSound.Update" />
        <element api="M:BackgroundSound.FadeIn" />
        <element api="M:BackgroundSound.OnLevelWasLoaded(System.Int32)" />
        <element api="M:BackgroundSound.#ctor" />
        <element api="M:BackgroundSound.#cctor" />
        <element api="P:BackgroundSound.Instance" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:BackgroundSound.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BackgroundSound" ref="true" />
      </containers>
    </api>
    <api id="M:BackgroundSound.#cctor">
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BackgroundSound" ref="true" />
      </containers>
    </api>
    <api id="F:BackgroundSound._instance">
      <apidata name="_instance" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:BackgroundSound" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BackgroundSound" ref="true" />
      </containers>
    </api>
    <api id="M:BackgroundSound.Awake">
      <apidata name="Awake" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BackgroundSound" ref="true" />
      </containers>
    </api>
    <api id="F:BackgroundSound.backgroundSongs">
      <apidata name="backgroundSongs" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:UnityEngine.AudioClip" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BackgroundSound" ref="true" />
      </containers>
    </api>
    <api id="F:BackgroundSound.currentAudioClip">
      <apidata name="currentAudioClip" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.AudioClip" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BackgroundSound" ref="true" />
      </containers>
    </api>
    <api id="F:BackgroundSound.currentTrack">
      <apidata name="currentTrack" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BackgroundSound" ref="true" />
      </containers>
    </api>
    <api id="F:BackgroundSound.fadeIn">
      <apidata name="fadeIn" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BackgroundSound" ref="true" />
      </containers>
    </api>
    <api id="M:BackgroundSound.FadeIn">
      <apidata name="FadeIn" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BackgroundSound" ref="true" />
      </containers>
    </api>
    <api id="F:BackgroundSound.fadeOut">
      <apidata name="fadeOut" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BackgroundSound" ref="true" />
      </containers>
    </api>
    <api id="P:BackgroundSound.Instance">
      <apidata name="Instance" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Instance" />
      <returns>
        <type api="T:BackgroundSound" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BackgroundSound" ref="true" />
      </containers>
    </api>
    <api id="F:BackgroundSound.maxVolume">
      <apidata name="maxVolume" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BackgroundSound" ref="true" />
      </containers>
    </api>
    <api id="F:BackgroundSound.minVolume">
      <apidata name="minVolume" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BackgroundSound" ref="true" />
      </containers>
    </api>
    <api id="M:BackgroundSound.OnLevelWasLoaded(System.Int32)">
      <apidata name="OnLevelWasLoaded" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BackgroundSound" ref="true" />
      </containers>
    </api>
    <api id="M:BackgroundSound.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BackgroundSound" ref="true" />
      </containers>
    </api>
    <api id="M:BackgroundSound.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BackgroundSound" ref="true" />
      </containers>
    </api>
    <api id="F:BackgroundSound.volumeFadingStep">
      <apidata name="volumeFadingStep" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BackgroundSound" ref="true" />
      </containers>
    </api>
    <api id="T:BaseItem">
      <apidata name="BaseItem" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Prism" ref="true" />
          <type api="T:Coil" ref="true" />
          <type api="T:EnergyCapsule" ref="true" />
          <type api="T:Fan" ref="true" />
          <type api="T:Microchip" ref="true" />
          <type api="T:RepairKit" ref="true" />
          <type api="T:Spring" ref="true" />
          <type api="T:USBStick" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="F:BaseItem.rotate" />
        <element api="F:BaseItem.rotationSpeed" />
        <element api="F:BaseItem.pickUpEffect" />
        <element api="F:BaseItem.fallPerSecond" />
        <element api="M:BaseItem.Start" />
        <element api="M:BaseItem.Update" />
        <element api="M:BaseItem.FallDown" />
        <element api="M:BaseItem.DistanceToGround" />
        <element api="M:BaseItem.TurnIntoTrigger" />
        <element api="M:BaseItem.PickUp" />
        <element api="M:BaseItem.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:BaseItem.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseItem" ref="true" />
      </containers>
    </api>
    <api id="M:BaseItem.DistanceToGround">
      <apidata name="DistanceToGround" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseItem" ref="true" />
      </containers>
    </api>
    <api id="M:BaseItem.FallDown">
      <apidata name="FallDown" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseItem" ref="true" />
      </containers>
    </api>
    <api id="F:BaseItem.fallPerSecond">
      <apidata name="fallPerSecond" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseItem" ref="true" />
      </containers>
    </api>
    <api id="M:BaseItem.PickUp">
      <apidata name="PickUp" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:IInvItem" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseItem" ref="true" />
      </containers>
    </api>
    <api id="F:BaseItem.pickUpEffect">
      <apidata name="pickUpEffect" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseItem" ref="true" />
      </containers>
    </api>
    <api id="F:BaseItem.rotate">
      <apidata name="rotate" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseItem" ref="true" />
      </containers>
    </api>
    <api id="F:BaseItem.rotationSpeed">
      <apidata name="rotationSpeed" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseItem" ref="true" />
      </containers>
    </api>
    <api id="M:BaseItem.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseItem" ref="true" />
      </containers>
    </api>
    <api id="M:BaseItem.TurnIntoTrigger">
      <apidata name="TurnIntoTrigger" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseItem" ref="true" />
      </containers>
    </api>
    <api id="M:BaseItem.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseItem" ref="true" />
      </containers>
    </api>
    <api id="T:BaseSkill">
      <apidata name="BaseSkill" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:MeleeAttack" ref="true" />
          <type api="T:HackAttack" ref="true" />
          <type api="T:HeadbangAttack" ref="true" />
          <type api="T:LaserAttack" ref="true" />
          <type api="T:LightningAttack" ref="true" />
          <type api="T:MicrowaveAttack" ref="true" />
          <type api="T:PassiveBaseSkill" ref="true" />
          <type api="T:RoundhouseAttack" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:ISkill" ref="true" />
      </implements>
      <elements>
        <element api="F:BaseSkill.iconTexture" />
        <element api="M:BaseSkill.GetName" />
        <element api="M:BaseSkill.GetIconTexture" />
        <element api="M:BaseSkill.GetNeededSkills" />
        <element api="M:BaseSkill.GetNeededItems" />
        <element api="M:BaseSkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)" />
        <element api="M:BaseSkill.OnUseWithoutMana(UnityEngine.GameObject,Igor,System.Int32)" />
        <element api="M:BaseSkill.OnLevelChange(UnityEngine.GameObject,Igor,System.Int32)" />
        <element api="M:BaseSkill.GetCooldown(System.Int32)" />
        <element api="M:BaseSkill.GetNeededEnergy(System.Int32)" />
        <element api="M:BaseSkill.IsPassive" />
        <element api="M:BaseSkill.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:BaseSkill.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseSkill" ref="true" />
      </containers>
    </api>
    <api id="M:BaseSkill.GetCooldown(System.Int32)">
      <apidata name="GetCooldown" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetCooldown(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseSkill" ref="true" />
      </containers>
    </api>
    <api id="M:BaseSkill.GetIconTexture">
      <apidata name="GetIconTexture" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <implements>
        <member api="M:ISkill.GetIconTexture">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseSkill" ref="true" />
      </containers>
    </api>
    <api id="M:BaseSkill.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:ISkill.GetName">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseSkill" ref="true" />
      </containers>
    </api>
    <api id="M:BaseSkill.GetNeededEnergy(System.Int32)">
      <apidata name="GetNeededEnergy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededEnergy(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseSkill" ref="true" />
      </containers>
    </api>
    <api id="M:BaseSkill.GetNeededItems">
      <apidata name="GetNeededItems" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededItems">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseSkill" ref="true" />
      </containers>
    </api>
    <api id="M:BaseSkill.GetNeededSkills">
      <apidata name="GetNeededSkills" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededSkills">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseSkill" ref="true" />
      </containers>
    </api>
    <api id="F:BaseSkill.iconTexture">
      <apidata name="iconTexture" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseSkill" ref="true" />
      </containers>
    </api>
    <api id="M:BaseSkill.IsPassive">
      <apidata name="IsPassive" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.IsPassive">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseSkill" ref="true" />
      </containers>
    </api>
    <api id="M:BaseSkill.OnLevelChange(UnityEngine.GameObject,Igor,System.Int32)">
      <apidata name="OnLevelChange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="igorInstance">
          <type api="T:Igor" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.OnLevelChange(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseSkill" ref="true" />
      </containers>
    </api>
    <api id="M:BaseSkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
      <apidata name="OnUse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="igorInstance">
          <type api="T:Igor" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseSkill" ref="true" />
      </containers>
    </api>
    <api id="M:BaseSkill.OnUseWithoutMana(UnityEngine.GameObject,Igor,System.Int32)">
      <apidata name="OnUseWithoutMana" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="igorInstance">
          <type api="T:Igor" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.OnUseWithoutMana(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BaseSkill" ref="true" />
      </containers>
    </api>
    <api id="T:BasicItem">
      <apidata name="BasicItem" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:Prism" ref="true" />
          <type api="T:BaseItem" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:BasicItem.itemName" />
        <element api="M:BasicItem.GetName" />
        <element api="M:BasicItem.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:BasicItem.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BasicItem" ref="true" />
      </containers>
    </api>
    <api id="M:BasicItem.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Prism.GetName">
          <type api="T:Prism" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BasicItem" ref="true" />
      </containers>
    </api>
    <api id="F:BasicItem.itemName">
      <apidata name="itemName" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BasicItem" ref="true" />
      </containers>
    </api>
    <api id="T:BossAI">
      <apidata name="BossAI" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:EnemyAI" ref="true" />
          <type api="T:CommonEntity" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:BossAI.door" />
        <element api="F:BossAI.run" />
        <element api="F:BossAI.transformer" />
        <element api="F:BossAI.shield" />
        <element api="F:BossAI.animator" />
        <element api="F:BossAI.rangeProjektile" />
        <element api="F:BossAI.projektileStartPoint" />
        <element api="F:BossAI.lastPosition" />
        <element api="F:BossAI.rangeAtackCooldown" />
        <element api="F:BossAI.curentRangeAtackCooldown" />
        <element api="F:BossAI.rangAnimationDelay" />
        <element api="F:BossAI.charge" />
        <element api="F:BossAI.chargeSpeed" />
        <element api="F:BossAI.healthBarTexture" />
        <element api="F:BossAI.barBackgroundTexture" />
        <element api="F:BossAI.skillPointMessageguiStyle" />
        <element api="M:BossAI.Start" />
        <element api="M:BossAI.Update" />
        <element api="M:BossAI.TakeDamage(System.Single)" />
        <element api="M:BossAI.RangeAttack" />
        <element api="M:BossAI.ResetUpdate" />
        <element api="M:BossAI.StartAnimation(System.String)" />
        <element api="M:BossAI.GetAnimationLength(System.String)" />
        <element api="M:BossAI.IsHackable" />
        <element api="M:BossAI.OnGUI" />
        <element api="M:BossAI.UnityStart_GUI" />
        <element api="M:BossAI.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:BossAI.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="F:BossAI.animator">
      <apidata name="animator" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Animator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="F:BossAI.barBackgroundTexture">
      <apidata name="barBackgroundTexture" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="F:BossAI.charge">
      <apidata name="charge" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="F:BossAI.chargeSpeed">
      <apidata name="chargeSpeed" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="F:BossAI.curentRangeAtackCooldown">
      <apidata name="curentRangeAtackCooldown" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="F:BossAI.door">
      <apidata name="door" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Triggerable" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="M:BossAI.GetAnimationLength(System.String)">
      <apidata name="GetAnimationLength" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:CommonEntity.GetAnimationLength(System.String)">
          <type api="T:CommonEntity" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="animation">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="F:BossAI.healthBarTexture">
      <apidata name="healthBarTexture" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="M:BossAI.IsHackable">
      <apidata name="IsHackable" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:CommonEntity.IsHackable">
          <type api="T:CommonEntity" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="F:BossAI.lastPosition">
      <apidata name="lastPosition" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="M:BossAI.OnGUI">
      <apidata name="OnGUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="F:BossAI.projektileStartPoint">
      <apidata name="projektileStartPoint" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Transform" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="F:BossAI.rangAnimationDelay">
      <apidata name="rangAnimationDelay" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="F:BossAI.rangeAtackCooldown">
      <apidata name="rangeAtackCooldown" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="M:BossAI.RangeAttack">
      <apidata name="RangeAttack" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="F:BossAI.rangeProjektile">
      <apidata name="rangeProjektile" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="M:BossAI.ResetUpdate">
      <apidata name="ResetUpdate" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="F:BossAI.run">
      <apidata name="run" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="F:BossAI.shield">
      <apidata name="shield" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="F:BossAI.skillPointMessageguiStyle">
      <apidata name="skillPointMessageguiStyle" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GUIStyle" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="M:BossAI.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:EnemyAI.Start">
          <type api="T:EnemyAI" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="M:BossAI.StartAnimation(System.String)">
      <apidata name="StartAnimation" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:CommonEntity.StartAnimation(System.String)">
          <type api="T:CommonEntity" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="animation">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="M:BossAI.TakeDamage(System.Single)">
      <apidata name="TakeDamage" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:CommonEntity.TakeDamage(System.Single)">
          <type api="T:CommonEntity" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="hp">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:IHitable.TakeDamage(System.Single)">
          <type api="T:IHitable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="F:BossAI.transformer">
      <apidata name="transformer" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:UnityEngine.GameObject" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="M:BossAI.UnityStart_GUI">
      <apidata name="UnityStart_GUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="M:BossAI.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:EnemyAI.Update">
          <type api="T:EnemyAI" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossAI" ref="true" />
      </containers>
    </api>
    <api id="T:BossRocket">
      <apidata name="BossRocket" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:BossRocket.damage" />
        <element api="F:BossRocket.speed" />
        <element api="F:BossRocket.hitEffect" />
        <element api="F:BossRocket.moveDirection" />
        <element api="M:BossRocket.Start" />
        <element api="M:BossRocket.Update" />
        <element api="M:BossRocket.OnCollisionEnter(UnityEngine.Collision)" />
        <element api="M:BossRocket.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:BossRocket.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossRocket" ref="true" />
      </containers>
    </api>
    <api id="F:BossRocket.damage">
      <apidata name="damage" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossRocket" ref="true" />
      </containers>
    </api>
    <api id="F:BossRocket.hitEffect">
      <apidata name="hitEffect" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossRocket" ref="true" />
      </containers>
    </api>
    <api id="F:BossRocket.moveDirection">
      <apidata name="moveDirection" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossRocket" ref="true" />
      </containers>
    </api>
    <api id="M:BossRocket.OnCollisionEnter(UnityEngine.Collision)">
      <apidata name="OnCollisionEnter" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="collision">
          <type api="T:UnityEngine.Collision" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossRocket" ref="true" />
      </containers>
    </api>
    <api id="F:BossRocket.speed">
      <apidata name="speed" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossRocket" ref="true" />
      </containers>
    </api>
    <api id="M:BossRocket.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossRocket" ref="true" />
      </containers>
    </api>
    <api id="M:BossRocket.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BossRocket" ref="true" />
      </containers>
    </api>
    <api id="T:BrokenCeilingLamp">
      <apidata name="BrokenCeilingLamp" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:BrokenCeilingLamp.on" />
        <element api="F:BrokenCeilingLamp.lastFlicker" />
        <element api="F:BrokenCeilingLamp.maxTimeToFlicker" />
        <element api="F:BrokenCeilingLamp.maxFlickerLength" />
        <element api="F:BrokenCeilingLamp.onMaterial" />
        <element api="F:BrokenCeilingLamp.offMaterial" />
        <element api="F:BrokenCeilingLamp.nextChange" />
        <element api="M:BrokenCeilingLamp.Start" />
        <element api="M:BrokenCeilingLamp.Update" />
        <element api="M:BrokenCeilingLamp.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:BrokenCeilingLamp.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BrokenCeilingLamp" ref="true" />
      </containers>
    </api>
    <api id="F:BrokenCeilingLamp.lastFlicker">
      <apidata name="lastFlicker" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BrokenCeilingLamp" ref="true" />
      </containers>
    </api>
    <api id="F:BrokenCeilingLamp.maxFlickerLength">
      <apidata name="maxFlickerLength" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BrokenCeilingLamp" ref="true" />
      </containers>
    </api>
    <api id="F:BrokenCeilingLamp.maxTimeToFlicker">
      <apidata name="maxTimeToFlicker" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BrokenCeilingLamp" ref="true" />
      </containers>
    </api>
    <api id="F:BrokenCeilingLamp.nextChange">
      <apidata name="nextChange" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BrokenCeilingLamp" ref="true" />
      </containers>
    </api>
    <api id="F:BrokenCeilingLamp.offMaterial">
      <apidata name="offMaterial" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Material" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BrokenCeilingLamp" ref="true" />
      </containers>
    </api>
    <api id="F:BrokenCeilingLamp.on">
      <apidata name="on" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BrokenCeilingLamp" ref="true" />
      </containers>
    </api>
    <api id="F:BrokenCeilingLamp.onMaterial">
      <apidata name="onMaterial" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Material" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BrokenCeilingLamp" ref="true" />
      </containers>
    </api>
    <api id="M:BrokenCeilingLamp.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BrokenCeilingLamp" ref="true" />
      </containers>
    </api>
    <api id="M:BrokenCeilingLamp.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:BrokenCeilingLamp" ref="true" />
      </containers>
    </api>
    <api id="T:Chest">
      <apidata name="Chest" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:IUsable" ref="true" />
      </implements>
      <elements>
        <element api="F:Chest.dropscript" />
        <element api="F:Chest.items" />
        <element api="F:Chest.open" />
        <element api="M:Chest.Start" />
        <element api="M:Chest.OnUse(UnityEngine.GameObject)" />
        <element api="M:Chest.ItemDrop" />
        <element api="M:Chest.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Chest.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Chest" ref="true" />
      </containers>
    </api>
    <api id="F:Chest.dropscript">
      <apidata name="dropscript" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Chest" ref="true" />
      </containers>
    </api>
    <api id="M:Chest.ItemDrop">
      <apidata name="ItemDrop" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Chest" ref="true" />
      </containers>
    </api>
    <api id="F:Chest.items">
      <apidata name="items" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:UnityEngine.GameObject" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Chest" ref="true" />
      </containers>
    </api>
    <api id="M:Chest.OnUse(UnityEngine.GameObject)">
      <apidata name="OnUse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:IUsable.OnUse(UnityEngine.GameObject)">
          <type api="T:IUsable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Chest" ref="true" />
      </containers>
    </api>
    <api id="F:Chest.open">
      <apidata name="open" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Chest" ref="true" />
      </containers>
    </api>
    <api id="M:Chest.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Chest" ref="true" />
      </containers>
    </api>
    <api id="T:Coil">
      <apidata name="Coil" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:BaseItem" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Coil.PickUp" />
        <element api="M:Coil.GetName" />
        <element api="M:Coil.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Coil.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Coil" ref="true" />
      </containers>
    </api>
    <api id="M:Coil.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Coil" ref="true" />
      </containers>
    </api>
    <api id="M:Coil.PickUp">
      <apidata name="PickUp" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseItem.PickUp">
          <type api="T:BaseItem" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:IInvItem" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Coil" ref="true" />
      </containers>
    </api>
    <api id="T:Coil.InvItem">
      <apidata name="InvItem" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:IInvItem" ref="true" />
      </implements>
      <elements>
        <element api="F:Coil.InvItem.name" />
        <element api="M:Coil.InvItem.#ctor(System.String)" />
        <element api="M:Coil.InvItem.GetDisplayName" />
        <element api="M:Coil.InvItem.GetMaxStackSize" />
        <element api="M:Coil.InvItem.Drop" />
        <element api="M:Coil.InvItem.Use(UnityEngine.GameObject)" />
        <element api="M:Coil.InvItem.Combinable(IInvItem)" />
        <element api="M:Coil.InvItem.Combine(IInvItem)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Coil" ref="true" />
      </containers>
    </api>
    <api id="M:Coil.InvItem.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Coil.InvItem" ref="true">
          <type api="T:Coil" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Coil.InvItem.Combinable(IInvItem)">
      <apidata name="Combinable" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <type api="T:IInvItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Combinable(IInvItem)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Coil.InvItem" ref="true">
          <type api="T:Coil" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Coil.InvItem.Combine(IInvItem)">
      <apidata name="Combine" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <type api="T:IInvItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:IInvItem" ref="true" />
      </returns>
      <implements>
        <member api="M:IInvItem.Combine(IInvItem)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Coil.InvItem" ref="true">
          <type api="T:Coil" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Coil.InvItem.Drop">
      <apidata name="Drop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Drop">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Coil.InvItem" ref="true">
          <type api="T:Coil" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Coil.InvItem.GetDisplayName">
      <apidata name="GetDisplayName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:IInvItem.GetDisplayName">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Coil.InvItem" ref="true">
          <type api="T:Coil" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Coil.InvItem.GetMaxStackSize">
      <apidata name="GetMaxStackSize" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.GetMaxStackSize">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Coil.InvItem" ref="true">
          <type api="T:Coil" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Coil.InvItem.name">
      <apidata name="name" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Coil.InvItem" ref="true">
          <type api="T:Coil" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Coil.InvItem.Use(UnityEngine.GameObject)">
      <apidata name="Use" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="entity">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Use(UnityEngine.GameObject)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Coil.InvItem" ref="true">
          <type api="T:Coil" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:CommonEntity">
      <apidata name="CommonEntity" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:EnemyAI" ref="true" />
          <type api="T:Transformer" ref="true" />
          <type api="T:Igor" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:IHitable" ref="true" />
      </implements>
      <elements>
        <element api="F:CommonEntity.currentState" />
        <element api="F:CommonEntity.speed" />
        <element api="F:CommonEntity.damageOverTimeEffects" />
        <element api="F:CommonEntity.healthPoints" />
        <element api="F:CommonEntity.maxHealthPoints" />
        <element api="F:CommonEntity.healthRegeneration" />
        <element api="F:CommonEntity.timeUntilRegeneration" />
        <element api="F:CommonEntity.lastHitTime" />
        <element api="F:CommonEntity.lastAttackTime" />
        <element api="F:CommonEntity.mana" />
        <element api="F:CommonEntity.maxMana" />
        <element api="F:CommonEntity.lastManaUsageTime" />
        <element api="F:CommonEntity.manaRegeneration" />
        <element api="F:CommonEntity.timeUntilManaRegeneration" />
        <element api="F:CommonEntity.distanceToGround" />
        <element api="F:CommonEntity._lock" />
        <element api="F:CommonEntity.currentFaction" />
        <element api="M:CommonEntity.IsDead" />
        <element api="M:CommonEntity.IsAlive" />
        <element api="M:CommonEntity.Start" />
        <element api="M:CommonEntity.Update" />
        <element api="M:CommonEntity.Die" />
        <element api="M:CommonEntity.TakeDamage(System.Single)" />
        <element api="M:CommonEntity.TakeDamageOverTime(System.Single,System.Single,System.Single)" />
        <element api="M:CommonEntity.CalculateDamageOverTime" />
        <element api="M:CommonEntity.RegenerateHealth" />
        <element api="M:CommonEntity.InstantaneousHeal(System.Single)" />
        <element api="M:CommonEntity.RegenerateMana" />
        <element api="M:CommonEntity.InstantaneousManaRegeneration(System.Single)" />
        <element api="M:CommonEntity.IsOnGround" />
        <element api="M:CommonEntity.DistanceToGround" />
        <element api="M:CommonEntity.DistanceToRoof" />
        <element api="M:CommonEntity.IsLocked" />
        <element api="M:CommonEntity.Lock" />
        <element api="M:CommonEntity.Unlock" />
        <element api="M:CommonEntity.StartAnimation(System.String)" />
        <element api="M:CommonEntity.GetAnimationLength(System.String)" />
        <element api="M:CommonEntity.IsHackable" />
        <element api="M:CommonEntity.GetFaction" />
        <element api="M:CommonEntity.OnFactionChange" />
        <element api="M:CommonEntity.SetFaction(CommonEntity.Faction)" />
        <element api="M:CommonEntity.ChangeFaction" />
        <element api="M:CommonEntity.IsFriend(CommonEntity)" />
        <element api="M:CommonEntity.IsFriend(CommonEntity.Faction)" />
        <element api="M:CommonEntity.FindNearestEnemy(System.Single,System.Single)" />
        <element api="M:CommonEntity.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:CommonEntity.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="F:CommonEntity._lock">
      <apidata name="_lock" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.CalculateDamageOverTime">
      <apidata name="CalculateDamageOverTime" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.ChangeFaction">
      <apidata name="ChangeFaction" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="F:CommonEntity.currentFaction">
      <apidata name="currentFaction" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:CommonEntity.Faction" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="F:CommonEntity.currentState">
      <apidata name="currentState" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:CommonEntity.EntityState" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="F:CommonEntity.damageOverTimeEffects">
      <apidata name="damageOverTimeEffects" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:CommonEntity.DamageOverTime" ref="true">
              <type api="T:CommonEntity" ref="true" />
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.Die">
      <apidata name="Die" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="F:CommonEntity.distanceToGround">
      <apidata name="distanceToGround" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.DistanceToGround">
      <apidata name="DistanceToGround" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.DistanceToRoof">
      <apidata name="DistanceToRoof" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.FindNearestEnemy(System.Single,System.Single)">
      <apidata name="FindNearestEnemy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="detectionRange">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="angle" optional="true">
          <type api="T:System.Single" ref="false" />
          <argument>
            <type api="T:System.Single" ref="false" />
            <value>180</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:CommonEntity" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.GetAnimationLength(System.String)">
      <apidata name="GetAnimationLength" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="animation">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.GetFaction">
      <apidata name="GetFaction" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:CommonEntity.Faction" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="F:CommonEntity.healthPoints">
      <apidata name="healthPoints" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="F:CommonEntity.healthRegeneration">
      <apidata name="healthRegeneration" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.InstantaneousHeal(System.Single)">
      <apidata name="InstantaneousHeal" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="hp">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.InstantaneousManaRegeneration(System.Single)">
      <apidata name="InstantaneousManaRegeneration" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="addMana">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.IsAlive">
      <apidata name="IsAlive" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.IsDead">
      <apidata name="IsDead" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.IsFriend(CommonEntity)">
      <apidata name="IsFriend" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="other">
          <type api="T:CommonEntity" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.IsFriend(CommonEntity.Faction)">
      <apidata name="IsFriend" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="otherFaction">
          <type api="T:CommonEntity.Faction" ref="false">
            <type api="T:CommonEntity" ref="true" />
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.IsHackable">
      <apidata name="IsHackable" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.IsLocked">
      <apidata name="IsLocked" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.IsOnGround">
      <apidata name="IsOnGround" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="F:CommonEntity.lastAttackTime">
      <apidata name="lastAttackTime" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="F:CommonEntity.lastHitTime">
      <apidata name="lastHitTime" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="F:CommonEntity.lastManaUsageTime">
      <apidata name="lastManaUsageTime" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.Lock">
      <apidata name="Lock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="F:CommonEntity.mana">
      <apidata name="mana" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="F:CommonEntity.manaRegeneration">
      <apidata name="manaRegeneration" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="F:CommonEntity.maxHealthPoints">
      <apidata name="maxHealthPoints" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="F:CommonEntity.maxMana">
      <apidata name="maxMana" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.OnFactionChange">
      <apidata name="OnFactionChange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.RegenerateHealth">
      <apidata name="RegenerateHealth" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.RegenerateMana">
      <apidata name="RegenerateMana" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.SetFaction(CommonEntity.Faction)">
      <apidata name="SetFaction" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="newFaction">
          <type api="T:CommonEntity.Faction" ref="false">
            <type api="T:CommonEntity" ref="true" />
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="F:CommonEntity.speed">
      <apidata name="speed" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.StartAnimation(System.String)">
      <apidata name="StartAnimation" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="animation">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.TakeDamage(System.Single)">
      <apidata name="TakeDamage" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="hp">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:IHitable.TakeDamage(System.Single)">
          <type api="T:IHitable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.TakeDamageOverTime(System.Single,System.Single,System.Single)">
      <apidata name="TakeDamageOverTime" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="damagePerInterval">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="interval">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="seconds">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:IHitable.TakeDamageOverTime(System.Single,System.Single,System.Single)">
          <type api="T:IHitable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="F:CommonEntity.timeUntilManaRegeneration">
      <apidata name="timeUntilManaRegeneration" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="F:CommonEntity.timeUntilRegeneration">
      <apidata name="timeUntilRegeneration" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.Unlock">
      <apidata name="Unlock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="T:CommonEntity.DamageOverTime">
      <apidata name="DamageOverTime" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:CommonEntity.DamageOverTime.lastTime" />
        <element api="F:CommonEntity.DamageOverTime.damagePerInterval" />
        <element api="F:CommonEntity.DamageOverTime.interval" />
        <element api="F:CommonEntity.DamageOverTime.timeLeft" />
        <element api="M:CommonEntity.DamageOverTime.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="M:CommonEntity.DamageOverTime.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity.DamageOverTime" ref="true">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:CommonEntity.DamageOverTime.damagePerInterval">
      <apidata name="damagePerInterval" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity.DamageOverTime" ref="true">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:CommonEntity.DamageOverTime.interval">
      <apidata name="interval" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity.DamageOverTime" ref="true">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:CommonEntity.DamageOverTime.lastTime">
      <apidata name="lastTime" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity.DamageOverTime" ref="true">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:CommonEntity.DamageOverTime.timeLeft">
      <apidata name="timeLeft" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity.DamageOverTime" ref="true">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:CommonEntity.EntityState">
      <apidata name="EntityState" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" layout="auto" format="ansi" />
      <elements>
        <element api="F:CommonEntity.EntityState.dead" />
        <element api="F:CommonEntity.EntityState.normal" />
        <element api="F:CommonEntity.EntityState.startpushing" />
        <element api="F:CommonEntity.EntityState.pushing" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="F:CommonEntity.EntityState.dead">
      <apidata name="dead" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:CommonEntity.EntityState" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity.EntityState" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:CommonEntity.EntityState.normal">
      <apidata name="normal" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:CommonEntity.EntityState" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity.EntityState" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:CommonEntity.EntityState.pushing">
      <apidata name="pushing" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:CommonEntity.EntityState" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </returns>
      <value>3</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity.EntityState" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:CommonEntity.EntityState.startpushing">
      <apidata name="startpushing" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:CommonEntity.EntityState" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity.EntityState" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:CommonEntity.Faction">
      <apidata name="Faction" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" layout="auto" format="ansi" />
      <elements>
        <element api="F:CommonEntity.Faction.NONE" />
        <element api="F:CommonEntity.Faction.PLAYER" />
        <element api="F:CommonEntity.Faction.ENEMY" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity" ref="true" />
      </containers>
    </api>
    <api id="F:CommonEntity.Faction.ENEMY">
      <apidata name="ENEMY" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:CommonEntity.Faction" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity.Faction" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:CommonEntity.Faction.NONE">
      <apidata name="NONE" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:CommonEntity.Faction" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity.Faction" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:CommonEntity.Faction.PLAYER">
      <apidata name="PLAYER" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:CommonEntity.Faction" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:CommonEntity.Faction" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:Controls">
      <apidata name="Controls" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Controls.mySkin" />
        <element api="F:Controls.current" />
        <element api="F:Controls.lastSwitch" />
        <element api="F:Controls.lastMousePos" />
        <element api="M:Controls.Start" />
        <element api="M:Controls.OnGUI" />
        <element api="M:Controls.HandleButton(System.Int32)" />
        <element api="M:Controls.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Controls.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Controls" ref="true" />
      </containers>
    </api>
    <api id="F:Controls.current">
      <apidata name="current" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Controls" ref="true" />
      </containers>
    </api>
    <api id="M:Controls.HandleButton(System.Int32)">
      <apidata name="HandleButton" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="id">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Controls" ref="true" />
      </containers>
    </api>
    <api id="F:Controls.lastMousePos">
      <apidata name="lastMousePos" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Controls" ref="true" />
      </containers>
    </api>
    <api id="F:Controls.lastSwitch">
      <apidata name="lastSwitch" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Controls" ref="true" />
      </containers>
    </api>
    <api id="F:Controls.mySkin">
      <apidata name="mySkin" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GUISkin" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Controls" ref="true" />
      </containers>
    </api>
    <api id="M:Controls.OnGUI">
      <apidata name="OnGUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Controls" ref="true" />
      </containers>
    </api>
    <api id="M:Controls.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Controls" ref="true" />
      </containers>
    </api>
    <api id="T:Conveyor">
      <apidata name="Conveyor" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Conveyor.speed" />
        <element api="M:Conveyor.OnTriggerStay(UnityEngine.Collider)" />
        <element api="M:Conveyor.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Conveyor.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Conveyor" ref="true" />
      </containers>
    </api>
    <api id="M:Conveyor.OnTriggerStay(UnityEngine.Collider)">
      <apidata name="OnTriggerStay" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="collider">
          <type api="T:UnityEngine.Collider" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Conveyor" ref="true" />
      </containers>
    </api>
    <api id="F:Conveyor.speed">
      <apidata name="speed" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Conveyor" ref="true" />
      </containers>
    </api>
    <api id="T:Credits">
      <apidata name="Credits" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Credits.renderSizeX" />
        <element api="F:Credits.renderSizeY" />
        <element api="F:Credits.img" />
        <element api="F:Credits.blackPixel" />
        <element api="F:Credits.tex01IgorChronicles" />
        <element api="F:Credits.tex02Design" />
        <element api="F:Credits.tex03Design" />
        <element api="F:Credits.tex04Proj" />
        <element api="F:Credits.tex05Proj" />
        <element api="F:Credits.tex06Devel" />
        <element api="F:Credits.tex07Devel" />
        <element api="F:Credits.tex08Artists" />
        <element api="F:Credits.tex09Artists" />
        <element api="F:Credits.tex10Alpha" />
        <element api="F:Credits.tex11Alpha" />
        <element api="F:Credits.tex12Beta" />
        <element api="F:Credits.tex13Beta" />
        <element api="F:Credits.tex14SpecialThanks" />
        <element api="F:Credits.tex15SpecialThanks" />
        <element api="F:Credits.tex16SpecialThanks" />
        <element api="F:Credits.tex17RobotHarming" />
        <element api="F:Credits.tex18Draph" />
        <element api="F:Credits.tex19Draph" />
        <element api="F:Credits.tex20Draph" />
        <element api="F:Credits.currentImg" />
        <element api="F:Credits.currentImgTime" />
        <element api="F:Credits.effectTimePerImage" />
        <element api="F:Credits.timePerImg" />
        <element api="F:Credits.pixelToDo" />
        <element api="F:Credits.pixelPos" />
        <element api="M:Credits.Start" />
        <element api="M:Credits.Update" />
        <element api="M:Credits.EndScene" />
        <element api="M:Credits.OnGUI" />
        <element api="M:Credits.GeneratePixelToDo" />
        <element api="M:Credits.EffectPixelFlip(UnityEngine.Texture2D)" />
        <element api="M:Credits.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Credits.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.blackPixel">
      <apidata name="blackPixel" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.currentImg">
      <apidata name="currentImg" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.currentImgTime">
      <apidata name="currentImgTime" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="M:Credits.EffectPixelFlip(UnityEngine.Texture2D)">
      <apidata name="EffectPixelFlip" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="otherImg">
          <type api="T:UnityEngine.Texture2D" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.effectTimePerImage">
      <apidata name="effectTimePerImage" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="M:Credits.EndScene">
      <apidata name="EndScene" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="M:Credits.GeneratePixelToDo">
      <apidata name="GeneratePixelToDo" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.img">
      <apidata name="img" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="M:Credits.OnGUI">
      <apidata name="OnGUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.pixelPos">
      <apidata name="pixelPos" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.pixelToDo">
      <apidata name="pixelToDo" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Credits.Coords" ref="false">
              <type api="T:Credits" ref="true" />
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.renderSizeX">
      <apidata name="renderSizeX" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.renderSizeY">
      <apidata name="renderSizeY" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="M:Credits.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex01IgorChronicles">
      <apidata name="tex01IgorChronicles" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex02Design">
      <apidata name="tex02Design" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex03Design">
      <apidata name="tex03Design" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex04Proj">
      <apidata name="tex04Proj" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex05Proj">
      <apidata name="tex05Proj" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex06Devel">
      <apidata name="tex06Devel" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex07Devel">
      <apidata name="tex07Devel" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex08Artists">
      <apidata name="tex08Artists" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex09Artists">
      <apidata name="tex09Artists" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex10Alpha">
      <apidata name="tex10Alpha" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex11Alpha">
      <apidata name="tex11Alpha" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex12Beta">
      <apidata name="tex12Beta" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex13Beta">
      <apidata name="tex13Beta" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex14SpecialThanks">
      <apidata name="tex14SpecialThanks" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex15SpecialThanks">
      <apidata name="tex15SpecialThanks" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex16SpecialThanks">
      <apidata name="tex16SpecialThanks" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex17RobotHarming">
      <apidata name="tex17RobotHarming" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex18Draph">
      <apidata name="tex18Draph" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex19Draph">
      <apidata name="tex19Draph" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.tex20Draph">
      <apidata name="tex20Draph" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.timePerImg">
      <apidata name="timePerImg" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="M:Credits.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="T:Credits.Coords">
      <apidata name="Coords" group="type" subgroup="structure" />
      <typedata visibility="private" sealed="true" serializable="false" layout="sequential" format="ansi" />
      <elements>
        <element api="F:Credits.Coords.x" />
        <element api="F:Credits.Coords.y" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits" ref="true" />
      </containers>
    </api>
    <api id="F:Credits.Coords.x">
      <apidata name="x" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits.Coords" ref="false">
          <type api="T:Credits" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Credits.Coords.y">
      <apidata name="y" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Credits.Coords" ref="false">
          <type api="T:Credits" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:DestructIgor">
      <apidata name="DestructIgor" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:DestructIgor.Start" />
        <element api="M:DestructIgor.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:DestructIgor.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DestructIgor" ref="true" />
      </containers>
    </api>
    <api id="M:DestructIgor.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DestructIgor" ref="true" />
      </containers>
    </api>
    <api id="T:DestructionTrigger">
      <apidata name="DestructionTrigger" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:ITrigger" ref="true" />
        <type api="T:IUsable" ref="true" />
      </implements>
      <elements>
        <element api="F:DestructionTrigger.isTriggered" />
        <element api="F:DestructionTrigger.isOneShotTrigger" />
        <element api="F:DestructionTrigger.hasBeenTriggeredOnce" />
        <element api="F:DestructionTrigger.connectedObjects" />
        <element api="F:DestructionTrigger.destructionObjects" />
        <element api="M:DestructionTrigger.AddTriggerable(Triggerable)" />
        <element api="M:DestructionTrigger.IsTriggered" />
        <element api="M:DestructionTrigger.SetOneShotTrigger(System.Boolean)" />
        <element api="M:DestructionTrigger.OnUse(UnityEngine.GameObject)" />
        <element api="M:DestructionTrigger.Update" />
        <element api="M:DestructionTrigger.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:DestructionTrigger.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DestructionTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:DestructionTrigger.AddTriggerable(Triggerable)">
      <apidata name="AddTriggerable" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="triggerable">
          <type api="T:Triggerable" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:ITrigger.AddTriggerable(Triggerable)">
          <type api="T:ITrigger" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DestructionTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:DestructionTrigger.connectedObjects">
      <apidata name="connectedObjects" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Triggerable" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DestructionTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:DestructionTrigger.destructionObjects">
      <apidata name="destructionObjects" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:UnityEngine.GameObject" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DestructionTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:DestructionTrigger.hasBeenTriggeredOnce">
      <apidata name="hasBeenTriggeredOnce" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DestructionTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:DestructionTrigger.isOneShotTrigger">
      <apidata name="isOneShotTrigger" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DestructionTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:DestructionTrigger.isTriggered">
      <apidata name="isTriggered" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DestructionTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:DestructionTrigger.IsTriggered">
      <apidata name="IsTriggered" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:ITrigger.IsTriggered">
          <type api="T:ITrigger" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DestructionTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:DestructionTrigger.OnUse(UnityEngine.GameObject)">
      <apidata name="OnUse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:IUsable.OnUse(UnityEngine.GameObject)">
          <type api="T:IUsable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DestructionTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:DestructionTrigger.SetOneShotTrigger(System.Boolean)">
      <apidata name="SetOneShotTrigger" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="makeOneShot">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:ITrigger.SetOneShotTrigger(System.Boolean)">
          <type api="T:ITrigger" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DestructionTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:DestructionTrigger.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DestructionTrigger" ref="true" />
      </containers>
    </api>
    <api id="T:DiagnosisRobotEnemy">
      <apidata name="DiagnosisRobotEnemy" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:EnemyAI" ref="true" />
          <type api="T:CommonEntity" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:DiagnosisRobotEnemy.meleeDamage" />
        <element api="F:DiagnosisRobotEnemy.smokePrefab" />
        <element api="F:DiagnosisRobotEnemy.explosionPrefab" />
        <element api="F:DiagnosisRobotEnemy.smoke" />
        <element api="F:DiagnosisRobotEnemy.peepSound" />
        <element api="M:DiagnosisRobotEnemy.Start" />
        <element api="M:DiagnosisRobotEnemy.Update" />
        <element api="M:DiagnosisRobotEnemy.OnMeleeAttack(UnityEngine.GameObject)" />
        <element api="M:DiagnosisRobotEnemy.TakeDamage(System.Single)" />
        <element api="M:DiagnosisRobotEnemy.Die" />
        <element api="M:DiagnosisRobotEnemy.Destruct" />
        <element api="M:DiagnosisRobotEnemy.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:DiagnosisRobotEnemy.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DiagnosisRobotEnemy" ref="true" />
      </containers>
    </api>
    <api id="M:DiagnosisRobotEnemy.Destruct">
      <apidata name="Destruct" group="member" subgroup="method" />
      <memberdata visibility="assembly" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:EnemyAI.Destruct">
          <type api="T:EnemyAI" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DiagnosisRobotEnemy" ref="true" />
      </containers>
    </api>
    <api id="M:DiagnosisRobotEnemy.Die">
      <apidata name="Die" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:EnemyAI.Die">
          <type api="T:EnemyAI" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DiagnosisRobotEnemy" ref="true" />
      </containers>
    </api>
    <api id="F:DiagnosisRobotEnemy.explosionPrefab">
      <apidata name="explosionPrefab" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DiagnosisRobotEnemy" ref="true" />
      </containers>
    </api>
    <api id="F:DiagnosisRobotEnemy.meleeDamage">
      <apidata name="meleeDamage" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DiagnosisRobotEnemy" ref="true" />
      </containers>
    </api>
    <api id="M:DiagnosisRobotEnemy.OnMeleeAttack(UnityEngine.GameObject)">
      <apidata name="OnMeleeAttack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:EnemyAI.OnMeleeAttack(UnityEngine.GameObject)">
          <type api="T:EnemyAI" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="player">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DiagnosisRobotEnemy" ref="true" />
      </containers>
    </api>
    <api id="F:DiagnosisRobotEnemy.peepSound">
      <apidata name="peepSound" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.AudioClip" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DiagnosisRobotEnemy" ref="true" />
      </containers>
    </api>
    <api id="F:DiagnosisRobotEnemy.smoke">
      <apidata name="smoke" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DiagnosisRobotEnemy" ref="true" />
      </containers>
    </api>
    <api id="F:DiagnosisRobotEnemy.smokePrefab">
      <apidata name="smokePrefab" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DiagnosisRobotEnemy" ref="true" />
      </containers>
    </api>
    <api id="M:DiagnosisRobotEnemy.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DiagnosisRobotEnemy" ref="true" />
      </containers>
    </api>
    <api id="M:DiagnosisRobotEnemy.TakeDamage(System.Single)">
      <apidata name="TakeDamage" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:CommonEntity.TakeDamage(System.Single)">
          <type api="T:CommonEntity" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="hp">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:IHitable.TakeDamage(System.Single)">
          <type api="T:IHitable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DiagnosisRobotEnemy" ref="true" />
      </containers>
    </api>
    <api id="M:DiagnosisRobotEnemy.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DiagnosisRobotEnemy" ref="true" />
      </containers>
    </api>
    <api id="T:DontDestruct">
      <apidata name="DontDestruct" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:DontDestruct.Start" />
        <element api="M:DontDestruct.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:DontDestruct.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DontDestruct" ref="true" />
      </containers>
    </api>
    <api id="M:DontDestruct.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DontDestruct" ref="true" />
      </containers>
    </api>
    <api id="T:Door">
      <apidata name="Door" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:Triggerable" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Door.doorOpenSound" />
        <element api="F:Door.doorCloseSound" />
        <element api="F:Door.animator" />
        <element api="F:Door.isOpen" />
        <element api="M:Door.OnTrigger(UnityEngine.GameObject,System.Boolean)" />
        <element api="M:Door.Start" />
        <element api="M:Door.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Door.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Door" ref="true" />
      </containers>
    </api>
    <api id="F:Door.animator">
      <apidata name="animator" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Animator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Door" ref="true" />
      </containers>
    </api>
    <api id="F:Door.doorCloseSound">
      <apidata name="doorCloseSound" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.AudioClip" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Door" ref="true" />
      </containers>
    </api>
    <api id="F:Door.doorOpenSound">
      <apidata name="doorOpenSound" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.AudioClip" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Door" ref="true" />
      </containers>
    </api>
    <api id="F:Door.isOpen">
      <apidata name="isOpen" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Door" ref="true" />
      </containers>
    </api>
    <api id="M:Door.OnTrigger(UnityEngine.GameObject,System.Boolean)">
      <apidata name="OnTrigger" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Triggerable.OnTrigger(UnityEngine.GameObject,System.Boolean)">
          <type api="T:Triggerable" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="isTriggered">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Door" ref="true" />
      </containers>
    </api>
    <api id="M:Door.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Door" ref="true" />
      </containers>
    </api>
    <api id="T:DragNDrop">
      <apidata name="DragNDrop" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:DragNDrop.dragNDropInstance" />
        <element api="F:DragNDrop.metaData" />
        <element api="M:DragNDrop.GetInstance" />
        <element api="M:DragNDrop.StartDrag(System.String,DragNDrop.MetaData.Source,UnityEngine.Texture2D)" />
        <element api="M:DragNDrop.GetDrop" />
        <element api="M:DragNDrop.Update" />
        <element api="M:DragNDrop.OnGUI" />
        <element api="M:DragNDrop.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:DragNDrop.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop" ref="true" />
      </containers>
    </api>
    <api id="F:DragNDrop.dragNDropInstance">
      <apidata name="dragNDropInstance" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:DragNDrop" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop" ref="true" />
      </containers>
    </api>
    <api id="M:DragNDrop.GetDrop">
      <apidata name="GetDrop" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:DragNDrop.MetaData" ref="true">
          <type api="T:DragNDrop" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop" ref="true" />
      </containers>
    </api>
    <api id="M:DragNDrop.GetInstance">
      <apidata name="GetInstance" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:DragNDrop" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop" ref="true" />
      </containers>
    </api>
    <api id="F:DragNDrop.metaData">
      <apidata name="metaData" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:DragNDrop.MetaData" ref="true">
          <type api="T:DragNDrop" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop" ref="true" />
      </containers>
    </api>
    <api id="M:DragNDrop.OnGUI">
      <apidata name="OnGUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop" ref="true" />
      </containers>
    </api>
    <api id="M:DragNDrop.StartDrag(System.String,DragNDrop.MetaData.Source,UnityEngine.Texture2D)">
      <apidata name="StartDrag" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="info">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="source">
          <type api="T:DragNDrop.MetaData.Source" ref="false">
            <type api="T:DragNDrop.MetaData" ref="true">
              <type api="T:DragNDrop" ref="true" />
            </type>
          </type>
        </parameter>
        <parameter name="texture">
          <type api="T:UnityEngine.Texture2D" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop" ref="true" />
      </containers>
    </api>
    <api id="M:DragNDrop.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop" ref="true" />
      </containers>
    </api>
    <api id="T:DragNDrop.MetaData">
      <apidata name="MetaData" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:DragNDrop.MetaData.info" />
        <element api="F:DragNDrop.MetaData.source" />
        <element api="F:DragNDrop.MetaData.drawingTexture" />
        <element api="F:DragNDrop.MetaData.x" />
        <element api="F:DragNDrop.MetaData.y" />
        <element api="F:DragNDrop.MetaData.age" />
        <element api="F:DragNDrop.MetaData.isActive" />
        <element api="F:DragNDrop.MetaData.size" />
        <element api="M:DragNDrop.MetaData.#ctor(System.String,DragNDrop.MetaData.Source,UnityEngine.Texture2D)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop" ref="true" />
      </containers>
    </api>
    <api id="M:DragNDrop.MetaData.#ctor(System.String,DragNDrop.MetaData.Source,UnityEngine.Texture2D)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_info">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="_source">
          <type api="T:DragNDrop.MetaData.Source" ref="false">
            <type api="T:DragNDrop.MetaData" ref="true">
              <type api="T:DragNDrop" ref="true" />
            </type>
          </type>
        </parameter>
        <parameter name="_texture">
          <type api="T:UnityEngine.Texture2D" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop.MetaData" ref="true">
          <type api="T:DragNDrop" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:DragNDrop.MetaData.age">
      <apidata name="age" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop.MetaData" ref="true">
          <type api="T:DragNDrop" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:DragNDrop.MetaData.drawingTexture">
      <apidata name="drawingTexture" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop.MetaData" ref="true">
          <type api="T:DragNDrop" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:DragNDrop.MetaData.info">
      <apidata name="info" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop.MetaData" ref="true">
          <type api="T:DragNDrop" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:DragNDrop.MetaData.isActive">
      <apidata name="isActive" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop.MetaData" ref="true">
          <type api="T:DragNDrop" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:DragNDrop.MetaData.size">
      <apidata name="size" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop.MetaData" ref="true">
          <type api="T:DragNDrop" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:DragNDrop.MetaData.source">
      <apidata name="source" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:DragNDrop.MetaData.Source" ref="false">
          <type api="T:DragNDrop.MetaData" ref="true">
            <type api="T:DragNDrop" ref="true" />
          </type>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop.MetaData" ref="true">
          <type api="T:DragNDrop" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:DragNDrop.MetaData.x">
      <apidata name="x" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop.MetaData" ref="true">
          <type api="T:DragNDrop" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:DragNDrop.MetaData.y">
      <apidata name="y" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop.MetaData" ref="true">
          <type api="T:DragNDrop" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:DragNDrop.MetaData.Source">
      <apidata name="Source" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" layout="auto" format="ansi" />
      <elements>
        <element api="F:DragNDrop.MetaData.Source.OTHER" />
        <element api="F:DragNDrop.MetaData.Source.SKILL_TREE" />
        <element api="F:DragNDrop.MetaData.Source.INVENTORY" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop.MetaData" ref="true">
          <type api="T:DragNDrop" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:DragNDrop.MetaData.Source.INVENTORY">
      <apidata name="INVENTORY" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:DragNDrop.MetaData.Source" ref="false">
          <type api="T:DragNDrop.MetaData" ref="true">
            <type api="T:DragNDrop" ref="true" />
          </type>
        </type>
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop.MetaData.Source" ref="false">
          <type api="T:DragNDrop.MetaData" ref="true">
            <type api="T:DragNDrop" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="F:DragNDrop.MetaData.Source.OTHER">
      <apidata name="OTHER" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:DragNDrop.MetaData.Source" ref="false">
          <type api="T:DragNDrop.MetaData" ref="true">
            <type api="T:DragNDrop" ref="true" />
          </type>
        </type>
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop.MetaData.Source" ref="false">
          <type api="T:DragNDrop.MetaData" ref="true">
            <type api="T:DragNDrop" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="F:DragNDrop.MetaData.Source.SKILL_TREE">
      <apidata name="SKILL_TREE" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:DragNDrop.MetaData.Source" ref="false">
          <type api="T:DragNDrop.MetaData" ref="true">
            <type api="T:DragNDrop" ref="true" />
          </type>
        </type>
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DragNDrop.MetaData.Source" ref="false">
          <type api="T:DragNDrop.MetaData" ref="true">
            <type api="T:DragNDrop" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="T:Drawing">
      <apidata name="Drawing" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Drawing.lineTexture" />
        <element api="F:Drawing.onexoneRect" />
        <element api="M:Drawing.DrawLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Rect,UnityEngine.Color,System.Single)" />
        <element api="M:Drawing.GetCollisionWithBoarder(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Rect)" />
        <element api="M:Drawing.InRect(UnityEngine.Vector2,UnityEngine.Rect)" />
        <element api="M:Drawing.ReturnMinimalPositive(System.Collections.Generic.IList{System.Single})" />
        <element api="M:Drawing.#cctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Drawing.#cctor">
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Drawing" ref="true" />
      </containers>
    </api>
    <api id="M:Drawing.DrawLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Rect,UnityEngine.Color,System.Single)">
      <apidata name="DrawLine" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="pointA">
          <type api="T:UnityEngine.Vector2" ref="false" />
        </parameter>
        <parameter name="pointB">
          <type api="T:UnityEngine.Vector2" ref="false" />
        </parameter>
        <parameter name="drawRect">
          <type api="T:UnityEngine.Rect" ref="false" />
        </parameter>
        <parameter name="color">
          <type api="T:UnityEngine.Color" ref="false" />
        </parameter>
        <parameter name="width">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Drawing" ref="true" />
      </containers>
    </api>
    <api id="M:Drawing.GetCollisionWithBoarder(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Rect)">
      <apidata name="GetCollisionWithBoarder" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="from">
          <type api="T:UnityEngine.Vector2" ref="false" />
        </parameter>
        <parameter name="to">
          <type api="T:UnityEngine.Vector2" ref="false" />
        </parameter>
        <parameter name="rect">
          <type api="T:UnityEngine.Rect" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:UnityEngine.Vector2" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Drawing" ref="true" />
      </containers>
    </api>
    <api id="M:Drawing.InRect(UnityEngine.Vector2,UnityEngine.Rect)">
      <apidata name="InRect" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="point">
          <type api="T:UnityEngine.Vector2" ref="false" />
        </parameter>
        <parameter name="rect">
          <type api="T:UnityEngine.Rect" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Drawing" ref="true" />
      </containers>
    </api>
    <api id="F:Drawing.lineTexture">
      <apidata name="lineTexture" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Drawing" ref="true" />
      </containers>
    </api>
    <api id="F:Drawing.onexoneRect">
      <apidata name="onexoneRect" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Rect" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Drawing" ref="true" />
      </containers>
    </api>
    <api id="M:Drawing.ReturnMinimalPositive(System.Collections.Generic.IList{System.Single})">
      <apidata name="ReturnMinimalPositive" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="values">
          <type api="T:System.Collections.Generic.IList`1" ref="true">
            <specialization>
              <type api="T:System.Single" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Drawing" ref="true" />
      </containers>
    </api>
    <api id="T:DropChest">
      <apidata name="DropChest" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:DropChest.direction" />
        <element api="F:DropChest.currentDirection" />
        <element api="F:DropChest.scale" />
        <element api="F:DropChest.maxScale" />
        <element api="M:DropChest.Start" />
        <element api="M:DropChest.Update" />
        <element api="M:DropChest.ItemDrop" />
        <element api="M:DropChest.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:DropChest.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DropChest" ref="true" />
      </containers>
    </api>
    <api id="F:DropChest.currentDirection">
      <apidata name="currentDirection" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DropChest" ref="true" />
      </containers>
    </api>
    <api id="F:DropChest.direction">
      <apidata name="direction" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DropChest" ref="true" />
      </containers>
    </api>
    <api id="M:DropChest.ItemDrop">
      <apidata name="ItemDrop" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DropChest" ref="true" />
      </containers>
    </api>
    <api id="F:DropChest.maxScale">
      <apidata name="maxScale" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DropChest" ref="true" />
      </containers>
    </api>
    <api id="F:DropChest.scale">
      <apidata name="scale" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DropChest" ref="true" />
      </containers>
    </api>
    <api id="M:DropChest.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DropChest" ref="true" />
      </containers>
    </api>
    <api id="M:DropChest.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:DropChest" ref="true" />
      </containers>
    </api>
    <api id="T:ElectroFistAttack">
      <apidata name="ElectroFistAttack" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:MeleeAttack" ref="true" />
          <type api="T:BaseSkill" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:ElectroFistAttack.GetName" />
        <element api="M:ElectroFistAttack.GetNeededItems" />
        <element api="M:ElectroFistAttack.GetNeededEnergy(System.Int32)" />
        <element api="M:ElectroFistAttack.OnUseWithoutMana(UnityEngine.GameObject,Igor,System.Int32)" />
        <element api="M:ElectroFistAttack.AttackCooldownAnimation(CommonEntity,MeleeAttackHelper,System.Int32)" />
        <element api="M:ElectroFistAttack.EnemyHit(CommonEntity,CommonEntity,UnityEngine.Collider,UnityEngine.Transform,System.Single,MeleeAttackHelper)" />
        <element api="M:ElectroFistAttack.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ElectroFistAttack.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ElectroFistAttack" ref="true" />
      </containers>
    </api>
    <api id="M:ElectroFistAttack.AttackCooldownAnimation(CommonEntity,MeleeAttackHelper,System.Int32)">
      <apidata name="AttackCooldownAnimation" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:MeleeAttack.AttackCooldownAnimation(CommonEntity,MeleeAttackHelper,System.Int32)">
          <type api="T:MeleeAttack" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="ce">
          <type api="T:CommonEntity" ref="true" />
        </parameter>
        <parameter name="mah">
          <type api="T:MeleeAttackHelper" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ElectroFistAttack" ref="true" />
      </containers>
    </api>
    <api id="M:ElectroFistAttack.EnemyHit(CommonEntity,CommonEntity,UnityEngine.Collider,UnityEngine.Transform,System.Single,MeleeAttackHelper)">
      <apidata name="EnemyHit" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:MeleeAttack.EnemyHit(CommonEntity,CommonEntity,UnityEngine.Collider,UnityEngine.Transform,System.Single,MeleeAttackHelper)">
          <type api="T:MeleeAttack" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="entity">
          <type api="T:CommonEntity" ref="true" />
        </parameter>
        <parameter name="enemy">
          <type api="T:CommonEntity" ref="true" />
        </parameter>
        <parameter name="collider">
          <type api="T:UnityEngine.Collider" ref="true" />
        </parameter>
        <parameter name="fistTransform">
          <type api="T:UnityEngine.Transform" ref="true" />
        </parameter>
        <parameter name="damage">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="mah">
          <type api="T:MeleeAttackHelper" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ElectroFistAttack" ref="true" />
      </containers>
    </api>
    <api id="M:ElectroFistAttack.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:MeleeAttack.GetName">
          <type api="T:MeleeAttack" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:ISkill.GetName">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ElectroFistAttack" ref="true" />
      </containers>
    </api>
    <api id="M:ElectroFistAttack.GetNeededEnergy(System.Int32)">
      <apidata name="GetNeededEnergy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:MeleeAttack.GetNeededEnergy(System.Int32)">
          <type api="T:MeleeAttack" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededEnergy(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ElectroFistAttack" ref="true" />
      </containers>
    </api>
    <api id="M:ElectroFistAttack.GetNeededItems">
      <apidata name="GetNeededItems" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededItems">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededItems">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ElectroFistAttack" ref="true" />
      </containers>
    </api>
    <api id="M:ElectroFistAttack.OnUseWithoutMana(UnityEngine.GameObject,Igor,System.Int32)">
      <apidata name="OnUseWithoutMana" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.OnUseWithoutMana(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="igorInstance">
          <type api="T:Igor" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.OnUseWithoutMana(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ElectroFistAttack" ref="true" />
      </containers>
    </api>
    <api id="T:Elevator">
      <apidata name="Elevator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:Triggerable" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Elevator.animator" />
        <element api="F:Elevator.isOpen" />
        <element api="F:Elevator.inAnimation" />
        <element api="F:Elevator.frontCollider" />
        <element api="M:Elevator.Start" />
        <element api="M:Elevator.OnTrigger(UnityEngine.GameObject,System.Boolean)" />
        <element api="M:Elevator.RunClosingAnimation" />
        <element api="M:Elevator.RunOpeningAnimation" />
        <element api="M:Elevator.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Elevator.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Elevator" ref="true" />
      </containers>
    </api>
    <api id="F:Elevator.animator">
      <apidata name="animator" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Animator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Elevator" ref="true" />
      </containers>
    </api>
    <api id="F:Elevator.frontCollider">
      <apidata name="frontCollider" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Collider" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Elevator" ref="true" />
      </containers>
    </api>
    <api id="F:Elevator.inAnimation">
      <apidata name="inAnimation" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Elevator" ref="true" />
      </containers>
    </api>
    <api id="F:Elevator.isOpen">
      <apidata name="isOpen" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Elevator" ref="true" />
      </containers>
    </api>
    <api id="M:Elevator.OnTrigger(UnityEngine.GameObject,System.Boolean)">
      <apidata name="OnTrigger" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Triggerable.OnTrigger(UnityEngine.GameObject,System.Boolean)">
          <type api="T:Triggerable" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="isTriggered">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Elevator" ref="true" />
      </containers>
    </api>
    <api id="M:Elevator.RunClosingAnimation">
      <apidata name="RunClosingAnimation" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Elevator" ref="true" />
      </containers>
    </api>
    <api id="M:Elevator.RunOpeningAnimation">
      <apidata name="RunOpeningAnimation" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Elevator" ref="true" />
      </containers>
    </api>
    <api id="M:Elevator.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Elevator" ref="true" />
      </containers>
    </api>
    <api id="T:ElevatorLoader">
      <apidata name="ElevatorLoader" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:ElevatorLoader.Awake" />
        <element api="M:ElevatorLoader.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ElevatorLoader.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ElevatorLoader" ref="true" />
      </containers>
    </api>
    <api id="M:ElevatorLoader.Awake">
      <apidata name="Awake" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ElevatorLoader" ref="true" />
      </containers>
    </api>
    <api id="T:EnemyAI">
      <apidata name="EnemyAI" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:CommonEntity" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:BossAI" ref="true" />
          <type api="T:ArmEnemy" ref="true" />
          <type api="T:DiagnosisRobotEnemy" ref="true" />
          <type api="T:FlyingEyeEnemy" ref="true" />
          <type api="T:LittleFightingRobot" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="F:EnemyAI.type" />
        <element api="F:EnemyAI.NavMeshTransforms" />
        <element api="F:EnemyAI.NavMeshTransformsPosition" />
        <element api="F:EnemyAI.detectionRange" />
        <element api="F:EnemyAI.followingRange" />
        <element api="F:EnemyAI.rangeEnemyMaxVerticalSightAngle" />
        <element api="F:EnemyAI.meleeEnemyMaxVerticalSightAngle" />
        <element api="F:EnemyAI.rangeAttackRange" />
        <element api="F:EnemyAI.viewAngle" />
        <element api="F:EnemyAI.nma" />
        <element api="F:EnemyAI.currentWaypoint" />
        <element api="F:EnemyAI.posOrNega" />
        <element api="F:EnemyAI.isPatrolling" />
        <element api="F:EnemyAI.isEscape" />
        <element api="F:EnemyAI.isCurrentlyFollowing" />
        <element api="F:EnemyAI.escapeStep" />
        <element api="F:EnemyAI.escapeReturnPoint" />
        <element api="F:EnemyAI.timeToDestruction" />
        <element api="F:EnemyAI.isloaded" />
        <element api="F:EnemyAI.hasCustomDestination" />
        <element api="F:EnemyAI.blindFollowingEnabled" />
        <element api="F:EnemyAI.meleeAttackRadius" />
        <element api="F:EnemyAI.meleeAttackAngle" />
        <element api="F:EnemyAI.meleeAttackCurrentCooldown" />
        <element api="F:EnemyAI.rangeAttackCurrentCooldown" />
        <element api="F:EnemyAI.currentTarget" />
        <element api="M:EnemyAI.ExecuteEscape(System.Single,System.Single)" />
        <element api="M:EnemyAI.StopEscape" />
        <element api="M:EnemyAI.ExecutePatroling(System.Boolean)" />
        <element api="M:EnemyAI.Die" />
        <element api="M:EnemyAI.Destruct" />
        <element api="M:EnemyAI.OnMeleeAttack(UnityEngine.GameObject)" />
        <element api="M:EnemyAI.Start" />
        <element api="M:EnemyAI.Update" />
        <element api="M:EnemyAI.SetCustomDestination(UnityEngine.Vector3)" />
        <element api="M:EnemyAI.CheckCustomDestination" />
        <element api="M:EnemyAI.OnCustomDestinationReached" />
        <element api="M:EnemyAI.InWayPoint" />
        <element api="M:EnemyAI.OrdinalPatrol" />
        <element api="M:EnemyAI.RandomPatrol" />
        <element api="M:EnemyAI.ReturnToRandomWaypoint" />
        <element api="M:EnemyAI.ReturnToNearWaypoint" />
        <element api="M:EnemyAI.StopPatrol" />
        <element api="M:EnemyAI.EnableBlindFollowing(System.Boolean)" />
        <element api="M:EnemyAI.PlayerInSight" />
        <element api="M:EnemyAI.EnemyEscape" />
        <element api="M:EnemyAI.EnemyFollow" />
        <element api="M:EnemyAI.StopFollow" />
        <element api="M:EnemyAI.LookAtPlayer" />
        <element api="M:EnemyAI.RotateToBehind" />
        <element api="M:EnemyAI.GetDistanceBetweenEnemyAndPlayer" />
        <element api="M:EnemyAI.GetVerticalAngleBetweenEnemyAndPlayer" />
        <element api="M:EnemyAI.GetVerticalAngleBetweenObjectAndTarget(UnityEngine.Vector3)" />
        <element api="M:EnemyAI.StartMeleeAttackCooldown(System.Int32)" />
        <element api="M:EnemyAI.DecreaseMeleeAttackCooldown" />
        <element api="M:EnemyAI.InMeleeAttackRange(System.Boolean,System.Single)" />
        <element api="M:EnemyAI.InBattleMode(System.Single)" />
        <element api="M:EnemyAI.StartRangeAttackCooldown(System.Single)" />
        <element api="M:EnemyAI.OnRangeAttack" />
        <element api="M:EnemyAI.OnFactionChange" />
        <element api="M:EnemyAI.GetCurrentTarget" />
        <element api="M:EnemyAI.CheckTarget" />
        <element api="M:EnemyAI.FindNewTarget" />
        <element api="M:EnemyAI.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:EnemyAI.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.blindFollowingEnabled">
      <apidata name="blindFollowingEnabled" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.CheckCustomDestination">
      <apidata name="CheckCustomDestination" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.CheckTarget">
      <apidata name="CheckTarget" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.currentTarget">
      <apidata name="currentTarget" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:CommonEntity" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.currentWaypoint">
      <apidata name="currentWaypoint" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.DecreaseMeleeAttackCooldown">
      <apidata name="DecreaseMeleeAttackCooldown" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.Destruct">
      <apidata name="Destruct" group="member" subgroup="method" />
      <memberdata visibility="assembly" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.detectionRange">
      <apidata name="detectionRange" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.Die">
      <apidata name="Die" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:CommonEntity.Die">
          <type api="T:CommonEntity" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.EnableBlindFollowing(System.Boolean)">
      <apidata name="EnableBlindFollowing" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="whether" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.EnemyEscape">
      <apidata name="EnemyEscape" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.EnemyFollow">
      <apidata name="EnemyFollow" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.escapeReturnPoint">
      <apidata name="escapeReturnPoint" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.escapeStep">
      <apidata name="escapeStep" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.ExecuteEscape(System.Single,System.Single)">
      <apidata name="ExecuteEscape" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="seconds" optional="true">
          <type api="T:System.Single" ref="false" />
          <argument>
            <type api="T:System.Single" ref="false" />
            <value>3</value>
          </argument>
        </parameter>
        <parameter name="speed" optional="true">
          <type api="T:System.Single" ref="false" />
          <argument>
            <type api="T:System.Single" ref="false" />
            <value>0</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.ExecutePatroling(System.Boolean)">
      <apidata name="ExecutePatroling" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="whetherToActivate">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.FindNewTarget">
      <apidata name="FindNewTarget" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.followingRange">
      <apidata name="followingRange" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.GetCurrentTarget">
      <apidata name="GetCurrentTarget" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:CommonEntity" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.GetDistanceBetweenEnemyAndPlayer">
      <apidata name="GetDistanceBetweenEnemyAndPlayer" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.GetVerticalAngleBetweenEnemyAndPlayer">
      <apidata name="GetVerticalAngleBetweenEnemyAndPlayer" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.GetVerticalAngleBetweenObjectAndTarget(UnityEngine.Vector3)">
      <apidata name="GetVerticalAngleBetweenObjectAndTarget" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="objectPosition">
          <type api="T:UnityEngine.Vector3" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.hasCustomDestination">
      <apidata name="hasCustomDestination" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.InBattleMode(System.Single)">
      <apidata name="InBattleMode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="battleDistance">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.InMeleeAttackRange(System.Boolean,System.Single)">
      <apidata name="InMeleeAttackRange" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="ignoreAngle" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
        <parameter name="rangeFactor" optional="true">
          <type api="T:System.Single" ref="false" />
          <argument>
            <type api="T:System.Single" ref="false" />
            <value>1</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.InWayPoint">
      <apidata name="InWayPoint" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.isCurrentlyFollowing">
      <apidata name="isCurrentlyFollowing" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.isEscape">
      <apidata name="isEscape" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.isloaded">
      <apidata name="isloaded" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.isPatrolling">
      <apidata name="isPatrolling" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.LookAtPlayer">
      <apidata name="LookAtPlayer" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.meleeAttackAngle">
      <apidata name="meleeAttackAngle" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.meleeAttackCurrentCooldown">
      <apidata name="meleeAttackCurrentCooldown" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.meleeAttackRadius">
      <apidata name="meleeAttackRadius" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.meleeEnemyMaxVerticalSightAngle">
      <apidata name="meleeEnemyMaxVerticalSightAngle" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.NavMeshTransforms">
      <apidata name="NavMeshTransforms" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <arrayOf rank="1">
          <type api="T:UnityEngine.Transform" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.NavMeshTransformsPosition">
      <apidata name="NavMeshTransformsPosition" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <arrayOf rank="1">
          <type api="T:UnityEngine.Vector3" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.nma">
      <apidata name="nma" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.NavMeshAgent" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.OnCustomDestinationReached">
      <apidata name="OnCustomDestinationReached" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.OnFactionChange">
      <apidata name="OnFactionChange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:CommonEntity.OnFactionChange">
          <type api="T:CommonEntity" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.OnMeleeAttack(UnityEngine.GameObject)">
      <apidata name="OnMeleeAttack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="player">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.OnRangeAttack">
      <apidata name="OnRangeAttack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.OrdinalPatrol">
      <apidata name="OrdinalPatrol" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.PlayerInSight">
      <apidata name="PlayerInSight" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.posOrNega">
      <apidata name="posOrNega" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.RandomPatrol">
      <apidata name="RandomPatrol" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.rangeAttackCurrentCooldown">
      <apidata name="rangeAttackCurrentCooldown" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.rangeAttackRange">
      <apidata name="rangeAttackRange" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.rangeEnemyMaxVerticalSightAngle">
      <apidata name="rangeEnemyMaxVerticalSightAngle" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.ReturnToNearWaypoint">
      <apidata name="ReturnToNearWaypoint" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.ReturnToRandomWaypoint">
      <apidata name="ReturnToRandomWaypoint" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.RotateToBehind">
      <apidata name="RotateToBehind" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.SetCustomDestination(UnityEngine.Vector3)">
      <apidata name="SetCustomDestination" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="destination">
          <type api="T:UnityEngine.Vector3" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:CommonEntity.Start">
          <type api="T:CommonEntity" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.StartMeleeAttackCooldown(System.Int32)">
      <apidata name="StartMeleeAttackCooldown" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="seconds">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.StartRangeAttackCooldown(System.Single)">
      <apidata name="StartRangeAttackCooldown" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="seconds">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.StopEscape">
      <apidata name="StopEscape" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.StopFollow">
      <apidata name="StopFollow" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.StopPatrol">
      <apidata name="StopPatrol" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.timeToDestruction">
      <apidata name="timeToDestruction" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.type">
      <apidata name="type" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:EnemyAI.EnemyTpye" ref="false">
          <type api="T:EnemyAI" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyAI.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:CommonEntity.Update">
          <type api="T:CommonEntity" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.viewAngle">
      <apidata name="viewAngle" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="T:EnemyAI.EnemyTpye">
      <apidata name="EnemyTpye" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" layout="auto" format="ansi" />
      <elements>
        <element api="F:EnemyAI.EnemyTpye.Melee" />
        <element api="F:EnemyAI.EnemyTpye.Range" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyAI.EnemyTpye.Melee">
      <apidata name="Melee" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:EnemyAI.EnemyTpye" ref="false">
          <type api="T:EnemyAI" ref="true" />
        </type>
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI.EnemyTpye" ref="false">
          <type api="T:EnemyAI" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:EnemyAI.EnemyTpye.Range">
      <apidata name="Range" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:EnemyAI.EnemyTpye" ref="false">
          <type api="T:EnemyAI" ref="true" />
        </type>
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyAI.EnemyTpye" ref="false">
          <type api="T:EnemyAI" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:EnemyHitUnit">
      <apidata name="EnemyHitUnit" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:EnemyHitUnit.damage" />
        <element api="F:EnemyHitUnit.effect" />
        <element api="F:EnemyHitUnit.enable" />
        <element api="F:EnemyHitUnit.faction" />
        <element api="M:EnemyHitUnit.OnTriggerEnter(UnityEngine.Collider)" />
        <element api="M:EnemyHitUnit.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:EnemyHitUnit.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyHitUnit" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyHitUnit.damage">
      <apidata name="damage" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyHitUnit" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyHitUnit.effect">
      <apidata name="effect" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyHitUnit" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyHitUnit.enable">
      <apidata name="enable" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyHitUnit" ref="true" />
      </containers>
    </api>
    <api id="F:EnemyHitUnit.faction">
      <apidata name="faction" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:CommonEntity.Faction" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyHitUnit" ref="true" />
      </containers>
    </api>
    <api id="M:EnemyHitUnit.OnTriggerEnter(UnityEngine.Collider)">
      <apidata name="OnTriggerEnter" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="collider">
          <type api="T:UnityEngine.Collider" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnemyHitUnit" ref="true" />
      </containers>
    </api>
    <api id="T:EnergyCapsule">
      <apidata name="EnergyCapsule" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:BaseItem" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:EnergyCapsule.amountToHeal" />
        <element api="F:EnergyCapsule.healPrefab" />
        <element api="M:EnergyCapsule.PickUp" />
        <element api="M:EnergyCapsule.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:EnergyCapsule.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnergyCapsule" ref="true" />
      </containers>
    </api>
    <api id="F:EnergyCapsule.amountToHeal">
      <apidata name="amountToHeal" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnergyCapsule" ref="true" />
      </containers>
    </api>
    <api id="F:EnergyCapsule.healPrefab">
      <apidata name="healPrefab" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnergyCapsule" ref="true" />
      </containers>
    </api>
    <api id="M:EnergyCapsule.PickUp">
      <apidata name="PickUp" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseItem.PickUp">
          <type api="T:BaseItem" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:IInvItem" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnergyCapsule" ref="true" />
      </containers>
    </api>
    <api id="T:EnergyCapsule.InvEnergyCapsule">
      <apidata name="InvEnergyCapsule" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:IInvItem" ref="true" />
      </implements>
      <elements>
        <element api="F:EnergyCapsule.InvEnergyCapsule.amountToHeal" />
        <element api="F:EnergyCapsule.InvEnergyCapsule.healPrefab" />
        <element api="M:EnergyCapsule.InvEnergyCapsule.#ctor(System.Single,UnityEngine.GameObject)" />
        <element api="M:EnergyCapsule.InvEnergyCapsule.GetDisplayName" />
        <element api="M:EnergyCapsule.InvEnergyCapsule.GetMaxStackSize" />
        <element api="M:EnergyCapsule.InvEnergyCapsule.Drop" />
        <element api="M:EnergyCapsule.InvEnergyCapsule.Use(UnityEngine.GameObject)" />
        <element api="M:EnergyCapsule.InvEnergyCapsule.Combinable(IInvItem)" />
        <element api="M:EnergyCapsule.InvEnergyCapsule.Combine(IInvItem)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnergyCapsule" ref="true" />
      </containers>
    </api>
    <api id="M:EnergyCapsule.InvEnergyCapsule.#ctor(System.Single,UnityEngine.GameObject)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="amount">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="prefab">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnergyCapsule.InvEnergyCapsule" ref="true">
          <type api="T:EnergyCapsule" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:EnergyCapsule.InvEnergyCapsule.amountToHeal">
      <apidata name="amountToHeal" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnergyCapsule.InvEnergyCapsule" ref="true">
          <type api="T:EnergyCapsule" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:EnergyCapsule.InvEnergyCapsule.Combinable(IInvItem)">
      <apidata name="Combinable" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <type api="T:IInvItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Combinable(IInvItem)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnergyCapsule.InvEnergyCapsule" ref="true">
          <type api="T:EnergyCapsule" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:EnergyCapsule.InvEnergyCapsule.Combine(IInvItem)">
      <apidata name="Combine" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <type api="T:IInvItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:IInvItem" ref="true" />
      </returns>
      <implements>
        <member api="M:IInvItem.Combine(IInvItem)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnergyCapsule.InvEnergyCapsule" ref="true">
          <type api="T:EnergyCapsule" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:EnergyCapsule.InvEnergyCapsule.Drop">
      <apidata name="Drop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Drop">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnergyCapsule.InvEnergyCapsule" ref="true">
          <type api="T:EnergyCapsule" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:EnergyCapsule.InvEnergyCapsule.GetDisplayName">
      <apidata name="GetDisplayName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:IInvItem.GetDisplayName">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnergyCapsule.InvEnergyCapsule" ref="true">
          <type api="T:EnergyCapsule" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:EnergyCapsule.InvEnergyCapsule.GetMaxStackSize">
      <apidata name="GetMaxStackSize" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.GetMaxStackSize">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnergyCapsule.InvEnergyCapsule" ref="true">
          <type api="T:EnergyCapsule" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:EnergyCapsule.InvEnergyCapsule.healPrefab">
      <apidata name="healPrefab" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnergyCapsule.InvEnergyCapsule" ref="true">
          <type api="T:EnergyCapsule" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:EnergyCapsule.InvEnergyCapsule.Use(UnityEngine.GameObject)">
      <apidata name="Use" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="entity">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Use(UnityEngine.GameObject)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:EnergyCapsule.InvEnergyCapsule" ref="true">
          <type api="T:EnergyCapsule" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:Fan">
      <apidata name="Fan" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:BaseItem" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Fan.PickUp" />
        <element api="M:Fan.GetName" />
        <element api="M:Fan.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Fan.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Fan" ref="true" />
      </containers>
    </api>
    <api id="M:Fan.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Fan" ref="true" />
      </containers>
    </api>
    <api id="M:Fan.PickUp">
      <apidata name="PickUp" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseItem.PickUp">
          <type api="T:BaseItem" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:IInvItem" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Fan" ref="true" />
      </containers>
    </api>
    <api id="T:Fan.InvItem">
      <apidata name="InvItem" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:IInvItem" ref="true" />
      </implements>
      <elements>
        <element api="F:Fan.InvItem.name" />
        <element api="M:Fan.InvItem.#ctor(System.String)" />
        <element api="M:Fan.InvItem.GetDisplayName" />
        <element api="M:Fan.InvItem.GetMaxStackSize" />
        <element api="M:Fan.InvItem.Drop" />
        <element api="M:Fan.InvItem.Use(UnityEngine.GameObject)" />
        <element api="M:Fan.InvItem.Combinable(IInvItem)" />
        <element api="M:Fan.InvItem.Combine(IInvItem)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Fan" ref="true" />
      </containers>
    </api>
    <api id="M:Fan.InvItem.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Fan.InvItem" ref="true">
          <type api="T:Fan" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Fan.InvItem.Combinable(IInvItem)">
      <apidata name="Combinable" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <type api="T:IInvItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Combinable(IInvItem)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Fan.InvItem" ref="true">
          <type api="T:Fan" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Fan.InvItem.Combine(IInvItem)">
      <apidata name="Combine" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <type api="T:IInvItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:IInvItem" ref="true" />
      </returns>
      <implements>
        <member api="M:IInvItem.Combine(IInvItem)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Fan.InvItem" ref="true">
          <type api="T:Fan" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Fan.InvItem.Drop">
      <apidata name="Drop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Drop">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Fan.InvItem" ref="true">
          <type api="T:Fan" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Fan.InvItem.GetDisplayName">
      <apidata name="GetDisplayName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:IInvItem.GetDisplayName">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Fan.InvItem" ref="true">
          <type api="T:Fan" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Fan.InvItem.GetMaxStackSize">
      <apidata name="GetMaxStackSize" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.GetMaxStackSize">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Fan.InvItem" ref="true">
          <type api="T:Fan" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Fan.InvItem.name">
      <apidata name="name" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Fan.InvItem" ref="true">
          <type api="T:Fan" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Fan.InvItem.Use(UnityEngine.GameObject)">
      <apidata name="Use" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="entity">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Use(UnityEngine.GameObject)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Fan.InvItem" ref="true">
          <type api="T:Fan" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:Fire">
      <apidata name="Fire" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Fire.lightSource" />
        <element api="F:Fire.minIntensity" />
        <element api="F:Fire.maxIntensity" />
        <element api="M:Fire.Update" />
        <element api="M:Fire.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Fire.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Fire" ref="true" />
      </containers>
    </api>
    <api id="F:Fire.lightSource">
      <apidata name="lightSource" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Light" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Fire" ref="true" />
      </containers>
    </api>
    <api id="F:Fire.maxIntensity">
      <apidata name="maxIntensity" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Fire" ref="true" />
      </containers>
    </api>
    <api id="F:Fire.minIntensity">
      <apidata name="minIntensity" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Fire" ref="true" />
      </containers>
    </api>
    <api id="M:Fire.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Fire" ref="true" />
      </containers>
    </api>
    <api id="T:FloorTrigger">
      <apidata name="FloorTrigger" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:ITrigger" ref="true" />
        <type api="T:IUsable" ref="true" />
      </implements>
      <elements>
        <element api="F:FloorTrigger.tag" />
        <element api="F:FloorTrigger.isTriggered" />
        <element api="F:FloorTrigger.isOneShotTrigger" />
        <element api="F:FloorTrigger.hasBeenTriggeredOnce" />
        <element api="F:FloorTrigger.radius" />
        <element api="F:FloorTrigger.actualCheckingBounds" />
        <element api="F:FloorTrigger.connectedObjects" />
        <element api="M:FloorTrigger.AddTriggerable(Triggerable)" />
        <element api="M:FloorTrigger.OnUse(UnityEngine.GameObject)" />
        <element api="M:FloorTrigger.IsTriggered" />
        <element api="M:FloorTrigger.SetOneShotTrigger(System.Boolean)" />
        <element api="M:FloorTrigger.Start" />
        <element api="M:FloorTrigger.Update" />
        <element api="M:FloorTrigger.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:FloorTrigger.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FloorTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:FloorTrigger.actualCheckingBounds">
      <apidata name="actualCheckingBounds" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Bounds" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FloorTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:FloorTrigger.AddTriggerable(Triggerable)">
      <apidata name="AddTriggerable" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="triggerable">
          <type api="T:Triggerable" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:ITrigger.AddTriggerable(Triggerable)">
          <type api="T:ITrigger" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FloorTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:FloorTrigger.connectedObjects">
      <apidata name="connectedObjects" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Triggerable" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FloorTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:FloorTrigger.hasBeenTriggeredOnce">
      <apidata name="hasBeenTriggeredOnce" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FloorTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:FloorTrigger.isOneShotTrigger">
      <apidata name="isOneShotTrigger" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FloorTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:FloorTrigger.isTriggered">
      <apidata name="isTriggered" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FloorTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:FloorTrigger.IsTriggered">
      <apidata name="IsTriggered" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:ITrigger.IsTriggered">
          <type api="T:ITrigger" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FloorTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:FloorTrigger.OnUse(UnityEngine.GameObject)">
      <apidata name="OnUse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:IUsable.OnUse(UnityEngine.GameObject)">
          <type api="T:IUsable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FloorTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:FloorTrigger.radius">
      <apidata name="radius" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FloorTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:FloorTrigger.SetOneShotTrigger(System.Boolean)">
      <apidata name="SetOneShotTrigger" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="makeOneShot">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:ITrigger.SetOneShotTrigger(System.Boolean)">
          <type api="T:ITrigger" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FloorTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:FloorTrigger.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FloorTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:FloorTrigger.tag">
      <apidata name="tag" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FloorTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:FloorTrigger.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FloorTrigger" ref="true" />
      </containers>
    </api>
    <api id="T:FlyingEyeEnemy">
      <apidata name="FlyingEyeEnemy" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:EnemyAI" ref="true" />
          <type api="T:CommonEntity" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:FlyingEyeEnemy.meleeDamage" />
        <element api="F:FlyingEyeEnemy.explosionPrefab" />
        <element api="F:FlyingEyeEnemy.animator" />
        <element api="F:FlyingEyeEnemy.lastPosition" />
        <element api="M:FlyingEyeEnemy.Start" />
        <element api="M:FlyingEyeEnemy.Update" />
        <element api="M:FlyingEyeEnemy.OnMeleeAttack(UnityEngine.GameObject)" />
        <element api="M:FlyingEyeEnemy.ResetCurrentAttackValue" />
        <element api="M:FlyingEyeEnemy.TakeDamage(System.Single)" />
        <element api="M:FlyingEyeEnemy.Die" />
        <element api="M:FlyingEyeEnemy.Destruct" />
        <element api="M:FlyingEyeEnemy.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:FlyingEyeEnemy.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FlyingEyeEnemy" ref="true" />
      </containers>
    </api>
    <api id="F:FlyingEyeEnemy.animator">
      <apidata name="animator" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Animator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FlyingEyeEnemy" ref="true" />
      </containers>
    </api>
    <api id="M:FlyingEyeEnemy.Destruct">
      <apidata name="Destruct" group="member" subgroup="method" />
      <memberdata visibility="assembly" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:EnemyAI.Destruct">
          <type api="T:EnemyAI" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FlyingEyeEnemy" ref="true" />
      </containers>
    </api>
    <api id="M:FlyingEyeEnemy.Die">
      <apidata name="Die" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:EnemyAI.Die">
          <type api="T:EnemyAI" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FlyingEyeEnemy" ref="true" />
      </containers>
    </api>
    <api id="F:FlyingEyeEnemy.explosionPrefab">
      <apidata name="explosionPrefab" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FlyingEyeEnemy" ref="true" />
      </containers>
    </api>
    <api id="F:FlyingEyeEnemy.lastPosition">
      <apidata name="lastPosition" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FlyingEyeEnemy" ref="true" />
      </containers>
    </api>
    <api id="F:FlyingEyeEnemy.meleeDamage">
      <apidata name="meleeDamage" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FlyingEyeEnemy" ref="true" />
      </containers>
    </api>
    <api id="M:FlyingEyeEnemy.OnMeleeAttack(UnityEngine.GameObject)">
      <apidata name="OnMeleeAttack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:EnemyAI.OnMeleeAttack(UnityEngine.GameObject)">
          <type api="T:EnemyAI" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="player">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FlyingEyeEnemy" ref="true" />
      </containers>
    </api>
    <api id="M:FlyingEyeEnemy.ResetCurrentAttackValue">
      <apidata name="ResetCurrentAttackValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FlyingEyeEnemy" ref="true" />
      </containers>
    </api>
    <api id="M:FlyingEyeEnemy.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FlyingEyeEnemy" ref="true" />
      </containers>
    </api>
    <api id="M:FlyingEyeEnemy.TakeDamage(System.Single)">
      <apidata name="TakeDamage" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:CommonEntity.TakeDamage(System.Single)">
          <type api="T:CommonEntity" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="hp">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:IHitable.TakeDamage(System.Single)">
          <type api="T:IHitable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FlyingEyeEnemy" ref="true" />
      </containers>
    </api>
    <api id="M:FlyingEyeEnemy.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:FlyingEyeEnemy" ref="true" />
      </containers>
    </api>
    <api id="T:Game">
      <apidata name="Game" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Game.paused" />
        <element api="F:Game.pauseHandlers" />
        <element api="F:Game.currentDifficulty" />
        <element api="F:Game.isMenuOpen" />
        <element api="F:Game.cutscene" />
        <element api="F:Game.ignoreBars" />
        <element api="F:Game.cutsceneHandlers" />
        <element api="F:Game.igorGameObject" />
        <element api="F:Game.igorComponent" />
        <element api="F:Game.currentVolume" />
        <element api="F:Game.currentVolumeInitialized" />
        <element api="F:Game._backgroundSongs" />
        <element api="M:Game.AddPauseHandler(IPauseHandler)" />
        <element api="M:Game.RemovePauseHandler(IPauseHandler)" />
        <element api="M:Game.TriggerPause" />
        <element api="M:Game.AddCutsceneHandler(IPauseHandler)" />
        <element api="M:Game.RemoveCutsceneHandler(IPauseHandler)" />
        <element api="M:Game.TriggerCutscene" />
        <element api="M:Game.GetIgor" />
        <element api="M:Game.SpawnIgor" />
        <element api="M:Game.GetIgorComponent" />
        <element api="M:Game.PlayAudioAtStaticPosition(UnityEngine.AudioClip,UnityEngine.Vector3,System.Single)" />
        <element api="M:Game.PlayAudioAtParent(UnityEngine.AudioClip,UnityEngine.Transform,System.Single)" />
        <element api="M:Game.#cctor" />
        <element api="P:Game.IsPaused" />
        <element api="P:Game.PausedAsFloat" />
        <element api="P:Game.PausedAsInt" />
        <element api="P:Game.DifficultyMultiplier" />
        <element api="P:Game.IsCutscene" />
        <element api="P:Game.InGame" />
        <element api="P:Game.CutsceneAsFloat" />
        <element api="P:Game.CutsceneAsInt" />
        <element api="P:Game.CurrentVolume" />
        <element api="P:Game.BackgroundSongs" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Game.#cctor">
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="F:Game._backgroundSongs">
      <apidata name="_backgroundSongs" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:UnityEngine.AudioClip" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="M:Game.AddCutsceneHandler(IPauseHandler)">
      <apidata name="AddCutsceneHandler" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="handler">
          <type api="T:IPauseHandler" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="M:Game.AddPauseHandler(IPauseHandler)">
      <apidata name="AddPauseHandler" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="handler">
          <type api="T:IPauseHandler" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="P:Game.BackgroundSongs">
      <apidata name="BackgroundSongs" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_BackgroundSongs" />
      <setter name="set_BackgroundSongs" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:UnityEngine.AudioClip" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="F:Game.currentDifficulty">
      <apidata name="currentDifficulty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Game.Difficulty" ref="false">
          <type api="T:Game" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="F:Game.currentVolume">
      <apidata name="currentVolume" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="P:Game.CurrentVolume">
      <apidata name="CurrentVolume" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CurrentVolume" />
      <setter name="set_CurrentVolume" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="F:Game.currentVolumeInitialized">
      <apidata name="currentVolumeInitialized" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="F:Game.cutscene">
      <apidata name="cutscene" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="P:Game.CutsceneAsFloat">
      <apidata name="CutsceneAsFloat" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_CutsceneAsFloat" />
      <setter name="set_CutsceneAsFloat" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="P:Game.CutsceneAsInt">
      <apidata name="CutsceneAsInt" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_CutsceneAsInt" />
      <setter name="set_CutsceneAsInt" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="F:Game.cutsceneHandlers">
      <apidata name="cutsceneHandlers" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.ArrayList" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="P:Game.DifficultyMultiplier">
      <apidata name="DifficultyMultiplier" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_DifficultyMultiplier" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="M:Game.GetIgor">
      <apidata name="GetIgor" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="M:Game.GetIgorComponent">
      <apidata name="GetIgorComponent" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Igor" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="F:Game.ignoreBars">
      <apidata name="ignoreBars" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="F:Game.igorComponent">
      <apidata name="igorComponent" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Igor" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="F:Game.igorGameObject">
      <apidata name="igorGameObject" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="P:Game.InGame">
      <apidata name="InGame" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_InGame" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="P:Game.IsCutscene">
      <apidata name="IsCutscene" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsCutscene" />
      <setter name="set_IsCutscene" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="F:Game.isMenuOpen">
      <apidata name="isMenuOpen" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="P:Game.IsPaused">
      <apidata name="IsPaused" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsPaused" />
      <setter name="set_IsPaused" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="F:Game.paused">
      <apidata name="paused" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="P:Game.PausedAsFloat">
      <apidata name="PausedAsFloat" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_PausedAsFloat" />
      <setter name="set_PausedAsFloat" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="P:Game.PausedAsInt">
      <apidata name="PausedAsInt" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_PausedAsInt" />
      <setter name="set_PausedAsInt" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="F:Game.pauseHandlers">
      <apidata name="pauseHandlers" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.ArrayList" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="M:Game.PlayAudioAtParent(UnityEngine.AudioClip,UnityEngine.Transform,System.Single)">
      <apidata name="PlayAudioAtParent" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="clip">
          <type api="T:UnityEngine.AudioClip" ref="true" />
        </parameter>
        <parameter name="parent">
          <type api="T:UnityEngine.Transform" ref="true" />
        </parameter>
        <parameter name="volumeScale" optional="true">
          <type api="T:System.Single" ref="false" />
          <argument>
            <type api="T:System.Single" ref="false" />
            <value>1</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="M:Game.PlayAudioAtStaticPosition(UnityEngine.AudioClip,UnityEngine.Vector3,System.Single)">
      <apidata name="PlayAudioAtStaticPosition" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="clip">
          <type api="T:UnityEngine.AudioClip" ref="true" />
        </parameter>
        <parameter name="position">
          <type api="T:UnityEngine.Vector3" ref="false" />
        </parameter>
        <parameter name="volumeScale" optional="true">
          <type api="T:System.Single" ref="false" />
          <argument>
            <type api="T:System.Single" ref="false" />
            <value>1</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="M:Game.RemoveCutsceneHandler(IPauseHandler)">
      <apidata name="RemoveCutsceneHandler" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="handler">
          <type api="T:IPauseHandler" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="M:Game.RemovePauseHandler(IPauseHandler)">
      <apidata name="RemovePauseHandler" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="handler">
          <type api="T:IPauseHandler" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="M:Game.SpawnIgor">
      <apidata name="SpawnIgor" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="M:Game.TriggerCutscene">
      <apidata name="TriggerCutscene" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="M:Game.TriggerPause">
      <apidata name="TriggerPause" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="T:Game.Difficulty">
      <apidata name="Difficulty" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" layout="auto" format="ansi" />
      <elements>
        <element api="F:Game.Difficulty.Medium" />
        <element api="F:Game.Difficulty.Hard" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game" ref="true" />
      </containers>
    </api>
    <api id="F:Game.Difficulty.Hard">
      <apidata name="Hard" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Game.Difficulty" ref="false">
          <type api="T:Game" ref="true" />
        </type>
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game.Difficulty" ref="false">
          <type api="T:Game" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Game.Difficulty.Medium">
      <apidata name="Medium" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Game.Difficulty" ref="false">
          <type api="T:Game" ref="true" />
        </type>
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Game.Difficulty" ref="false">
          <type api="T:Game" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:GameData">
      <apidata name="GameData" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:GameData.igor" />
        <element api="F:GameData.scene" />
        <element api="F:GameData.prefabs" />
        <element api="F:GameData.chests" />
        <element api="F:GameData.enemies" />
        <element api="F:GameData.boss" />
        <element api="F:GameData.transformers" />
        <element api="F:GameData.cutscenes" />
        <element api="F:GameData.jeveData" />
        <element api="F:GameData.skillBarData" />
        <element api="F:GameData.skillData" />
        <element api="F:GameData.gameDifficulty" />
        <element api="M:GameData.#ctor(GameData.Operation)" />
        <element api="M:GameData.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:GameData.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="M:GameData.#ctor(GameData.Operation)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="op">
          <type api="T:GameData.Operation" ref="false">
            <type api="T:GameData" ref="true" />
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="F:GameData.boss">
      <apidata name="boss" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:GameData.BossData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="F:GameData.chests">
      <apidata name="chests" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:GameData.ChestData" ref="true">
              <type api="T:GameData" ref="true" />
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="F:GameData.cutscenes">
      <apidata name="cutscenes" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:GameData.CutscenePrefab" ref="true">
              <type api="T:GameData" ref="true" />
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="F:GameData.enemies">
      <apidata name="enemies" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:GameData.EnemyPrefab" ref="true">
              <type api="T:GameData" ref="true" />
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="F:GameData.gameDifficulty">
      <apidata name="gameDifficulty" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:GameData.GameDifficultyData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="F:GameData.igor">
      <apidata name="igor" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="F:GameData.jeveData">
      <apidata name="jeveData" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:GameData.CutscenePrefabJeveData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="F:GameData.prefabs">
      <apidata name="prefabs" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:GameData.ScenePrefab" ref="true">
              <type api="T:GameData" ref="true" />
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="F:GameData.scene">
      <apidata name="scene" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="F:GameData.skillBarData">
      <apidata name="skillBarData" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:GameData.SkillBarData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="F:GameData.skillData">
      <apidata name="skillData" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:GameData.SkillData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="F:GameData.transformers">
      <apidata name="transformers" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:GameData.BossTransformerData" ref="true">
              <type api="T:GameData" ref="true" />
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="T:GameData.BossData">
      <apidata name="BossData" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:GameData.BossData.bossPosition" />
        <element api="F:GameData.BossData.bossRotation" />
        <element api="F:GameData.BossData.bossHP" />
        <element api="M:GameData.BossData.#ctor" />
        <element api="M:GameData.BossData.#ctor(UnityEngine.GameObject)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="M:GameData.BossData.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.BossData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:GameData.BossData.#ctor(UnityEngine.GameObject)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="obj">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.BossData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.BossData.bossHP">
      <apidata name="bossHP" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.BossData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.BossData.bossPosition">
      <apidata name="bossPosition" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.BossData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.BossData.bossRotation">
      <apidata name="bossRotation" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Quaternion" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.BossData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:GameData.BossTransformerData">
      <apidata name="BossTransformerData" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:GameData.BossTransformerData.transformerPosition" />
        <element api="F:GameData.BossTransformerData.transformerState" />
        <element api="M:GameData.BossTransformerData.#ctor" />
        <element api="M:GameData.BossTransformerData.#ctor(UnityEngine.GameObject)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="M:GameData.BossTransformerData.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.BossTransformerData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:GameData.BossTransformerData.#ctor(UnityEngine.GameObject)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="obj">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.BossTransformerData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.BossTransformerData.transformerPosition">
      <apidata name="transformerPosition" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.BossTransformerData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.BossTransformerData.transformerState">
      <apidata name="transformerState" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:CommonEntity.EntityState" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.BossTransformerData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:GameData.ChestData">
      <apidata name="ChestData" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:GameData.ChestData.chestPosition" />
        <element api="F:GameData.ChestData.chestRotation" />
        <element api="F:GameData.ChestData.isChestOpened" />
        <element api="F:GameData.ChestData.ChestItemsName" />
        <element api="F:GameData.ChestData.chestName" />
        <element api="M:GameData.ChestData.#ctor" />
        <element api="M:GameData.ChestData.#ctor(UnityEngine.GameObject)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="M:GameData.ChestData.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.ChestData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:GameData.ChestData.#ctor(UnityEngine.GameObject)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="obj">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.ChestData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.ChestData.ChestItemsName">
      <apidata name="ChestItemsName" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.ChestData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.ChestData.chestName">
      <apidata name="chestName" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.ChestData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.ChestData.chestPosition">
      <apidata name="chestPosition" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.ChestData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.ChestData.chestRotation">
      <apidata name="chestRotation" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Quaternion" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.ChestData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.ChestData.isChestOpened">
      <apidata name="isChestOpened" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.ChestData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:GameData.CutscenePrefab">
      <apidata name="CutscenePrefab" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:GameData.CutscenePrefab.cutscenePrefabInitialPosition" />
        <element api="F:GameData.CutscenePrefab.cutscenePrefabCurrentPosition" />
        <element api="F:GameData.CutscenePrefab.cutscenePrefabIsRunned" />
        <element api="M:GameData.CutscenePrefab.#ctor" />
        <element api="M:GameData.CutscenePrefab.#ctor(UnityEngine.GameObject)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="M:GameData.CutscenePrefab.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.CutscenePrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:GameData.CutscenePrefab.#ctor(UnityEngine.GameObject)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="obj">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.CutscenePrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.CutscenePrefab.cutscenePrefabCurrentPosition">
      <apidata name="cutscenePrefabCurrentPosition" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.CutscenePrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.CutscenePrefab.cutscenePrefabInitialPosition">
      <apidata name="cutscenePrefabInitialPosition" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.CutscenePrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.CutscenePrefab.cutscenePrefabIsRunned">
      <apidata name="cutscenePrefabIsRunned" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.CutscenePrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:GameData.CutscenePrefabJeveData">
      <apidata name="CutscenePrefabJeveData" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:GameData.CutscenePrefabJeveData.jevePosition" />
        <element api="F:GameData.CutscenePrefabJeveData.jeveRotation" />
        <element api="M:GameData.CutscenePrefabJeveData.#ctor" />
        <element api="M:GameData.CutscenePrefabJeveData.#ctor(UnityEngine.GameObject)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="M:GameData.CutscenePrefabJeveData.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.CutscenePrefabJeveData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:GameData.CutscenePrefabJeveData.#ctor(UnityEngine.GameObject)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="obj">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.CutscenePrefabJeveData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.CutscenePrefabJeveData.jevePosition">
      <apidata name="jevePosition" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.CutscenePrefabJeveData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.CutscenePrefabJeveData.jeveRotation">
      <apidata name="jeveRotation" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Quaternion" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.CutscenePrefabJeveData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:GameData.EnemyPrefab">
      <apidata name="EnemyPrefab" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:GameData.EnemyPrefab.enemyName" />
        <element api="F:GameData.EnemyPrefab.enemyPosition" />
        <element api="F:GameData.EnemyPrefab.enemyRotation" />
        <element api="F:GameData.EnemyPrefab.enemyHealthPoints" />
        <element api="F:GameData.EnemyPrefab.enemyNavMeshTransformsPosition" />
        <element api="F:GameData.EnemyPrefab.enemyCurrentWaypoint" />
        <element api="F:GameData.EnemyPrefab.enemyCurrentFaction" />
        <element api="M:GameData.EnemyPrefab.#ctor" />
        <element api="M:GameData.EnemyPrefab.#ctor(UnityEngine.GameObject)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="M:GameData.EnemyPrefab.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.EnemyPrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:GameData.EnemyPrefab.#ctor(UnityEngine.GameObject)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="obj">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.EnemyPrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.EnemyPrefab.enemyCurrentFaction">
      <apidata name="enemyCurrentFaction" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:CommonEntity.Faction" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.EnemyPrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.EnemyPrefab.enemyCurrentWaypoint">
      <apidata name="enemyCurrentWaypoint" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.EnemyPrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.EnemyPrefab.enemyHealthPoints">
      <apidata name="enemyHealthPoints" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.EnemyPrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.EnemyPrefab.enemyName">
      <apidata name="enemyName" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.EnemyPrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.EnemyPrefab.enemyNavMeshTransformsPosition">
      <apidata name="enemyNavMeshTransformsPosition" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <arrayOf rank="1">
          <type api="T:UnityEngine.Vector3" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.EnemyPrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.EnemyPrefab.enemyPosition">
      <apidata name="enemyPosition" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.EnemyPrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.EnemyPrefab.enemyRotation">
      <apidata name="enemyRotation" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Quaternion" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.EnemyPrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:GameData.GameDifficultyData">
      <apidata name="GameDifficultyData" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:GameData.GameDifficultyData.difficulty" />
        <element api="M:GameData.GameDifficultyData.#ctor" />
        <element api="M:GameData.GameDifficultyData.#ctor(Game.Difficulty)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="M:GameData.GameDifficultyData.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.GameDifficultyData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:GameData.GameDifficultyData.#ctor(Game.Difficulty)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="dif">
          <type api="T:Game.Difficulty" ref="false">
            <type api="T:Game" ref="true" />
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.GameDifficultyData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.GameDifficultyData.difficulty">
      <apidata name="difficulty" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Game.Difficulty" ref="false">
          <type api="T:Game" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.GameDifficultyData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:GameData.IgorData">
      <apidata name="IgorData" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:GameData.IgorData.igor1Position" />
        <element api="F:GameData.IgorData.igor1Rotation" />
        <element api="F:GameData.IgorData.igorPosition" />
        <element api="F:GameData.IgorData.igorRotation" />
        <element api="F:GameData.IgorData.igorLevel" />
        <element api="F:GameData.IgorData.igorExperience" />
        <element api="F:GameData.IgorData.igorHealthPoints" />
        <element api="F:GameData.IgorData.igorMaxHealthPoints" />
        <element api="F:GameData.IgorData.igorSpeed" />
        <element api="F:GameData.IgorData.igorMana" />
        <element api="F:GameData.IgorData.igorMaxMana" />
        <element api="F:GameData.IgorData.igorHealthRegeneration" />
        <element api="F:GameData.IgorData.igorManaRegeneration" />
        <element api="F:GameData.IgorData.igorSkillpoints" />
        <element api="F:GameData.IgorData.igorDamageOverTimeEffects" />
        <element api="F:GameData.IgorData.igorInventory" />
        <element api="M:GameData.IgorData.IgorInventoryReader" />
        <element api="M:GameData.IgorData.#ctor" />
        <element api="M:GameData.IgorData.#ctor(GameData.Operation)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="M:GameData.IgorData.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:GameData.IgorData.#ctor(GameData.Operation)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="op">
          <type api="T:GameData.Operation" ref="false">
            <type api="T:GameData" ref="true" />
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.IgorData.igor1Position">
      <apidata name="igor1Position" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.IgorData.igor1Rotation">
      <apidata name="igor1Rotation" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Quaternion" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.IgorData.igorDamageOverTimeEffects">
      <apidata name="igorDamageOverTimeEffects" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:CommonEntity.DamageOverTime" ref="true">
              <type api="T:CommonEntity" ref="true" />
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.IgorData.igorExperience">
      <apidata name="igorExperience" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.IgorData.igorHealthPoints">
      <apidata name="igorHealthPoints" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.IgorData.igorHealthRegeneration">
      <apidata name="igorHealthRegeneration" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.IgorData.igorInventory">
      <apidata name="igorInventory" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:GameData.IgorData.InventoryRecover" ref="true">
              <type api="T:GameData.IgorData" ref="true">
                <type api="T:GameData" ref="true" />
              </type>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:GameData.IgorData.IgorInventoryReader">
      <apidata name="IgorInventoryReader" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:GameData.IgorData.InventoryRecover" ref="true">
              <type api="T:GameData.IgorData" ref="true">
                <type api="T:GameData" ref="true" />
              </type>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.IgorData.igorLevel">
      <apidata name="igorLevel" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.IgorData.igorMana">
      <apidata name="igorMana" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.IgorData.igorManaRegeneration">
      <apidata name="igorManaRegeneration" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.IgorData.igorMaxHealthPoints">
      <apidata name="igorMaxHealthPoints" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.IgorData.igorMaxMana">
      <apidata name="igorMaxMana" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.IgorData.igorPosition">
      <apidata name="igorPosition" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.IgorData.igorRotation">
      <apidata name="igorRotation" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Quaternion" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.IgorData.igorSkillpoints">
      <apidata name="igorSkillpoints" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.IgorData.igorSpeed">
      <apidata name="igorSpeed" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:GameData.IgorData.InventoryRecover">
      <apidata name="InventoryRecover" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:GameData.IgorData.InventoryRecover.amount" />
        <element api="F:GameData.IgorData.InventoryRecover.name" />
        <element api="F:GameData.IgorData.InventoryRecover.repairKitAmountToHeal" />
        <element api="M:GameData.IgorData.InventoryRecover.#ctor(System.Int32,System.String,Inventory.InventoryItem)" />
        <element api="M:GameData.IgorData.InventoryRecover.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:GameData.IgorData.InventoryRecover.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData.InventoryRecover" ref="true">
          <type api="T:GameData.IgorData" ref="true">
            <type api="T:GameData" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="M:GameData.IgorData.InventoryRecover.#ctor(System.Int32,System.String,Inventory.InventoryItem)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="stacks">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="iInvItemName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="item">
          <type api="T:Inventory.InventoryItem" ref="true">
            <type api="T:Inventory" ref="true" />
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData.InventoryRecover" ref="true">
          <type api="T:GameData.IgorData" ref="true">
            <type api="T:GameData" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="F:GameData.IgorData.InventoryRecover.amount">
      <apidata name="amount" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData.InventoryRecover" ref="true">
          <type api="T:GameData.IgorData" ref="true">
            <type api="T:GameData" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="F:GameData.IgorData.InventoryRecover.name">
      <apidata name="name" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData.InventoryRecover" ref="true">
          <type api="T:GameData.IgorData" ref="true">
            <type api="T:GameData" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="F:GameData.IgorData.InventoryRecover.repairKitAmountToHeal">
      <apidata name="repairKitAmountToHeal" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.IgorData.InventoryRecover" ref="true">
          <type api="T:GameData.IgorData" ref="true">
            <type api="T:GameData" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="T:GameData.Operation">
      <apidata name="Operation" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" layout="auto" format="ansi" />
      <elements>
        <element api="F:GameData.Operation.SAVE" />
        <element api="F:GameData.Operation.LOAD" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="F:GameData.Operation.LOAD">
      <apidata name="LOAD" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:GameData.Operation" ref="false">
          <type api="T:GameData" ref="true" />
        </type>
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.Operation" ref="false">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.Operation.SAVE">
      <apidata name="SAVE" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:GameData.Operation" ref="false">
          <type api="T:GameData" ref="true" />
        </type>
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.Operation" ref="false">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:GameData.ScenePrefab">
      <apidata name="ScenePrefab" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:GameData.ScenePrefab.prefabPosition" />
        <element api="F:GameData.ScenePrefab.prefabRotation" />
        <element api="F:GameData.ScenePrefab.prefabName" />
        <element api="F:GameData.ScenePrefab.prefabAttribute1" />
        <element api="F:GameData.ScenePrefab.prefabAttribute2" />
        <element api="M:GameData.ScenePrefab.#ctor" />
        <element api="M:GameData.ScenePrefab.#ctor(UnityEngine.GameObject)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="M:GameData.ScenePrefab.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.ScenePrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:GameData.ScenePrefab.#ctor(UnityEngine.GameObject)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="obj">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.ScenePrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.ScenePrefab.prefabAttribute1">
      <apidata name="prefabAttribute1" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.ScenePrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.ScenePrefab.prefabAttribute2">
      <apidata name="prefabAttribute2" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.ScenePrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.ScenePrefab.prefabName">
      <apidata name="prefabName" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.ScenePrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.ScenePrefab.prefabPosition">
      <apidata name="prefabPosition" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.ScenePrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.ScenePrefab.prefabRotation">
      <apidata name="prefabRotation" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Quaternion" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.ScenePrefab" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:GameData.SkillBarData">
      <apidata name="SkillBarData" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:GameData.SkillBarData.slotList" />
        <element api="M:GameData.SkillBarData.#ctor" />
        <element api="M:GameData.SkillBarData.#ctor(GameData.Operation)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="M:GameData.SkillBarData.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.SkillBarData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:GameData.SkillBarData.#ctor(GameData.Operation)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="op">
          <type api="T:GameData.Operation" ref="false">
            <type api="T:GameData" ref="true" />
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.SkillBarData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.SkillBarData.slotList">
      <apidata name="slotList" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:GameData.SkillBarData.SkillSlot" ref="true">
              <type api="T:GameData.SkillBarData" ref="true">
                <type api="T:GameData" ref="true" />
              </type>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.SkillBarData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:GameData.SkillBarData.SkillSlot">
      <apidata name="SkillSlot" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:GameData.SkillBarData.SkillSlot.index" />
        <element api="F:GameData.SkillBarData.SkillSlot.name" />
        <element api="F:GameData.SkillBarData.SkillSlot.type" />
        <element api="M:GameData.SkillBarData.SkillSlot.#ctor" />
        <element api="M:GameData.SkillBarData.SkillSlot.#ctor(System.String,System.Int32)" />
        <element api="M:GameData.SkillBarData.SkillSlot.#ctor(System.String,SkillBar.SkillBarItem.ItemType,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.SkillBarData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:GameData.SkillBarData.SkillSlot.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.SkillBarData.SkillSlot" ref="true">
          <type api="T:GameData.SkillBarData" ref="true">
            <type api="T:GameData" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="M:GameData.SkillBarData.SkillSlot.#ctor(System.String,SkillBar.SkillBarItem.ItemType,System.Int32)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="skillName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="skillType">
          <type api="T:SkillBar.SkillBarItem.ItemType" ref="false">
            <type api="T:SkillBar.SkillBarItem" ref="true">
              <type api="T:SkillBar" ref="true" />
            </type>
          </type>
        </parameter>
        <parameter name="skillIndex">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.SkillBarData.SkillSlot" ref="true">
          <type api="T:GameData.SkillBarData" ref="true">
            <type api="T:GameData" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="M:GameData.SkillBarData.SkillSlot.#ctor(System.String,System.Int32)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="skillName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="skillIndex">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.SkillBarData.SkillSlot" ref="true">
          <type api="T:GameData.SkillBarData" ref="true">
            <type api="T:GameData" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="F:GameData.SkillBarData.SkillSlot.index">
      <apidata name="index" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.SkillBarData.SkillSlot" ref="true">
          <type api="T:GameData.SkillBarData" ref="true">
            <type api="T:GameData" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="F:GameData.SkillBarData.SkillSlot.name">
      <apidata name="name" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.SkillBarData.SkillSlot" ref="true">
          <type api="T:GameData.SkillBarData" ref="true">
            <type api="T:GameData" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="F:GameData.SkillBarData.SkillSlot.type">
      <apidata name="type" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:SkillBar.SkillBarItem.ItemType" ref="false">
          <type api="T:SkillBar.SkillBarItem" ref="true">
            <type api="T:SkillBar" ref="true" />
          </type>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.SkillBarData.SkillSlot" ref="true">
          <type api="T:GameData.SkillBarData" ref="true">
            <type api="T:GameData" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="T:GameData.SkillData">
      <apidata name="SkillData" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:GameData.SkillData.skillDataList" />
        <element api="M:GameData.SkillData.#ctor" />
        <element api="M:GameData.SkillData.#ctor(System.Collections.Generic.List{Skills.SkillData})" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData" ref="true" />
      </containers>
    </api>
    <api id="M:GameData.SkillData.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.SkillData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:GameData.SkillData.#ctor(System.Collections.Generic.List{Skills.SkillData})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="skills">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:Skills.SkillData" ref="true">
                <type api="T:Skills" ref="true" />
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.SkillData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameData.SkillData.skillDataList">
      <apidata name="skillDataList" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:GameData.SkillData.SkillDataList" ref="true">
              <type api="T:GameData.SkillData" ref="true">
                <type api="T:GameData" ref="true" />
              </type>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.SkillData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:GameData.SkillData.SkillDataList">
      <apidata name="SkillDataList" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:GameData.SkillData.SkillDataList.skillName" />
        <element api="F:GameData.SkillData.SkillDataList.skillLevel" />
        <element api="M:GameData.SkillData.SkillDataList.#ctor" />
        <element api="M:GameData.SkillData.SkillDataList.#ctor(System.String,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.SkillData" ref="true">
          <type api="T:GameData" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:GameData.SkillData.SkillDataList.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.SkillData.SkillDataList" ref="true">
          <type api="T:GameData.SkillData" ref="true">
            <type api="T:GameData" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="M:GameData.SkillData.SkillDataList.#ctor(System.String,System.Int32)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.SkillData.SkillDataList" ref="true">
          <type api="T:GameData.SkillData" ref="true">
            <type api="T:GameData" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="F:GameData.SkillData.SkillDataList.skillLevel">
      <apidata name="skillLevel" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.SkillData.SkillDataList" ref="true">
          <type api="T:GameData.SkillData" ref="true">
            <type api="T:GameData" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="F:GameData.SkillData.SkillDataList.skillName">
      <apidata name="skillName" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameData.SkillData.SkillDataList" ref="true">
          <type api="T:GameData.SkillData" ref="true">
            <type api="T:GameData" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="T:GameDataManager">
      <apidata name="GameDataManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:GameDataManager.gameData" />
        <element api="F:GameDataManager.saveLoadDatas" />
        <element api="F:GameDataManager.hasSwapDate" />
        <element api="F:GameDataManager.loadGameDate" />
        <element api="F:GameDataManager.gdr" />
        <element api="F:GameDataManager.sd" />
        <element api="F:GameDataManager.isPaused" />
        <element api="F:GameDataManager.isMainMenu" />
        <element api="F:GameDataManager.isSaveMenu" />
        <element api="F:GameDataManager.isLoadMenu" />
        <element api="F:GameDataManager.showData" />
        <element api="M:GameDataManager.Awake" />
        <element api="M:GameDataManager.Start" />
        <element api="M:GameDataManager.Save(System.String)" />
        <element api="M:GameDataManager.Load(System.String)" />
        <element api="M:GameDataManager.Update" />
        <element api="M:GameDataManager.OnGUI" />
        <element api="M:GameDataManager.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:GameDataManager.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="M:GameDataManager.Awake">
      <apidata name="Awake" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="F:GameDataManager.gameData">
      <apidata name="gameData" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:GameData" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="F:GameDataManager.gdr">
      <apidata name="gdr" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:GameDataRecover" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="F:GameDataManager.hasSwapDate">
      <apidata name="hasSwapDate" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="F:GameDataManager.isLoadMenu">
      <apidata name="isLoadMenu" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="F:GameDataManager.isMainMenu">
      <apidata name="isMainMenu" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="F:GameDataManager.isPaused">
      <apidata name="isPaused" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="F:GameDataManager.isSaveMenu">
      <apidata name="isSaveMenu" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="M:GameDataManager.Load(System.String)">
      <apidata name="Load" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:GameData" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="F:GameDataManager.loadGameDate">
      <apidata name="loadGameDate" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:GameData" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="M:GameDataManager.OnGUI">
      <apidata name="OnGUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="M:GameDataManager.Save(System.String)">
      <apidata name="Save" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="F:GameDataManager.saveLoadDatas">
      <apidata name="saveLoadDatas" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <arrayOf rank="1">
          <type api="T:GameDataManager.SaveLoadDataShow" ref="true">
            <type api="T:GameDataManager" ref="true" />
          </type>
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="F:GameDataManager.sd">
      <apidata name="sd" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:GameDataManager.SwapData" ref="true">
          <type api="T:GameDataManager" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="F:GameDataManager.showData">
      <apidata name="showData" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <arrayOf rank="1">
          <type api="T:GameDataManager.SaveLoadDataShow" ref="true">
            <type api="T:GameDataManager" ref="true" />
          </type>
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="M:GameDataManager.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="M:GameDataManager.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="T:GameDataManager.SaveLoadDataShow">
      <apidata name="SaveLoadDataShow" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:GameDataManager.SaveLoadDataShow.indexNum" />
        <element api="F:GameDataManager.SaveLoadDataShow.sceneName" />
        <element api="F:GameDataManager.SaveLoadDataShow.igorLevel" />
        <element api="F:GameDataManager.SaveLoadDataShow.saveTime" />
        <element api="M:GameDataManager.SaveLoadDataShow.#ctor" />
        <element api="M:GameDataManager.SaveLoadDataShow.#ctor(System.String)" />
        <element api="M:GameDataManager.SaveLoadDataShow.#ctor(GameData)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="M:GameDataManager.SaveLoadDataShow.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager.SaveLoadDataShow" ref="true">
          <type api="T:GameDataManager" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:GameDataManager.SaveLoadDataShow.#ctor(GameData)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="gd">
          <type api="T:GameData" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager.SaveLoadDataShow" ref="true">
          <type api="T:GameDataManager" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:GameDataManager.SaveLoadDataShow.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="str">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager.SaveLoadDataShow" ref="true">
          <type api="T:GameDataManager" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameDataManager.SaveLoadDataShow.igorLevel">
      <apidata name="igorLevel" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager.SaveLoadDataShow" ref="true">
          <type api="T:GameDataManager" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameDataManager.SaveLoadDataShow.indexNum">
      <apidata name="indexNum" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager.SaveLoadDataShow" ref="true">
          <type api="T:GameDataManager" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameDataManager.SaveLoadDataShow.saveTime">
      <apidata name="saveTime" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager.SaveLoadDataShow" ref="true">
          <type api="T:GameDataManager" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameDataManager.SaveLoadDataShow.sceneName">
      <apidata name="sceneName" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager.SaveLoadDataShow" ref="true">
          <type api="T:GameDataManager" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:GameDataManager.SwapData">
      <apidata name="SwapData" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:GameDataManager.SwapData.initializeLoad" />
        <element api="F:GameDataManager.SwapData.loadDataPath" />
        <element api="M:GameDataManager.SwapData.#ctor" />
        <element api="M:GameDataManager.SwapData.#ctor(System.Boolean,System.String)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager" ref="true" />
      </containers>
    </api>
    <api id="M:GameDataManager.SwapData.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager.SwapData" ref="true">
          <type api="T:GameDataManager" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:GameDataManager.SwapData.#ctor(System.Boolean,System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="iLoad">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager.SwapData" ref="true">
          <type api="T:GameDataManager" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameDataManager.SwapData.initializeLoad">
      <apidata name="initializeLoad" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager.SwapData" ref="true">
          <type api="T:GameDataManager" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:GameDataManager.SwapData.loadDataPath">
      <apidata name="loadDataPath" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataManager.SwapData" ref="true">
          <type api="T:GameDataManager" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:GameDataRecover">
      <apidata name="GameDataRecover" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:GameDataRecover.#ctor" />
        <element api="M:GameDataRecover.#ctor(GameData)" />
        <element api="M:GameDataRecover.GameDifficultyDataRecover(GameData)" />
        <element api="M:GameDataRecover.LoadScene(System.String)" />
        <element api="M:GameDataRecover.SkillBarRecover(GameData)" />
        <element api="M:GameDataRecover.SkillTreeRecover(GameData)" />
        <element api="M:GameDataRecover.ScenePrefabRecover(GameData)" />
        <element api="M:GameDataRecover.BossDataRecover(GameData)" />
        <element api="M:GameDataRecover.CutscenePrefabRecover(GameData)" />
        <element api="M:GameDataRecover.IgorRecover(GameData)" />
        <element api="M:GameDataRecover.GetIInvItemArrayList(System.Collections.Generic.List{GameData.IgorData.InventoryRecover})" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:GameDataRecover.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataRecover" ref="true" />
      </containers>
    </api>
    <api id="M:GameDataRecover.#ctor(GameData)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="gd">
          <type api="T:GameData" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataRecover" ref="true" />
      </containers>
    </api>
    <api id="M:GameDataRecover.BossDataRecover(GameData)">
      <apidata name="BossDataRecover" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="gd">
          <type api="T:GameData" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataRecover" ref="true" />
      </containers>
    </api>
    <api id="M:GameDataRecover.CutscenePrefabRecover(GameData)">
      <apidata name="CutscenePrefabRecover" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="gd">
          <type api="T:GameData" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataRecover" ref="true" />
      </containers>
    </api>
    <api id="M:GameDataRecover.GameDifficultyDataRecover(GameData)">
      <apidata name="GameDifficultyDataRecover" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="gd">
          <type api="T:GameData" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataRecover" ref="true" />
      </containers>
    </api>
    <api id="M:GameDataRecover.GetIInvItemArrayList(System.Collections.Generic.List{GameData.IgorData.InventoryRecover})">
      <apidata name="GetIInvItemArrayList" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="list">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:GameData.IgorData.InventoryRecover" ref="true">
                <type api="T:GameData.IgorData" ref="true">
                  <type api="T:GameData" ref="true" />
                </type>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.ArrayList" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataRecover" ref="true" />
      </containers>
    </api>
    <api id="M:GameDataRecover.IgorRecover(GameData)">
      <apidata name="IgorRecover" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="gd">
          <type api="T:GameData" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataRecover" ref="true" />
      </containers>
    </api>
    <api id="M:GameDataRecover.LoadScene(System.String)">
      <apidata name="LoadScene" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sceneName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataRecover" ref="true" />
      </containers>
    </api>
    <api id="M:GameDataRecover.ScenePrefabRecover(GameData)">
      <apidata name="ScenePrefabRecover" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="gd">
          <type api="T:GameData" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataRecover" ref="true" />
      </containers>
    </api>
    <api id="M:GameDataRecover.SkillBarRecover(GameData)">
      <apidata name="SkillBarRecover" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="gd">
          <type api="T:GameData" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataRecover" ref="true" />
      </containers>
    </api>
    <api id="M:GameDataRecover.SkillTreeRecover(GameData)">
      <apidata name="SkillTreeRecover" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="gd">
          <type api="T:GameData" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:GameDataRecover" ref="true" />
      </containers>
    </api>
    <api id="T:HackAttack">
      <apidata name="HackAttack" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:BaseSkill" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:HackAttack.hackingEffectPrefab" />
        <element api="F:HackAttack.sound" />
        <element api="F:HackAttack.duration" />
        <element api="M:HackAttack.Start" />
        <element api="M:HackAttack.GetDuration(System.Int32)" />
        <element api="M:HackAttack.GetName" />
        <element api="M:HackAttack.GetNeededItems" />
        <element api="M:HackAttack.OnUse(UnityEngine.GameObject,Igor,System.Int32)" />
        <element api="M:HackAttack.GetCooldown(System.Int32)" />
        <element api="M:HackAttack.GetNeededEnergy(System.Int32)" />
        <element api="M:HackAttack.AttackCooldownAnimation(CommonEntity,System.Int32)" />
        <element api="M:HackAttack.RevertHackEffect(System.Single,CommonEntity,UnityEngine.GameObject)" />
        <element api="M:HackAttack.GetEnemyForHacking(CommonEntity)" />
        <element api="M:HackAttack.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:HackAttack.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HackAttack" ref="true" />
      </containers>
    </api>
    <api id="M:HackAttack.AttackCooldownAnimation(CommonEntity,System.Int32)">
      <apidata name="AttackCooldownAnimation" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="ce">
          <type api="T:CommonEntity" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HackAttack" ref="true" />
      </containers>
    </api>
    <api id="F:HackAttack.duration">
      <apidata name="duration" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HackAttack" ref="true" />
      </containers>
    </api>
    <api id="M:HackAttack.GetCooldown(System.Int32)">
      <apidata name="GetCooldown" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetCooldown(System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetCooldown(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HackAttack" ref="true" />
      </containers>
    </api>
    <api id="M:HackAttack.GetDuration(System.Int32)">
      <apidata name="GetDuration" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HackAttack" ref="true" />
      </containers>
    </api>
    <api id="M:HackAttack.GetEnemyForHacking(CommonEntity)">
      <apidata name="GetEnemyForHacking" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="caster">
          <type api="T:CommonEntity" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:CommonEntity" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HackAttack" ref="true" />
      </containers>
    </api>
    <api id="M:HackAttack.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetName">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:ISkill.GetName">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HackAttack" ref="true" />
      </containers>
    </api>
    <api id="M:HackAttack.GetNeededEnergy(System.Int32)">
      <apidata name="GetNeededEnergy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededEnergy(System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededEnergy(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HackAttack" ref="true" />
      </containers>
    </api>
    <api id="M:HackAttack.GetNeededItems">
      <apidata name="GetNeededItems" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededItems">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededItems">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HackAttack" ref="true" />
      </containers>
    </api>
    <api id="F:HackAttack.hackingEffectPrefab">
      <apidata name="hackingEffectPrefab" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HackAttack" ref="true" />
      </containers>
    </api>
    <api id="M:HackAttack.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
      <apidata name="OnUse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="igorInstance">
          <type api="T:Igor" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HackAttack" ref="true" />
      </containers>
    </api>
    <api id="M:HackAttack.RevertHackEffect(System.Single,CommonEntity,UnityEngine.GameObject)">
      <apidata name="RevertHackEffect" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="waitDuration">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="entity">
          <type api="T:CommonEntity" ref="true" />
        </parameter>
        <parameter name="effect">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HackAttack" ref="true" />
      </containers>
    </api>
    <api id="F:HackAttack.sound">
      <apidata name="sound" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.AudioClip" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HackAttack" ref="true" />
      </containers>
    </api>
    <api id="M:HackAttack.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HackAttack" ref="true" />
      </containers>
    </api>
    <api id="T:HeadbangAttack">
      <apidata name="HeadbangAttack" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:BaseSkill" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:HeadbangAttack.hitSound" />
        <element api="F:HeadbangAttack.hitParticleEffect" />
        <element api="M:HeadbangAttack.GetDamageForLevel(System.Int32)" />
        <element api="M:HeadbangAttack.GetName" />
        <element api="M:HeadbangAttack.GetNeededSkills" />
        <element api="M:HeadbangAttack.GetNeededItems" />
        <element api="M:HeadbangAttack.OnUse(UnityEngine.GameObject,Igor,System.Int32)" />
        <element api="M:HeadbangAttack.GetCooldown(System.Int32)" />
        <element api="M:HeadbangAttack.GetNeededEnergy(System.Int32)" />
        <element api="M:HeadbangAttack.AttackCooldownAnimation(Igor,System.Int32)" />
        <element api="M:HeadbangAttack.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:HeadbangAttack.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HeadbangAttack" ref="true" />
      </containers>
    </api>
    <api id="M:HeadbangAttack.AttackCooldownAnimation(Igor,System.Int32)">
      <apidata name="AttackCooldownAnimation" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="igor">
          <type api="T:Igor" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HeadbangAttack" ref="true" />
      </containers>
    </api>
    <api id="M:HeadbangAttack.GetCooldown(System.Int32)">
      <apidata name="GetCooldown" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetCooldown(System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetCooldown(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HeadbangAttack" ref="true" />
      </containers>
    </api>
    <api id="M:HeadbangAttack.GetDamageForLevel(System.Int32)">
      <apidata name="GetDamageForLevel" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HeadbangAttack" ref="true" />
      </containers>
    </api>
    <api id="M:HeadbangAttack.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetName">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:ISkill.GetName">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HeadbangAttack" ref="true" />
      </containers>
    </api>
    <api id="M:HeadbangAttack.GetNeededEnergy(System.Int32)">
      <apidata name="GetNeededEnergy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededEnergy(System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededEnergy(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HeadbangAttack" ref="true" />
      </containers>
    </api>
    <api id="M:HeadbangAttack.GetNeededItems">
      <apidata name="GetNeededItems" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededItems">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededItems">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HeadbangAttack" ref="true" />
      </containers>
    </api>
    <api id="M:HeadbangAttack.GetNeededSkills">
      <apidata name="GetNeededSkills" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededSkills">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededSkills">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HeadbangAttack" ref="true" />
      </containers>
    </api>
    <api id="F:HeadbangAttack.hitParticleEffect">
      <apidata name="hitParticleEffect" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HeadbangAttack" ref="true" />
      </containers>
    </api>
    <api id="F:HeadbangAttack.hitSound">
      <apidata name="hitSound" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.AudioClip" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HeadbangAttack" ref="true" />
      </containers>
    </api>
    <api id="M:HeadbangAttack.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
      <apidata name="OnUse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="igorInstance">
          <type api="T:Igor" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HeadbangAttack" ref="true" />
      </containers>
    </api>
    <api id="T:HeadMarker">
      <apidata name="HeadMarker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:HeadMarker.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:HeadMarker.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:HeadMarker" ref="true" />
      </containers>
    </api>
    <api id="T:IAction">
      <apidata name="IAction" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" layout="auto" format="ansi" />
      <implementors>
        <type api="T:ActionGeneric" ref="true" />
        <type api="T:ActionMoveTo" ref="true" />
      </implementors>
      <elements>
        <element api="M:IAction.OnStart" />
        <element api="M:IAction.OnFinish" />
        <element api="M:IAction.OnUpdate" />
        <element api="M:IAction.GUI" />
        <element api="M:IAction.Finished" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:IAction.Finished">
      <apidata name="Finished" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IAction" ref="true" />
      </containers>
    </api>
    <api id="M:IAction.GUI">
      <apidata name="GUI" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IAction" ref="true" />
      </containers>
    </api>
    <api id="M:IAction.OnFinish">
      <apidata name="OnFinish" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IAction" ref="true" />
      </containers>
    </api>
    <api id="M:IAction.OnStart">
      <apidata name="OnStart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IAction" ref="true" />
      </containers>
    </api>
    <api id="M:IAction.OnUpdate">
      <apidata name="OnUpdate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IAction" ref="true" />
      </containers>
    </api>
    <api id="T:Igor">
      <apidata name="Igor" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:CommonEntity" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Igor.maxStartPushingTime" />
        <element api="F:Igor.hidden" />
        <element api="F:Igor.turningSpeed" />
        <element api="F:Igor.initialMaxHealthPoints" />
        <element api="F:Igor.initialMaxMana" />
        <element api="F:Igor.initialTimeUntilRegeneration" />
        <element api="F:Igor.initialHealthRegeneration" />
        <element api="F:Igor.initialManaRegeneration" />
        <element api="F:Igor.initialJumpForce" />
        <element api="F:Igor.initialJumpForceRegeneration" />
        <element api="F:Igor.initialSpeed" />
        <element api="F:Igor.skillpointsPerLevel" />
        <element api="F:Igor.skillpoints" />
        <element api="F:Igor.level" />
        <element api="F:Igor.experience" />
        <element api="F:Igor.healthBarTexture" />
        <element api="F:Igor.manaBarTexture" />
        <element api="F:Igor.jumpBarTexture" />
        <element api="F:Igor.expBarTexture" />
        <element api="F:Igor.barBackgroundTexture" />
        <element api="F:Igor.skillPointMessageguiStyle" />
        <element api="F:Igor.currentMovementDirection" />
        <element api="F:Igor.jumpWasCappedAtCeilingLastMove" />
        <element api="F:Igor.backwardSlowdown" />
        <element api="F:Igor.gameOverImage" />
        <element api="F:Igor.objectHelpMessageDelay" />
        <element api="F:Igor.objectHelpMessageWaited" />
        <element api="F:Igor.inAction" />
        <element api="F:Igor.sparklingParticlesPrefab" />
        <element api="F:Igor.currentHighlightingEffect" />
        <element api="F:Igor.currentHighlightedObject" />
        <element api="F:Igor.useEffectItem" />
        <element api="F:Igor.useObjectInFrontCallbackObject" />
        <element api="F:Igor.timeSinceIgorDied" />
        <element api="F:Igor.realSize" />
        <element api="F:Igor.currentPushBox" />
        <element api="F:Igor.pushLeft" />
        <element api="F:Igor.startPushingTime" />
        <element api="F:Igor.fallSpeed" />
        <element api="F:Igor.jumpForce" />
        <element api="F:Igor.jumpCurrentForce" />
        <element api="F:Igor.jumpMaxHeight" />
        <element api="F:Igor.currentJumpMaxY" />
        <element api="F:Igor.jumpSpeed" />
        <element api="F:Igor.jumpCooldown" />
        <element api="F:Igor.inJump" />
        <element api="F:Igor.jumpHeight" />
        <element api="F:Igor.jumpForceRegeneration" />
        <element api="F:Igor.animator" />
        <element api="M:Igor.RotateToCameraSmoothly" />
        <element api="M:Igor.RotateToCameraHard" />
        <element api="M:Igor.UnityStart_Skills" />
        <element api="M:Igor.ResetExperience" />
        <element api="M:Igor.AddExperience(System.UInt32)" />
        <element api="M:Igor.Awake" />
        <element api="M:Igor.Start" />
        <element api="M:Igor.Update" />
        <element api="M:Igor.FixedUpdate" />
        <element api="M:Igor.UnityUpdate_State_Normal" />
        <element api="M:Igor.ResetCurrentMovement" />
        <element api="M:Igor.AddCurrentMovement(UnityEngine.Vector3)" />
        <element api="M:Igor.ExecCurrentMovement" />
        <element api="M:Igor.MoveOnPlane" />
        <element api="M:Igor.UnityStart_GUI" />
        <element api="M:Igor.OnGUI" />
        <element api="M:Igor.DrawObjectHelpMessage(UnityEngine.GameObject,System.Int32,System.Int32,System.String)" />
        <element api="M:Igor.CheckUsableObjects" />
        <element api="M:Igor.PlayUseObjectInFrontAnimation(UnityEngine.GameObject)" />
        <element api="M:Igor.UseObjectInFrontAnimation" />
        <element api="M:Igor.UseItemSelfAnimation" />
        <element api="M:Igor.UseItemSelf(UnityEngine.GameObject)" />
        <element api="M:Igor.UnityUpdate_State_Dead" />
        <element api="M:Igor.Die" />
        <element api="M:Igor.UnityStart_Pushing" />
        <element api="M:Igor.UnityUpdate_State_Pushing" />
        <element api="M:Igor.UnityUpdate_State_StartPushing" />
        <element api="M:Igor.InitiatePushing(PushableBox)" />
        <element api="M:Igor.EndPushing" />
        <element api="M:Igor.EndPushingForLoad" />
        <element api="M:Igor.FallDown(System.Single)" />
        <element api="M:Igor.GetMana" />
        <element api="M:Igor.DoMana(System.Single)" />
        <element api="M:Igor.UnityUpdate_JumpAudioVolume" />
        <element api="M:Igor.Jump" />
        <element api="M:Igor.RegenerateJumpForce" />
        <element api="M:Igor.StartAnimation(System.String)" />
        <element api="M:Igor.GetAnimationLength(System.String)" />
        <element api="M:Igor.#ctor" />
        <element api="P:Igor.Hidden" />
        <element api="P:Igor.Experience" />
        <element api="P:Igor.ExpUntilLevelUp" />
        <element api="P:Igor.RealSize" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Igor.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.AddCurrentMovement(UnityEngine.Vector3)">
      <apidata name="AddCurrentMovement" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="direction">
          <type api="T:UnityEngine.Vector3" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.AddExperience(System.UInt32)">
      <apidata name="AddExperience" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="amount">
          <type api="T:System.UInt32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.animator">
      <apidata name="animator" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Animator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.Awake">
      <apidata name="Awake" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.backwardSlowdown">
      <apidata name="backwardSlowdown" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.barBackgroundTexture">
      <apidata name="barBackgroundTexture" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.CheckUsableObjects">
      <apidata name="CheckUsableObjects" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.currentHighlightedObject">
      <apidata name="currentHighlightedObject" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.currentHighlightingEffect">
      <apidata name="currentHighlightingEffect" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.currentJumpMaxY">
      <apidata name="currentJumpMaxY" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.currentMovementDirection">
      <apidata name="currentMovementDirection" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.currentPushBox">
      <apidata name="currentPushBox" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:PushableBox" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.Die">
      <apidata name="Die" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:CommonEntity.Die">
          <type api="T:CommonEntity" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.DoMana(System.Single)">
      <apidata name="DoMana" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="amount">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.DrawObjectHelpMessage(UnityEngine.GameObject,System.Int32,System.Int32,System.String)">
      <apidata name="DrawObjectHelpMessage" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="rectSizeX">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="rectSizeY">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="text">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.EndPushing">
      <apidata name="EndPushing" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.EndPushingForLoad">
      <apidata name="EndPushingForLoad" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.ExecCurrentMovement">
      <apidata name="ExecCurrentMovement" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.expBarTexture">
      <apidata name="expBarTexture" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.experience">
      <apidata name="experience" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="P:Igor.Experience">
      <apidata name="Experience" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Experience" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="P:Igor.ExpUntilLevelUp">
      <apidata name="ExpUntilLevelUp" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ExpUntilLevelUp" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.FallDown(System.Single)">
      <apidata name="FallDown" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="speedFactor" optional="true">
          <type api="T:System.Single" ref="false" />
          <argument>
            <type api="T:System.Single" ref="false" />
            <value>1</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.fallSpeed">
      <apidata name="fallSpeed" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.FixedUpdate">
      <apidata name="FixedUpdate" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.gameOverImage">
      <apidata name="gameOverImage" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.GetAnimationLength(System.String)">
      <apidata name="GetAnimationLength" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:CommonEntity.GetAnimationLength(System.String)">
          <type api="T:CommonEntity" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="animation">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.GetMana">
      <apidata name="GetMana" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.healthBarTexture">
      <apidata name="healthBarTexture" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.hidden">
      <apidata name="hidden" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="P:Igor.Hidden">
      <apidata name="Hidden" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Hidden" />
      <setter name="set_Hidden" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.inAction">
      <apidata name="inAction" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.initialHealthRegeneration">
      <apidata name="initialHealthRegeneration" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.initialJumpForce">
      <apidata name="initialJumpForce" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.initialJumpForceRegeneration">
      <apidata name="initialJumpForceRegeneration" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.initialManaRegeneration">
      <apidata name="initialManaRegeneration" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.initialMaxHealthPoints">
      <apidata name="initialMaxHealthPoints" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.initialMaxMana">
      <apidata name="initialMaxMana" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.initialSpeed">
      <apidata name="initialSpeed" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.initialTimeUntilRegeneration">
      <apidata name="initialTimeUntilRegeneration" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.InitiatePushing(PushableBox)">
      <apidata name="InitiatePushing" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="pb">
          <type api="T:PushableBox" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.inJump">
      <apidata name="inJump" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.Jump">
      <apidata name="Jump" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.jumpBarTexture">
      <apidata name="jumpBarTexture" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.jumpCooldown">
      <apidata name="jumpCooldown" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.jumpCurrentForce">
      <apidata name="jumpCurrentForce" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.jumpForce">
      <apidata name="jumpForce" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.jumpForceRegeneration">
      <apidata name="jumpForceRegeneration" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.jumpHeight">
      <apidata name="jumpHeight" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.jumpMaxHeight">
      <apidata name="jumpMaxHeight" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.jumpSpeed">
      <apidata name="jumpSpeed" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.jumpWasCappedAtCeilingLastMove">
      <apidata name="jumpWasCappedAtCeilingLastMove" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.level">
      <apidata name="level" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.manaBarTexture">
      <apidata name="manaBarTexture" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.maxStartPushingTime">
      <apidata name="maxStartPushingTime" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.MoveOnPlane">
      <apidata name="MoveOnPlane" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.objectHelpMessageDelay">
      <apidata name="objectHelpMessageDelay" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.objectHelpMessageWaited">
      <apidata name="objectHelpMessageWaited" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.OnGUI">
      <apidata name="OnGUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.PlayUseObjectInFrontAnimation(UnityEngine.GameObject)">
      <apidata name="PlayUseObjectInFrontAnimation" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="usable" optional="true">
          <type api="T:UnityEngine.GameObject" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.pushLeft">
      <apidata name="pushLeft" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.realSize">
      <apidata name="realSize" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="P:Igor.RealSize">
      <apidata name="RealSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RealSize" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.RegenerateJumpForce">
      <apidata name="RegenerateJumpForce" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.ResetCurrentMovement">
      <apidata name="ResetCurrentMovement" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.ResetExperience">
      <apidata name="ResetExperience" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.RotateToCameraHard">
      <apidata name="RotateToCameraHard" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.RotateToCameraSmoothly">
      <apidata name="RotateToCameraSmoothly" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.skillPointMessageguiStyle">
      <apidata name="skillPointMessageguiStyle" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GUIStyle" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.skillpoints">
      <apidata name="skillpoints" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.skillpointsPerLevel">
      <apidata name="skillpointsPerLevel" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.sparklingParticlesPrefab">
      <apidata name="sparklingParticlesPrefab" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:CommonEntity.Start">
          <type api="T:CommonEntity" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.StartAnimation(System.String)">
      <apidata name="StartAnimation" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:CommonEntity.StartAnimation(System.String)">
          <type api="T:CommonEntity" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="animation">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.startPushingTime">
      <apidata name="startPushingTime" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.timeSinceIgorDied">
      <apidata name="timeSinceIgorDied" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.turningSpeed">
      <apidata name="turningSpeed" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.UnityStart_GUI">
      <apidata name="UnityStart_GUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.UnityStart_Pushing">
      <apidata name="UnityStart_Pushing" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.UnityStart_Skills">
      <apidata name="UnityStart_Skills" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.UnityUpdate_JumpAudioVolume">
      <apidata name="UnityUpdate_JumpAudioVolume" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.UnityUpdate_State_Dead">
      <apidata name="UnityUpdate_State_Dead" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.UnityUpdate_State_Normal">
      <apidata name="UnityUpdate_State_Normal" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.UnityUpdate_State_Pushing">
      <apidata name="UnityUpdate_State_Pushing" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.UnityUpdate_State_StartPushing">
      <apidata name="UnityUpdate_State_StartPushing" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:CommonEntity.Update">
          <type api="T:CommonEntity" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.useEffectItem">
      <apidata name="useEffectItem" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.UseItemSelf(UnityEngine.GameObject)">
      <apidata name="UseItemSelf" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="partikleffect">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.UseItemSelfAnimation">
      <apidata name="UseItemSelfAnimation" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="M:Igor.UseObjectInFrontAnimation">
      <apidata name="UseObjectInFrontAnimation" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="F:Igor.useObjectInFrontCallbackObject">
      <apidata name="useObjectInFrontCallbackObject" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Igor" ref="true" />
      </containers>
    </api>
    <api id="T:IgorCamera">
      <apidata name="IgorCamera" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:IgorCamera.dontCheckThisTag" />
        <element api="F:IgorCamera.target" />
        <element api="F:IgorCamera.distance" />
        <element api="F:IgorCamera.currentDistance" />
        <element api="F:IgorCamera.minimalDistance" />
        <element api="F:IgorCamera.maximalDistance" />
        <element api="F:IgorCamera.rotationSpeed" />
        <element api="F:IgorCamera.minimalAngle" />
        <element api="F:IgorCamera.maximalAngle" />
        <element api="F:IgorCamera.x" />
        <element api="F:IgorCamera.y" />
        <element api="F:IgorCamera.crosshair" />
        <element api="M:IgorCamera.Start" />
        <element api="M:IgorCamera.LateUpdate" />
        <element api="M:IgorCamera.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:IgorCamera.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorCamera" ref="true" />
      </containers>
    </api>
    <api id="F:IgorCamera.crosshair">
      <apidata name="crosshair" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Transform" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorCamera" ref="true" />
      </containers>
    </api>
    <api id="F:IgorCamera.currentDistance">
      <apidata name="currentDistance" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorCamera" ref="true" />
      </containers>
    </api>
    <api id="F:IgorCamera.distance">
      <apidata name="distance" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorCamera" ref="true" />
      </containers>
    </api>
    <api id="F:IgorCamera.dontCheckThisTag">
      <apidata name="dontCheckThisTag" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorCamera" ref="true" />
      </containers>
    </api>
    <api id="M:IgorCamera.LateUpdate">
      <apidata name="LateUpdate" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorCamera" ref="true" />
      </containers>
    </api>
    <api id="F:IgorCamera.maximalAngle">
      <apidata name="maximalAngle" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorCamera" ref="true" />
      </containers>
    </api>
    <api id="F:IgorCamera.maximalDistance">
      <apidata name="maximalDistance" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorCamera" ref="true" />
      </containers>
    </api>
    <api id="F:IgorCamera.minimalAngle">
      <apidata name="minimalAngle" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorCamera" ref="true" />
      </containers>
    </api>
    <api id="F:IgorCamera.minimalDistance">
      <apidata name="minimalDistance" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorCamera" ref="true" />
      </containers>
    </api>
    <api id="F:IgorCamera.rotationSpeed">
      <apidata name="rotationSpeed" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorCamera" ref="true" />
      </containers>
    </api>
    <api id="M:IgorCamera.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorCamera" ref="true" />
      </containers>
    </api>
    <api id="F:IgorCamera.target">
      <apidata name="target" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Transform" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorCamera" ref="true" />
      </containers>
    </api>
    <api id="F:IgorCamera.x">
      <apidata name="x" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorCamera" ref="true" />
      </containers>
    </api>
    <api id="F:IgorCamera.y">
      <apidata name="y" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorCamera" ref="true" />
      </containers>
    </api>
    <api id="T:IgorLeaveEnemyTest">
      <apidata name="IgorLeaveEnemyTest" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:MovementManager" ref="true" />
          <type api="T:Triggerable" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:IgorLeaveEnemyTest.useItems" />
        <element api="F:IgorLeaveEnemyTest.TriggerEnable" />
        <element api="F:IgorLeaveEnemyTest.igor" />
        <element api="F:IgorLeaveEnemyTest.jeve" />
        <element api="F:IgorLeaveEnemyTest.run" />
        <element api="F:IgorLeaveEnemyTest.skilTutorialDone" />
        <element api="M:IgorLeaveEnemyTest.Script" />
        <element api="M:IgorLeaveEnemyTest.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:IgorLeaveEnemyTest.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveEnemyTest" ref="true" />
      </containers>
    </api>
    <api id="F:IgorLeaveEnemyTest.igor">
      <apidata name="igor" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveEnemyTest" ref="true" />
      </containers>
    </api>
    <api id="F:IgorLeaveEnemyTest.jeve">
      <apidata name="jeve" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveEnemyTest" ref="true" />
      </containers>
    </api>
    <api id="F:IgorLeaveEnemyTest.run">
      <apidata name="run" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveEnemyTest" ref="true" />
      </containers>
    </api>
    <api id="M:IgorLeaveEnemyTest.Script">
      <apidata name="Script" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:MovementManager.Script">
          <type api="T:MovementManager" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveEnemyTest" ref="true" />
      </containers>
    </api>
    <api id="F:IgorLeaveEnemyTest.skilTutorialDone">
      <apidata name="skilTutorialDone" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveEnemyTest" ref="true" />
      </containers>
    </api>
    <api id="F:IgorLeaveEnemyTest.TriggerEnable">
      <apidata name="TriggerEnable" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveEnemyTest" ref="true" />
      </containers>
    </api>
    <api id="F:IgorLeaveEnemyTest.useItems">
      <apidata name="useItems" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:UnityEngine.GameObject" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveEnemyTest" ref="true" />
      </containers>
    </api>
    <api id="T:IgorLeaveIgorMaker">
      <apidata name="IgorLeaveIgorMaker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:MovementManager" ref="true" />
          <type api="T:Triggerable" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:IgorLeaveIgorMaker.jeve" />
        <element api="M:IgorLeaveIgorMaker.Script" />
        <element api="M:IgorLeaveIgorMaker.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:IgorLeaveIgorMaker.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveIgorMaker" ref="true" />
      </containers>
    </api>
    <api id="F:IgorLeaveIgorMaker.jeve">
      <apidata name="jeve" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveIgorMaker" ref="true" />
      </containers>
    </api>
    <api id="M:IgorLeaveIgorMaker.Script">
      <apidata name="Script" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:MovementManager.Script">
          <type api="T:MovementManager" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveIgorMaker" ref="true" />
      </containers>
    </api>
    <api id="T:IgorLeaveJump">
      <apidata name="IgorLeaveJump" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:MovementManager" ref="true" />
          <type api="T:Triggerable" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:IgorLeaveJump.igor" />
        <element api="F:IgorLeaveJump.jeve" />
        <element api="F:IgorLeaveJump.done" />
        <element api="F:IgorLeaveJump.run" />
        <element api="M:IgorLeaveJump.Script" />
        <element api="M:IgorLeaveJump.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:IgorLeaveJump.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveJump" ref="true" />
      </containers>
    </api>
    <api id="F:IgorLeaveJump.done">
      <apidata name="done" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveJump" ref="true" />
      </containers>
    </api>
    <api id="F:IgorLeaveJump.igor">
      <apidata name="igor" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveJump" ref="true" />
      </containers>
    </api>
    <api id="F:IgorLeaveJump.jeve">
      <apidata name="jeve" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveJump" ref="true" />
      </containers>
    </api>
    <api id="F:IgorLeaveJump.run">
      <apidata name="run" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveJump" ref="true" />
      </containers>
    </api>
    <api id="M:IgorLeaveJump.Script">
      <apidata name="Script" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:MovementManager.Script">
          <type api="T:MovementManager" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveJump" ref="true" />
      </containers>
    </api>
    <api id="T:IgorLeaveTutorial">
      <apidata name="IgorLeaveTutorial" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:MovementManager" ref="true" />
          <type api="T:Triggerable" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:IgorLeaveTutorial.useItems" />
        <element api="F:IgorLeaveTutorial.igor" />
        <element api="F:IgorLeaveTutorial.jeve" />
        <element api="M:IgorLeaveTutorial.Script" />
        <element api="M:IgorLeaveTutorial.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:IgorLeaveTutorial.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveTutorial" ref="true" />
      </containers>
    </api>
    <api id="F:IgorLeaveTutorial.igor">
      <apidata name="igor" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveTutorial" ref="true" />
      </containers>
    </api>
    <api id="F:IgorLeaveTutorial.jeve">
      <apidata name="jeve" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveTutorial" ref="true" />
      </containers>
    </api>
    <api id="M:IgorLeaveTutorial.Script">
      <apidata name="Script" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:MovementManager.Script">
          <type api="T:MovementManager" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveTutorial" ref="true" />
      </containers>
    </api>
    <api id="F:IgorLeaveTutorial.useItems">
      <apidata name="useItems" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:UnityEngine.GameObject" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgorLeaveTutorial" ref="true" />
      </containers>
    </api>
    <api id="T:IgotLeaveItemTest">
      <apidata name="IgotLeaveItemTest" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:MovementManager" ref="true" />
          <type api="T:Triggerable" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:IgotLeaveItemTest.useItems" />
        <element api="F:IgotLeaveItemTest.TriggerEnable" />
        <element api="F:IgotLeaveItemTest.igor" />
        <element api="F:IgotLeaveItemTest.jeve" />
        <element api="F:IgotLeaveItemTest.run" />
        <element api="M:IgotLeaveItemTest.Script" />
        <element api="M:IgotLeaveItemTest.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:IgotLeaveItemTest.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgotLeaveItemTest" ref="true" />
      </containers>
    </api>
    <api id="F:IgotLeaveItemTest.igor">
      <apidata name="igor" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgotLeaveItemTest" ref="true" />
      </containers>
    </api>
    <api id="F:IgotLeaveItemTest.jeve">
      <apidata name="jeve" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgotLeaveItemTest" ref="true" />
      </containers>
    </api>
    <api id="F:IgotLeaveItemTest.run">
      <apidata name="run" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgotLeaveItemTest" ref="true" />
      </containers>
    </api>
    <api id="M:IgotLeaveItemTest.Script">
      <apidata name="Script" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:MovementManager.Script">
          <type api="T:MovementManager" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgotLeaveItemTest" ref="true" />
      </containers>
    </api>
    <api id="F:IgotLeaveItemTest.TriggerEnable">
      <apidata name="TriggerEnable" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgotLeaveItemTest" ref="true" />
      </containers>
    </api>
    <api id="F:IgotLeaveItemTest.useItems">
      <apidata name="useItems" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:UnityEngine.GameObject" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IgotLeaveItemTest" ref="true" />
      </containers>
    </api>
    <api id="T:IHitable">
      <apidata name="IHitable" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" layout="auto" format="ansi" />
      <implementors>
        <type api="T:CommonEntity" ref="true" />
      </implementors>
      <elements>
        <element api="M:IHitable.TakeDamage(System.Single)" />
        <element api="M:IHitable.TakeDamageOverTime(System.Single,System.Single,System.Single)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:IHitable.TakeDamage(System.Single)">
      <apidata name="TakeDamage" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="hp">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IHitable" ref="true" />
      </containers>
    </api>
    <api id="M:IHitable.TakeDamageOverTime(System.Single,System.Single,System.Single)">
      <apidata name="TakeDamageOverTime" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="damagePerInterval">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="interval">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="seconds">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IHitable" ref="true" />
      </containers>
    </api>
    <api id="T:IInvItem">
      <apidata name="IInvItem" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" layout="auto" format="ansi" />
      <implementors>
        <type api="T:Prism.InvItem" ref="true">
          <type api="T:Prism" ref="true" />
        </type>
        <type api="T:Coil.InvItem" ref="true">
          <type api="T:Coil" ref="true" />
        </type>
        <type api="T:EnergyCapsule.InvEnergyCapsule" ref="true">
          <type api="T:EnergyCapsule" ref="true" />
        </type>
        <type api="T:Fan.InvItem" ref="true">
          <type api="T:Fan" ref="true" />
        </type>
        <type api="T:RepairKit.InvRepairKit" ref="true">
          <type api="T:RepairKit" ref="true" />
        </type>
        <type api="T:Spring.InvItem" ref="true">
          <type api="T:Spring" ref="true" />
        </type>
        <type api="T:USBStick.InvItem" ref="true">
          <type api="T:USBStick" ref="true" />
        </type>
      </implementors>
      <elements>
        <element api="M:IInvItem.GetDisplayName" />
        <element api="M:IInvItem.GetMaxStackSize" />
        <element api="M:IInvItem.Drop" />
        <element api="M:IInvItem.Use(UnityEngine.GameObject)" />
        <element api="M:IInvItem.Combinable(IInvItem)" />
        <element api="M:IInvItem.Combine(IInvItem)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:IInvItem.Combinable(IInvItem)">
      <apidata name="Combinable" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="other">
          <type api="T:IInvItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IInvItem" ref="true" />
      </containers>
    </api>
    <api id="M:IInvItem.Combine(IInvItem)">
      <apidata name="Combine" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="other">
          <type api="T:IInvItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:IInvItem" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IInvItem" ref="true" />
      </containers>
    </api>
    <api id="M:IInvItem.Drop">
      <apidata name="Drop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IInvItem" ref="true" />
      </containers>
    </api>
    <api id="M:IInvItem.GetDisplayName">
      <apidata name="GetDisplayName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IInvItem" ref="true" />
      </containers>
    </api>
    <api id="M:IInvItem.GetMaxStackSize">
      <apidata name="GetMaxStackSize" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IInvItem" ref="true" />
      </containers>
    </api>
    <api id="M:IInvItem.Use(UnityEngine.GameObject)">
      <apidata name="Use" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="entity">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IInvItem" ref="true" />
      </containers>
    </api>
    <api id="T:IntroCutscene">
      <apidata name="IntroCutscene" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:MovementManager" ref="true" />
          <type api="T:Triggerable" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:IntroCutscene.text1" />
        <element api="F:IntroCutscene.text2" />
        <element api="F:IntroCutscene.usedCamera" />
        <element api="F:IntroCutscene.cameraTarget" />
        <element api="F:IntroCutscene.gil" />
        <element api="F:IntroCutscene.igor" />
        <element api="F:IntroCutscene.jeve" />
        <element api="M:IntroCutscene.Script" />
        <element api="M:IntroCutscene.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:IntroCutscene.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IntroCutscene" ref="true" />
      </containers>
    </api>
    <api id="F:IntroCutscene.cameraTarget">
      <apidata name="cameraTarget" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IntroCutscene" ref="true" />
      </containers>
    </api>
    <api id="F:IntroCutscene.gil">
      <apidata name="gil" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IntroCutscene" ref="true" />
      </containers>
    </api>
    <api id="F:IntroCutscene.igor">
      <apidata name="igor" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IntroCutscene" ref="true" />
      </containers>
    </api>
    <api id="F:IntroCutscene.jeve">
      <apidata name="jeve" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IntroCutscene" ref="true" />
      </containers>
    </api>
    <api id="M:IntroCutscene.Script">
      <apidata name="Script" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:MovementManager.Script">
          <type api="T:MovementManager" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IntroCutscene" ref="true" />
      </containers>
    </api>
    <api id="F:IntroCutscene.text1">
      <apidata name="text1" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IntroCutscene" ref="true" />
      </containers>
    </api>
    <api id="F:IntroCutscene.text2">
      <apidata name="text2" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IntroCutscene" ref="true" />
      </containers>
    </api>
    <api id="F:IntroCutscene.usedCamera">
      <apidata name="usedCamera" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IntroCutscene" ref="true" />
      </containers>
    </api>
    <api id="T:Inventory">
      <apidata name="Inventory" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Inventory.itemIconCache" />
        <element api="F:Inventory.items" />
        <element api="F:Inventory.visible" />
        <element api="F:Inventory.collectionSound" />
        <element api="F:Inventory.scrollPos" />
        <element api="F:Inventory.controllerPos" />
        <element api="F:Inventory.mousePos" />
        <element api="F:Inventory.cooldown" />
        <element api="M:Inventory.GetTextureForItem(System.String)" />
        <element api="M:Inventory.#ctor" />
        <element api="M:Inventory.Awake" />
        <element api="M:Inventory.Update" />
        <element api="M:Inventory.OnTriggerEnter(UnityEngine.Collider)" />
        <element api="M:Inventory.SetShow(System.Boolean)" />
        <element api="M:Inventory.OnGUI" />
        <element api="M:Inventory.InsertItem(IInvItem)" />
        <element api="M:Inventory.DrawInventory" />
        <element api="M:Inventory.DrawButton(System.Int32,System.Int32)" />
        <element api="M:Inventory.InventoryClear" />
        <element api="M:Inventory.FillInventoryFromSaveData(System.Collections.ArrayList)" />
        <element api="M:Inventory.HasItem(System.String)" />
        <element api="M:Inventory.CountItem(System.String)" />
        <element api="M:Inventory.UseItem(System.String)" />
        <element api="M:Inventory.RemoveItem(System.String)" />
        <element api="M:Inventory.GetItemList" />
        <element api="M:Inventory.#cctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Inventory.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="M:Inventory.#cctor">
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="M:Inventory.Awake">
      <apidata name="Awake" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="F:Inventory.collectionSound">
      <apidata name="collectionSound" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.AudioClip" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="F:Inventory.controllerPos">
      <apidata name="controllerPos" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="F:Inventory.cooldown">
      <apidata name="cooldown" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="M:Inventory.CountItem(System.String)">
      <apidata name="CountItem" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="itemName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="M:Inventory.DrawButton(System.Int32,System.Int32)">
      <apidata name="DrawButton" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="num">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="perRow">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="M:Inventory.DrawInventory">
      <apidata name="DrawInventory" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="M:Inventory.FillInventoryFromSaveData(System.Collections.ArrayList)">
      <apidata name="FillInventoryFromSaveData" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="list">
          <type api="T:System.Collections.ArrayList" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="M:Inventory.GetItemList">
      <apidata name="GetItemList" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="M:Inventory.GetTextureForItem(System.String)">
      <apidata name="GetTextureForItem" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="itemName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="M:Inventory.HasItem(System.String)">
      <apidata name="HasItem" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="itemName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="M:Inventory.InsertItem(IInvItem)">
      <apidata name="InsertItem" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="item">
          <type api="T:IInvItem" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="M:Inventory.InventoryClear">
      <apidata name="InventoryClear" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="F:Inventory.itemIconCache">
      <apidata name="itemIconCache" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:UnityEngine.Texture2D" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="F:Inventory.items">
      <apidata name="items" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.ArrayList" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="F:Inventory.mousePos">
      <apidata name="mousePos" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="M:Inventory.OnGUI">
      <apidata name="OnGUI" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="M:Inventory.OnTriggerEnter(UnityEngine.Collider)">
      <apidata name="OnTriggerEnter" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="other">
          <type api="T:UnityEngine.Collider" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="M:Inventory.RemoveItem(System.String)">
      <apidata name="RemoveItem" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="itemName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="F:Inventory.scrollPos">
      <apidata name="scrollPos" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector2" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="M:Inventory.SetShow(System.Boolean)">
      <apidata name="SetShow" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="show">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="M:Inventory.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="M:Inventory.UseItem(System.String)">
      <apidata name="UseItem" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="itemName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="F:Inventory.visible">
      <apidata name="visible" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="T:Inventory.InventoryItem">
      <apidata name="InventoryItem" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Inventory.InventoryItem.texture" />
        <element api="F:Inventory.InventoryItem.instance" />
        <element api="F:Inventory.InventoryItem.stackS" />
        <element api="M:Inventory.InventoryItem.#ctor(IInvItem,System.Int32)" />
        <element api="M:Inventory.InventoryItem.Stack(IInvItem)" />
        <element api="M:Inventory.InventoryItem.Remove" />
        <element api="M:Inventory.InventoryItem.Use(UnityEngine.GameObject)" />
        <element api="M:Inventory.InventoryItem.GetDrawable" />
        <element api="P:Inventory.InventoryItem.DisplayName" />
        <element api="P:Inventory.InventoryItem.StackSize" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory" ref="true" />
      </containers>
    </api>
    <api id="M:Inventory.InventoryItem.#ctor(IInvItem,System.Int32)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="item">
          <type api="T:IInvItem" ref="true" />
        </parameter>
        <parameter name="initialStackSize">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory.InventoryItem" ref="true">
          <type api="T:Inventory" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:Inventory.InventoryItem.DisplayName">
      <apidata name="DisplayName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_DisplayName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory.InventoryItem" ref="true">
          <type api="T:Inventory" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Inventory.InventoryItem.GetDrawable">
      <apidata name="GetDrawable" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory.InventoryItem" ref="true">
          <type api="T:Inventory" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Inventory.InventoryItem.instance">
      <apidata name="instance" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:IInvItem" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory.InventoryItem" ref="true">
          <type api="T:Inventory" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Inventory.InventoryItem.Remove">
      <apidata name="Remove" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory.InventoryItem" ref="true">
          <type api="T:Inventory" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Inventory.InventoryItem.Stack(IInvItem)">
      <apidata name="Stack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="item">
          <type api="T:IInvItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory.InventoryItem" ref="true">
          <type api="T:Inventory" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Inventory.InventoryItem.stackS">
      <apidata name="stackS" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory.InventoryItem" ref="true">
          <type api="T:Inventory" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:Inventory.InventoryItem.StackSize">
      <apidata name="StackSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_StackSize" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory.InventoryItem" ref="true">
          <type api="T:Inventory" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Inventory.InventoryItem.texture">
      <apidata name="texture" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory.InventoryItem" ref="true">
          <type api="T:Inventory" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Inventory.InventoryItem.Use(UnityEngine.GameObject)">
      <apidata name="Use" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="entity">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Inventory.InventoryItem" ref="true">
          <type api="T:Inventory" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:IPauseHandler">
      <apidata name="IPauseHandler" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" layout="auto" format="ansi" />
      <elements>
        <element api="M:IPauseHandler.PauseStateChanged" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:IPauseHandler.PauseStateChanged">
      <apidata name="PauseStateChanged" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IPauseHandler" ref="true" />
      </containers>
    </api>
    <api id="T:ISkill">
      <apidata name="ISkill" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" layout="auto" format="ansi" />
      <implementors>
        <type api="T:BaseSkill" ref="true" />
      </implementors>
      <elements>
        <element api="M:ISkill.GetName" />
        <element api="M:ISkill.GetIconTexture" />
        <element api="M:ISkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)" />
        <element api="M:ISkill.OnUseWithoutMana(UnityEngine.GameObject,Igor,System.Int32)" />
        <element api="M:ISkill.OnLevelChange(UnityEngine.GameObject,Igor,System.Int32)" />
        <element api="M:ISkill.IsPassive" />
        <element api="M:ISkill.GetCooldown(System.Int32)" />
        <element api="M:ISkill.GetNeededEnergy(System.Int32)" />
        <element api="M:ISkill.GetNeededSkills" />
        <element api="M:ISkill.GetNeededItems" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ISkill.GetCooldown(System.Int32)">
      <apidata name="GetCooldown" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ISkill" ref="true" />
      </containers>
    </api>
    <api id="M:ISkill.GetIconTexture">
      <apidata name="GetIconTexture" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ISkill" ref="true" />
      </containers>
    </api>
    <api id="M:ISkill.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ISkill" ref="true" />
      </containers>
    </api>
    <api id="M:ISkill.GetNeededEnergy(System.Int32)">
      <apidata name="GetNeededEnergy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ISkill" ref="true" />
      </containers>
    </api>
    <api id="M:ISkill.GetNeededItems">
      <apidata name="GetNeededItems" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ISkill" ref="true" />
      </containers>
    </api>
    <api id="M:ISkill.GetNeededSkills">
      <apidata name="GetNeededSkills" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ISkill" ref="true" />
      </containers>
    </api>
    <api id="M:ISkill.IsPassive">
      <apidata name="IsPassive" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ISkill" ref="true" />
      </containers>
    </api>
    <api id="M:ISkill.OnLevelChange(UnityEngine.GameObject,Igor,System.Int32)">
      <apidata name="OnLevelChange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="igorInstance">
          <type api="T:Igor" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ISkill" ref="true" />
      </containers>
    </api>
    <api id="M:ISkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
      <apidata name="OnUse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="igorInstance">
          <type api="T:Igor" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ISkill" ref="true" />
      </containers>
    </api>
    <api id="M:ISkill.OnUseWithoutMana(UnityEngine.GameObject,Igor,System.Int32)">
      <apidata name="OnUseWithoutMana" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="igorInstance">
          <type api="T:Igor" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ISkill" ref="true" />
      </containers>
    </api>
    <api id="T:ItemDropper">
      <apidata name="ItemDropper" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:ItemDropper.CommonItemChance" />
        <element api="F:ItemDropper.RareItemChance" />
        <element api="F:ItemDropper.microchipPrefab" />
        <element api="F:ItemDropper.commonItemNames" />
        <element api="F:ItemDropper.rareItemNames" />
        <element api="F:ItemDropper.dropData" />
        <element api="F:ItemDropper.dynamicDropChances" />
        <element api="M:ItemDropper.DropMicrochip(UnityEngine.Transform)" />
        <element api="M:ItemDropper.DropItem(UnityEngine.Transform,System.String)" />
        <element api="M:ItemDropper.DropItemOfType(UnityEngine.Transform,System.String)" />
        <element api="M:ItemDropper.DynamicDrop(UnityEngine.Transform,System.Single)" />
        <element api="M:ItemDropper.#cctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ItemDropper.#cctor">
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ItemDropper" ref="true" />
      </containers>
    </api>
    <api id="F:ItemDropper.CommonItemChance">
      <apidata name="CommonItemChance" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ItemDropper" ref="true" />
      </containers>
    </api>
    <api id="F:ItemDropper.commonItemNames">
      <apidata name="commonItemNames" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ItemDropper" ref="true" />
      </containers>
    </api>
    <api id="F:ItemDropper.dropData">
      <apidata name="dropData" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:ItemDropper.ItemDropData" ref="true">
                  <type api="T:ItemDropper" ref="true" />
                </type>
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ItemDropper" ref="true" />
      </containers>
    </api>
    <api id="M:ItemDropper.DropItem(UnityEngine.Transform,System.String)">
      <apidata name="DropItem" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="transform">
          <type api="T:UnityEngine.Transform" ref="true" />
        </parameter>
        <parameter name="prefabName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ItemDropper" ref="true" />
      </containers>
    </api>
    <api id="M:ItemDropper.DropItemOfType(UnityEngine.Transform,System.String)">
      <apidata name="DropItemOfType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="transform">
          <type api="T:UnityEngine.Transform" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ItemDropper" ref="true" />
      </containers>
    </api>
    <api id="M:ItemDropper.DropMicrochip(UnityEngine.Transform)">
      <apidata name="DropMicrochip" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="transform">
          <type api="T:UnityEngine.Transform" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ItemDropper" ref="true" />
      </containers>
    </api>
    <api id="M:ItemDropper.DynamicDrop(UnityEngine.Transform,System.Single)">
      <apidata name="DynamicDrop" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="transform">
          <type api="T:UnityEngine.Transform" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ItemDropper" ref="true" />
      </containers>
    </api>
    <api id="F:ItemDropper.dynamicDropChances">
      <apidata name="dynamicDropChances" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.Single" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ItemDropper" ref="true" />
      </containers>
    </api>
    <api id="F:ItemDropper.microchipPrefab">
      <apidata name="microchipPrefab" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ItemDropper" ref="true" />
      </containers>
    </api>
    <api id="F:ItemDropper.RareItemChance">
      <apidata name="RareItemChance" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ItemDropper" ref="true" />
      </containers>
    </api>
    <api id="F:ItemDropper.rareItemNames">
      <apidata name="rareItemNames" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ItemDropper" ref="true" />
      </containers>
    </api>
    <api id="T:ItemDropper.ItemDropData">
      <apidata name="ItemDropData" group="type" subgroup="class" />
      <typedata visibility="private" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:ItemDropper.ItemDropData.prefab" />
        <element api="F:ItemDropper.ItemDropData.actuality" />
        <element api="M:ItemDropper.ItemDropData.#ctor(UnityEngine.GameObject)" />
        <element api="M:ItemDropper.ItemDropData.Degenerate" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ItemDropper" ref="true" />
      </containers>
    </api>
    <api id="M:ItemDropper.ItemDropData.#ctor(UnityEngine.GameObject)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_prefab">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ItemDropper.ItemDropData" ref="true">
          <type api="T:ItemDropper" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:ItemDropper.ItemDropData.actuality">
      <apidata name="actuality" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ItemDropper.ItemDropData" ref="true">
          <type api="T:ItemDropper" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:ItemDropper.ItemDropData.Degenerate">
      <apidata name="Degenerate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ItemDropper.ItemDropData" ref="true">
          <type api="T:ItemDropper" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:ItemDropper.ItemDropData.prefab">
      <apidata name="prefab" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ItemDropper.ItemDropData" ref="true">
          <type api="T:ItemDropper" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:ITrigger">
      <apidata name="ITrigger" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" layout="auto" format="ansi" />
      <implements>
        <type api="T:IUsable" ref="true" />
      </implements>
      <implementors>
        <type api="T:DestructionTrigger" ref="true" />
        <type api="T:FloorTrigger" ref="true" />
        <type api="T:SwitchTrigger" ref="true" />
      </implementors>
      <elements>
        <element api="M:ITrigger.AddTriggerable(Triggerable)" />
        <element api="M:ITrigger.IsTriggered" />
        <element api="M:ITrigger.SetOneShotTrigger(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:ITrigger.AddTriggerable(Triggerable)">
      <apidata name="AddTriggerable" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="triggerable">
          <type api="T:Triggerable" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ITrigger" ref="true" />
      </containers>
    </api>
    <api id="M:ITrigger.IsTriggered">
      <apidata name="IsTriggered" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ITrigger" ref="true" />
      </containers>
    </api>
    <api id="M:ITrigger.SetOneShotTrigger(System.Boolean)">
      <apidata name="SetOneShotTrigger" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="makeOneShotTrigger">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:ITrigger" ref="true" />
      </containers>
    </api>
    <api id="T:IUsable">
      <apidata name="IUsable" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" layout="auto" format="ansi" />
      <implementors>
        <type api="T:Chest" ref="true" />
        <type api="T:ITrigger" ref="true" />
        <type api="T:DestructionTrigger" ref="true" />
        <type api="T:FloorTrigger" ref="true" />
        <type api="T:PushableBox" ref="true" />
        <type api="T:SwitchTrigger" ref="true" />
      </implementors>
      <elements>
        <element api="M:IUsable.OnUse(UnityEngine.GameObject)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:IUsable.OnUse(UnityEngine.GameObject)">
      <apidata name="OnUse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:IUsable" ref="true" />
      </containers>
    </api>
    <api id="T:JeveAndIgor">
      <apidata name="JeveAndIgor" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:MovementManager" ref="true" />
          <type api="T:Triggerable" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:JeveAndIgor.pictures" />
        <element api="M:JeveAndIgor.Script" />
        <element api="M:JeveAndIgor.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:JeveAndIgor.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveAndIgor" ref="true" />
      </containers>
    </api>
    <api id="F:JeveAndIgor.pictures">
      <apidata name="pictures" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:UnityEngine.GameObject" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveAndIgor" ref="true" />
      </containers>
    </api>
    <api id="M:JeveAndIgor.Script">
      <apidata name="Script" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:MovementManager.Script">
          <type api="T:MovementManager" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveAndIgor" ref="true" />
      </containers>
    </api>
    <api id="T:JeveDie">
      <apidata name="JeveDie" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:MovementManager" ref="true" />
          <type api="T:Triggerable" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:JeveDie.spark" />
        <element api="F:JeveDie.hitEffect" />
        <element api="F:JeveDie.jeveDead" />
        <element api="F:JeveDie.explosion" />
        <element api="F:JeveDie.cam" />
        <element api="F:JeveDie.siren" />
        <element api="F:JeveDie.enemyText4" />
        <element api="F:JeveDie.enemyText3" />
        <element api="F:JeveDie.enemyText2" />
        <element api="F:JeveDie.enemyText1" />
        <element api="F:JeveDie.fatalError" />
        <element api="F:JeveDie.booting" />
        <element api="F:JeveDie.errorScreen" />
        <element api="F:JeveDie.robot" />
        <element api="F:JeveDie.igor" />
        <element api="F:JeveDie.jeve" />
        <element api="M:JeveDie.Script" />
        <element api="M:JeveDie.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:JeveDie.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveDie" ref="true" />
      </containers>
    </api>
    <api id="F:JeveDie.booting">
      <apidata name="booting" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveDie" ref="true" />
      </containers>
    </api>
    <api id="F:JeveDie.cam">
      <apidata name="cam" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveDie" ref="true" />
      </containers>
    </api>
    <api id="F:JeveDie.enemyText1">
      <apidata name="enemyText1" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveDie" ref="true" />
      </containers>
    </api>
    <api id="F:JeveDie.enemyText2">
      <apidata name="enemyText2" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveDie" ref="true" />
      </containers>
    </api>
    <api id="F:JeveDie.enemyText3">
      <apidata name="enemyText3" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveDie" ref="true" />
      </containers>
    </api>
    <api id="F:JeveDie.enemyText4">
      <apidata name="enemyText4" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveDie" ref="true" />
      </containers>
    </api>
    <api id="F:JeveDie.errorScreen">
      <apidata name="errorScreen" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveDie" ref="true" />
      </containers>
    </api>
    <api id="F:JeveDie.explosion">
      <apidata name="explosion" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveDie" ref="true" />
      </containers>
    </api>
    <api id="F:JeveDie.fatalError">
      <apidata name="fatalError" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveDie" ref="true" />
      </containers>
    </api>
    <api id="F:JeveDie.hitEffect">
      <apidata name="hitEffect" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveDie" ref="true" />
      </containers>
    </api>
    <api id="F:JeveDie.igor">
      <apidata name="igor" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveDie" ref="true" />
      </containers>
    </api>
    <api id="F:JeveDie.jeve">
      <apidata name="jeve" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveDie" ref="true" />
      </containers>
    </api>
    <api id="F:JeveDie.jeveDead">
      <apidata name="jeveDead" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveDie" ref="true" />
      </containers>
    </api>
    <api id="F:JeveDie.robot">
      <apidata name="robot" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveDie" ref="true" />
      </containers>
    </api>
    <api id="M:JeveDie.Script">
      <apidata name="Script" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:MovementManager.Script">
          <type api="T:MovementManager" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveDie" ref="true" />
      </containers>
    </api>
    <api id="F:JeveDie.siren">
      <apidata name="siren" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveDie" ref="true" />
      </containers>
    </api>
    <api id="F:JeveDie.spark">
      <apidata name="spark" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:JeveDie" ref="true" />
      </containers>
    </api>
    <api id="T:LaserAttack">
      <apidata name="LaserAttack" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:BaseSkill" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:PrismAttack" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="F:LaserAttack.projectilePrefab" />
        <element api="F:LaserAttack.sound" />
        <element api="F:LaserAttack.animationDuration" />
        <element api="F:LaserAttack.initialLaserDamage" />
        <element api="M:LaserAttack.Start" />
        <element api="M:LaserAttack.GetName" />
        <element api="M:LaserAttack.GetNeededSkills" />
        <element api="M:LaserAttack.OnUse(UnityEngine.GameObject,Igor,System.Int32)" />
        <element api="M:LaserAttack.GetCooldown(System.Int32)" />
        <element api="M:LaserAttack.GetNeededEnergy(System.Int32)" />
        <element api="M:LaserAttack.AttackCooldownAnimation(CommonEntity,System.Int32)" />
        <element api="M:LaserAttack.SpawnProjectiles(CommonEntity,System.Int32)" />
        <element api="M:LaserAttack.SpawnProjectile(CommonEntity,System.Single,System.Single,System.Single)" />
        <element api="M:LaserAttack.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:LaserAttack.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LaserAttack" ref="true" />
      </containers>
    </api>
    <api id="F:LaserAttack.animationDuration">
      <apidata name="animationDuration" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LaserAttack" ref="true" />
      </containers>
    </api>
    <api id="M:LaserAttack.AttackCooldownAnimation(CommonEntity,System.Int32)">
      <apidata name="AttackCooldownAnimation" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="ce">
          <type api="T:CommonEntity" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LaserAttack" ref="true" />
      </containers>
    </api>
    <api id="M:LaserAttack.GetCooldown(System.Int32)">
      <apidata name="GetCooldown" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetCooldown(System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetCooldown(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LaserAttack" ref="true" />
      </containers>
    </api>
    <api id="M:LaserAttack.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetName">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:ISkill.GetName">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LaserAttack" ref="true" />
      </containers>
    </api>
    <api id="M:LaserAttack.GetNeededEnergy(System.Int32)">
      <apidata name="GetNeededEnergy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededEnergy(System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededEnergy(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LaserAttack" ref="true" />
      </containers>
    </api>
    <api id="M:LaserAttack.GetNeededSkills">
      <apidata name="GetNeededSkills" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededSkills">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededSkills">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LaserAttack" ref="true" />
      </containers>
    </api>
    <api id="F:LaserAttack.initialLaserDamage">
      <apidata name="initialLaserDamage" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LaserAttack" ref="true" />
      </containers>
    </api>
    <api id="M:LaserAttack.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
      <apidata name="OnUse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="igorInstance">
          <type api="T:Igor" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LaserAttack" ref="true" />
      </containers>
    </api>
    <api id="F:LaserAttack.projectilePrefab">
      <apidata name="projectilePrefab" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LaserAttack" ref="true" />
      </containers>
    </api>
    <api id="F:LaserAttack.sound">
      <apidata name="sound" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.AudioClip" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LaserAttack" ref="true" />
      </containers>
    </api>
    <api id="M:LaserAttack.SpawnProjectile(CommonEntity,System.Single,System.Single,System.Single)">
      <apidata name="SpawnProjectile" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="ce">
          <type api="T:CommonEntity" ref="true" />
        </parameter>
        <parameter name="damage">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="horizontalAngle" optional="true">
          <type api="T:System.Single" ref="false" />
          <argument>
            <type api="T:System.Single" ref="false" />
            <value>0</value>
          </argument>
        </parameter>
        <parameter name="verticalAngle" optional="true">
          <type api="T:System.Single" ref="false" />
          <argument>
            <type api="T:System.Single" ref="false" />
            <value>0</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LaserAttack" ref="true" />
      </containers>
    </api>
    <api id="M:LaserAttack.SpawnProjectiles(CommonEntity,System.Int32)">
      <apidata name="SpawnProjectiles" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="ce">
          <type api="T:CommonEntity" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LaserAttack" ref="true" />
      </containers>
    </api>
    <api id="M:LaserAttack.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LaserAttack" ref="true" />
      </containers>
    </api>
    <api id="T:LeaveLevel1">
      <apidata name="LeaveLevel1" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:MovementManager" ref="true" />
          <type api="T:Triggerable" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:LeaveLevel1.igor" />
        <element api="F:LeaveLevel1.console" />
        <element api="M:LeaveLevel1.Script" />
        <element api="M:LeaveLevel1.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:LeaveLevel1.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LeaveLevel1" ref="true" />
      </containers>
    </api>
    <api id="F:LeaveLevel1.console">
      <apidata name="console" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LeaveLevel1" ref="true" />
      </containers>
    </api>
    <api id="F:LeaveLevel1.igor">
      <apidata name="igor" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LeaveLevel1" ref="true" />
      </containers>
    </api>
    <api id="M:LeaveLevel1.Script">
      <apidata name="Script" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:MovementManager.Script">
          <type api="T:MovementManager" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LeaveLevel1" ref="true" />
      </containers>
    </api>
    <api id="T:Lightning">
      <apidata name="Lightning" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Lightning.fromTransform" />
        <element api="F:Lightning.fromPosition" />
        <element api="F:Lightning.toTransform" />
        <element api="F:Lightning.toPosition" />
        <element api="F:Lightning.intermediatePoints" />
        <element api="F:Lightning.material" />
        <element api="F:Lightning.lineRenderer" />
        <element api="F:Lightning.points" />
        <element api="F:Lightning.speed" />
        <element api="F:Lightning.randomRange" />
        <element api="M:Lightning.Start" />
        <element api="M:Lightning.Update" />
        <element api="M:Lightning.OnDisable" />
        <element api="M:Lightning.OnEnable" />
        <element api="M:Lightning.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Lightning.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Lightning" ref="true" />
      </containers>
    </api>
    <api id="F:Lightning.fromPosition">
      <apidata name="fromPosition" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Lightning" ref="true" />
      </containers>
    </api>
    <api id="F:Lightning.fromTransform">
      <apidata name="fromTransform" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Transform" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Lightning" ref="true" />
      </containers>
    </api>
    <api id="F:Lightning.intermediatePoints">
      <apidata name="intermediatePoints" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Lightning" ref="true" />
      </containers>
    </api>
    <api id="F:Lightning.lineRenderer">
      <apidata name="lineRenderer" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.LineRenderer" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Lightning" ref="true" />
      </containers>
    </api>
    <api id="F:Lightning.material">
      <apidata name="material" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Material" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Lightning" ref="true" />
      </containers>
    </api>
    <api id="M:Lightning.OnDisable">
      <apidata name="OnDisable" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Lightning" ref="true" />
      </containers>
    </api>
    <api id="M:Lightning.OnEnable">
      <apidata name="OnEnable" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Lightning" ref="true" />
      </containers>
    </api>
    <api id="F:Lightning.points">
      <apidata name="points" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <arrayOf rank="1">
          <type api="T:UnityEngine.Vector3" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Lightning" ref="true" />
      </containers>
    </api>
    <api id="F:Lightning.randomRange">
      <apidata name="randomRange" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Lightning" ref="true" />
      </containers>
    </api>
    <api id="F:Lightning.speed">
      <apidata name="speed" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Lightning" ref="true" />
      </containers>
    </api>
    <api id="M:Lightning.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Lightning" ref="true" />
      </containers>
    </api>
    <api id="F:Lightning.toPosition">
      <apidata name="toPosition" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Lightning" ref="true" />
      </containers>
    </api>
    <api id="F:Lightning.toTransform">
      <apidata name="toTransform" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Transform" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Lightning" ref="true" />
      </containers>
    </api>
    <api id="M:Lightning.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Lightning" ref="true" />
      </containers>
    </api>
    <api id="T:LightningAttack">
      <apidata name="LightningAttack" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:BaseSkill" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:LightningAttack.lightningPrefab" />
        <element api="F:LightningAttack.lightningMissPrefab" />
        <element api="F:LightningAttack.sound" />
        <element api="F:LightningAttack.animationDuration" />
        <element api="F:LightningAttack.initialDamage" />
        <element api="F:LightningAttack.initialRange" />
        <element api="M:LightningAttack.GetDamage(System.Int32)" />
        <element api="M:LightningAttack.GetRange(System.Int32)" />
        <element api="M:LightningAttack.GetName" />
        <element api="M:LightningAttack.GetNeededSkills" />
        <element api="M:LightningAttack.GetNeededItems" />
        <element api="M:LightningAttack.OnUse(UnityEngine.GameObject,Igor,System.Int32)" />
        <element api="M:LightningAttack.GetCooldown(System.Int32)" />
        <element api="M:LightningAttack.GetNeededEnergy(System.Int32)" />
        <element api="M:LightningAttack.AttackCooldownAnimation(CommonEntity,System.Int32)" />
        <element api="M:LightningAttack.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:LightningAttack.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LightningAttack" ref="true" />
      </containers>
    </api>
    <api id="F:LightningAttack.animationDuration">
      <apidata name="animationDuration" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LightningAttack" ref="true" />
      </containers>
    </api>
    <api id="M:LightningAttack.AttackCooldownAnimation(CommonEntity,System.Int32)">
      <apidata name="AttackCooldownAnimation" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="ce">
          <type api="T:CommonEntity" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LightningAttack" ref="true" />
      </containers>
    </api>
    <api id="M:LightningAttack.GetCooldown(System.Int32)">
      <apidata name="GetCooldown" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetCooldown(System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetCooldown(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LightningAttack" ref="true" />
      </containers>
    </api>
    <api id="M:LightningAttack.GetDamage(System.Int32)">
      <apidata name="GetDamage" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LightningAttack" ref="true" />
      </containers>
    </api>
    <api id="M:LightningAttack.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetName">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:ISkill.GetName">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LightningAttack" ref="true" />
      </containers>
    </api>
    <api id="M:LightningAttack.GetNeededEnergy(System.Int32)">
      <apidata name="GetNeededEnergy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededEnergy(System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededEnergy(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LightningAttack" ref="true" />
      </containers>
    </api>
    <api id="M:LightningAttack.GetNeededItems">
      <apidata name="GetNeededItems" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededItems">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededItems">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LightningAttack" ref="true" />
      </containers>
    </api>
    <api id="M:LightningAttack.GetNeededSkills">
      <apidata name="GetNeededSkills" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededSkills">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededSkills">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LightningAttack" ref="true" />
      </containers>
    </api>
    <api id="M:LightningAttack.GetRange(System.Int32)">
      <apidata name="GetRange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LightningAttack" ref="true" />
      </containers>
    </api>
    <api id="F:LightningAttack.initialDamage">
      <apidata name="initialDamage" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LightningAttack" ref="true" />
      </containers>
    </api>
    <api id="F:LightningAttack.initialRange">
      <apidata name="initialRange" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LightningAttack" ref="true" />
      </containers>
    </api>
    <api id="F:LightningAttack.lightningMissPrefab">
      <apidata name="lightningMissPrefab" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LightningAttack" ref="true" />
      </containers>
    </api>
    <api id="F:LightningAttack.lightningPrefab">
      <apidata name="lightningPrefab" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LightningAttack" ref="true" />
      </containers>
    </api>
    <api id="M:LightningAttack.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
      <apidata name="OnUse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="igorInstance">
          <type api="T:Igor" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LightningAttack" ref="true" />
      </containers>
    </api>
    <api id="F:LightningAttack.sound">
      <apidata name="sound" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.AudioClip" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LightningAttack" ref="true" />
      </containers>
    </api>
    <api id="T:LightningSourceMarker">
      <apidata name="LightningSourceMarker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:LightningSourceMarker.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:LightningSourceMarker.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LightningSourceMarker" ref="true" />
      </containers>
    </api>
    <api id="T:LittleFightingRobot">
      <apidata name="LittleFightingRobot" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:EnemyAI" ref="true" />
          <type api="T:CommonEntity" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:LittleFightingRobot.explosionPrefab" />
        <element api="F:LittleFightingRobot.smoke" />
        <element api="F:LittleFightingRobot.smokePrefab" />
        <element api="F:LittleFightingRobot.projectilePrefab" />
        <element api="F:LittleFightingRobot.projectileShotAudioClip" />
        <element api="F:LittleFightingRobot.lastPosition" />
        <element api="F:LittleFightingRobot.animator" />
        <element api="M:LittleFightingRobot.Start" />
        <element api="M:LittleFightingRobot.Update" />
        <element api="M:LittleFightingRobot.OnRangeAttack" />
        <element api="M:LittleFightingRobot.TakeRangeAttack" />
        <element api="M:LittleFightingRobot.Die" />
        <element api="M:LittleFightingRobot.Destruct" />
        <element api="M:LittleFightingRobot.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:LittleFightingRobot.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LittleFightingRobot" ref="true" />
      </containers>
    </api>
    <api id="F:LittleFightingRobot.animator">
      <apidata name="animator" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Animator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LittleFightingRobot" ref="true" />
      </containers>
    </api>
    <api id="M:LittleFightingRobot.Destruct">
      <apidata name="Destruct" group="member" subgroup="method" />
      <memberdata visibility="assembly" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:EnemyAI.Destruct">
          <type api="T:EnemyAI" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LittleFightingRobot" ref="true" />
      </containers>
    </api>
    <api id="M:LittleFightingRobot.Die">
      <apidata name="Die" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:EnemyAI.Die">
          <type api="T:EnemyAI" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LittleFightingRobot" ref="true" />
      </containers>
    </api>
    <api id="F:LittleFightingRobot.explosionPrefab">
      <apidata name="explosionPrefab" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LittleFightingRobot" ref="true" />
      </containers>
    </api>
    <api id="F:LittleFightingRobot.lastPosition">
      <apidata name="lastPosition" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LittleFightingRobot" ref="true" />
      </containers>
    </api>
    <api id="M:LittleFightingRobot.OnRangeAttack">
      <apidata name="OnRangeAttack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:EnemyAI.OnRangeAttack">
          <type api="T:EnemyAI" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LittleFightingRobot" ref="true" />
      </containers>
    </api>
    <api id="F:LittleFightingRobot.projectilePrefab">
      <apidata name="projectilePrefab" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LittleFightingRobot" ref="true" />
      </containers>
    </api>
    <api id="F:LittleFightingRobot.projectileShotAudioClip">
      <apidata name="projectileShotAudioClip" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.AudioClip" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LittleFightingRobot" ref="true" />
      </containers>
    </api>
    <api id="F:LittleFightingRobot.smoke">
      <apidata name="smoke" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LittleFightingRobot" ref="true" />
      </containers>
    </api>
    <api id="F:LittleFightingRobot.smokePrefab">
      <apidata name="smokePrefab" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LittleFightingRobot" ref="true" />
      </containers>
    </api>
    <api id="M:LittleFightingRobot.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LittleFightingRobot" ref="true" />
      </containers>
    </api>
    <api id="M:LittleFightingRobot.TakeRangeAttack">
      <apidata name="TakeRangeAttack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LittleFightingRobot" ref="true" />
      </containers>
    </api>
    <api id="M:LittleFightingRobot.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LittleFightingRobot" ref="true" />
      </containers>
    </api>
    <api id="T:Loader">
      <apidata name="Loader" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Loader.loadBar" />
        <element api="F:Loader.current" />
        <element api="F:Loader.all" />
        <element api="M:Loader.Start" />
        <element api="M:Loader.Update" />
        <element api="M:Loader.OnGUI" />
        <element api="M:Loader.ShowProgress(System.Int32,System.Int32)" />
        <element api="M:Loader.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Loader.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Loader" ref="true" />
      </containers>
    </api>
    <api id="F:Loader.all">
      <apidata name="all" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Loader" ref="true" />
      </containers>
    </api>
    <api id="F:Loader.current">
      <apidata name="current" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Loader" ref="true" />
      </containers>
    </api>
    <api id="F:Loader.loadBar">
      <apidata name="loadBar" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Loader" ref="true" />
      </containers>
    </api>
    <api id="M:Loader.OnGUI">
      <apidata name="OnGUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Loader" ref="true" />
      </containers>
    </api>
    <api id="M:Loader.ShowProgress(System.Int32,System.Int32)">
      <apidata name="ShowProgress" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="cur">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="max">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Loader" ref="true" />
      </containers>
    </api>
    <api id="M:Loader.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Loader" ref="true" />
      </containers>
    </api>
    <api id="M:Loader.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Loader" ref="true" />
      </containers>
    </api>
    <api id="T:LoadGameScreen">
      <apidata name="LoadGameScreen" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:LoadGameScreen.mySkin" />
        <element api="F:LoadGameScreen.gameData" />
        <element api="F:LoadGameScreen.saveLoadDatas" />
        <element api="M:LoadGameScreen.Start" />
        <element api="M:LoadGameScreen.OnGUI" />
        <element api="M:LoadGameScreen.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:LoadGameScreen.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LoadGameScreen" ref="true" />
      </containers>
    </api>
    <api id="F:LoadGameScreen.gameData">
      <apidata name="gameData" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:GameData" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LoadGameScreen" ref="true" />
      </containers>
    </api>
    <api id="F:LoadGameScreen.mySkin">
      <apidata name="mySkin" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GUISkin" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LoadGameScreen" ref="true" />
      </containers>
    </api>
    <api id="M:LoadGameScreen.OnGUI">
      <apidata name="OnGUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LoadGameScreen" ref="true" />
      </containers>
    </api>
    <api id="F:LoadGameScreen.saveLoadDatas">
      <apidata name="saveLoadDatas" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <arrayOf rank="1">
          <type api="T:GameDataManager.SaveLoadDataShow" ref="true">
            <type api="T:GameDataManager" ref="true" />
          </type>
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LoadGameScreen" ref="true" />
      </containers>
    </api>
    <api id="M:LoadGameScreen.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:LoadGameScreen" ref="true" />
      </containers>
    </api>
    <api id="T:Loadscreen">
      <apidata name="Loadscreen" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Loadscreen.timer" />
        <element api="M:Loadscreen.Start" />
        <element api="M:Loadscreen.DisplayScene" />
        <element api="M:Loadscreen.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Loadscreen.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Loadscreen" ref="true" />
      </containers>
    </api>
    <api id="M:Loadscreen.DisplayScene">
      <apidata name="DisplayScene" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Loadscreen" ref="true" />
      </containers>
    </api>
    <api id="M:Loadscreen.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Loadscreen" ref="true" />
      </containers>
    </api>
    <api id="F:Loadscreen.timer">
      <apidata name="timer" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Loadscreen" ref="true" />
      </containers>
    </api>
    <api id="T:Matrix2x2">
      <apidata name="Matrix2x2" group="type" subgroup="structure" />
      <typedata visibility="public" sealed="true" serializable="false" layout="sequential" format="ansi" />
      <elements>
        <element api="F:Matrix2x2.values" />
        <element api="M:Matrix2x2.#ctor(System.Single,System.Single,System.Single,System.Single)" />
        <element api="M:Matrix2x2.Determinant" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Matrix2x2.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="m00">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="m01">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="m10">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="m11">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Matrix2x2" ref="false" />
      </containers>
    </api>
    <api id="M:Matrix2x2.Determinant">
      <apidata name="Determinant" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Matrix2x2" ref="false" />
      </containers>
    </api>
    <api id="F:Matrix2x2.values">
      <apidata name="values" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <arrayOf rank="2">
          <type api="T:System.Single" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Matrix2x2" ref="false" />
      </containers>
    </api>
    <api id="T:MeleeAttack">
      <apidata name="MeleeAttack" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:BaseSkill" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:ElectroFistAttack" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="F:MeleeAttack.punchSound" />
        <element api="F:MeleeAttack.hitEffect" />
        <element api="F:MeleeAttack.initialDamage" />
        <element api="F:MeleeAttack.cooldown" />
        <element api="F:MeleeAttack._level" />
        <element api="M:MeleeAttack.GetDamage(System.Int32)" />
        <element api="M:MeleeAttack.GetMeleeAttackSpeed(System.Int32)" />
        <element api="M:MeleeAttack.OnLevelChange(UnityEngine.GameObject,Igor,System.Int32)" />
        <element api="M:MeleeAttack.GetName" />
        <element api="M:MeleeAttack.OnUse(UnityEngine.GameObject,Igor,System.Int32)" />
        <element api="M:MeleeAttack.GetCooldown(System.Int32)" />
        <element api="M:MeleeAttack.GetNeededEnergy(System.Int32)" />
        <element api="M:MeleeAttack.AttackCooldownAnimation(CommonEntity,MeleeAttackHelper,System.Int32)" />
        <element api="M:MeleeAttack.EnemyHit(CommonEntity,CommonEntity,UnityEngine.Collider,UnityEngine.Transform,System.Single,MeleeAttackHelper)" />
        <element api="M:MeleeAttack.#ctor" />
        <element api="P:MeleeAttack.MeleeAttackSpeed" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:MeleeAttack.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttack" ref="true" />
      </containers>
    </api>
    <api id="F:MeleeAttack._level">
      <apidata name="_level" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttack" ref="true" />
      </containers>
    </api>
    <api id="M:MeleeAttack.AttackCooldownAnimation(CommonEntity,MeleeAttackHelper,System.Int32)">
      <apidata name="AttackCooldownAnimation" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="ce">
          <type api="T:CommonEntity" ref="true" />
        </parameter>
        <parameter name="mah">
          <type api="T:MeleeAttackHelper" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttack" ref="true" />
      </containers>
    </api>
    <api id="F:MeleeAttack.cooldown">
      <apidata name="cooldown" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttack" ref="true" />
      </containers>
    </api>
    <api id="M:MeleeAttack.EnemyHit(CommonEntity,CommonEntity,UnityEngine.Collider,UnityEngine.Transform,System.Single,MeleeAttackHelper)">
      <apidata name="EnemyHit" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="entity">
          <type api="T:CommonEntity" ref="true" />
        </parameter>
        <parameter name="enemy">
          <type api="T:CommonEntity" ref="true" />
        </parameter>
        <parameter name="collider">
          <type api="T:UnityEngine.Collider" ref="true" />
        </parameter>
        <parameter name="fistTransform">
          <type api="T:UnityEngine.Transform" ref="true" />
        </parameter>
        <parameter name="damage">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="mah">
          <type api="T:MeleeAttackHelper" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttack" ref="true" />
      </containers>
    </api>
    <api id="M:MeleeAttack.GetCooldown(System.Int32)">
      <apidata name="GetCooldown" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetCooldown(System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetCooldown(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttack" ref="true" />
      </containers>
    </api>
    <api id="M:MeleeAttack.GetDamage(System.Int32)">
      <apidata name="GetDamage" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttack" ref="true" />
      </containers>
    </api>
    <api id="M:MeleeAttack.GetMeleeAttackSpeed(System.Int32)">
      <apidata name="GetMeleeAttackSpeed" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttack" ref="true" />
      </containers>
    </api>
    <api id="M:MeleeAttack.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetName">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:ISkill.GetName">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttack" ref="true" />
      </containers>
    </api>
    <api id="M:MeleeAttack.GetNeededEnergy(System.Int32)">
      <apidata name="GetNeededEnergy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededEnergy(System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededEnergy(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttack" ref="true" />
      </containers>
    </api>
    <api id="F:MeleeAttack.hitEffect">
      <apidata name="hitEffect" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttack" ref="true" />
      </containers>
    </api>
    <api id="F:MeleeAttack.initialDamage">
      <apidata name="initialDamage" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttack" ref="true" />
      </containers>
    </api>
    <api id="P:MeleeAttack.MeleeAttackSpeed">
      <apidata name="MeleeAttackSpeed" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_MeleeAttackSpeed" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttack" ref="true" />
      </containers>
    </api>
    <api id="M:MeleeAttack.OnLevelChange(UnityEngine.GameObject,Igor,System.Int32)">
      <apidata name="OnLevelChange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.OnLevelChange(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="igorInstance">
          <type api="T:Igor" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.OnLevelChange(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttack" ref="true" />
      </containers>
    </api>
    <api id="M:MeleeAttack.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
      <apidata name="OnUse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="igorInstance">
          <type api="T:Igor" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttack" ref="true" />
      </containers>
    </api>
    <api id="F:MeleeAttack.punchSound">
      <apidata name="punchSound" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.AudioClip" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttack" ref="true" />
      </containers>
    </api>
    <api id="T:MeleeAttackHelper">
      <apidata name="MeleeAttackHelper" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:MeleeAttackHelper.attackDamage" />
        <element api="F:MeleeAttackHelper.alreadyHit" />
        <element api="F:MeleeAttackHelper.faction" />
        <element api="F:MeleeAttackHelper.attackSkill" />
        <element api="F:MeleeAttackHelper.roundhouseSkill" />
        <element api="F:MeleeAttackHelper.inRoundhouse" />
        <element api="F:MeleeAttackHelper.ce" />
        <element api="M:MeleeAttackHelper.Start" />
        <element api="M:MeleeAttackHelper.OnTriggerStay(UnityEngine.Collider)" />
        <element api="M:MeleeAttackHelper.PlaySound(UnityEngine.AudioClip)" />
        <element api="M:MeleeAttackHelper.OnTriggerEnter(UnityEngine.Collider)" />
        <element api="M:MeleeAttackHelper.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:MeleeAttackHelper.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttackHelper" ref="true" />
      </containers>
    </api>
    <api id="F:MeleeAttackHelper.alreadyHit">
      <apidata name="alreadyHit" group="member" subgroup="field" />
      <memberdata visibility="assembly" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttackHelper" ref="true" />
      </containers>
    </api>
    <api id="F:MeleeAttackHelper.attackDamage">
      <apidata name="attackDamage" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttackHelper" ref="true" />
      </containers>
    </api>
    <api id="F:MeleeAttackHelper.attackSkill">
      <apidata name="attackSkill" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:MeleeAttack" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttackHelper" ref="true" />
      </containers>
    </api>
    <api id="F:MeleeAttackHelper.ce">
      <apidata name="ce" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:CommonEntity" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttackHelper" ref="true" />
      </containers>
    </api>
    <api id="F:MeleeAttackHelper.faction">
      <apidata name="faction" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:CommonEntity.Faction" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttackHelper" ref="true" />
      </containers>
    </api>
    <api id="F:MeleeAttackHelper.inRoundhouse">
      <apidata name="inRoundhouse" group="member" subgroup="field" />
      <memberdata visibility="assembly" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttackHelper" ref="true" />
      </containers>
    </api>
    <api id="M:MeleeAttackHelper.OnTriggerEnter(UnityEngine.Collider)">
      <apidata name="OnTriggerEnter" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="other">
          <type api="T:UnityEngine.Collider" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttackHelper" ref="true" />
      </containers>
    </api>
    <api id="M:MeleeAttackHelper.OnTriggerStay(UnityEngine.Collider)">
      <apidata name="OnTriggerStay" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="other">
          <type api="T:UnityEngine.Collider" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttackHelper" ref="true" />
      </containers>
    </api>
    <api id="M:MeleeAttackHelper.PlaySound(UnityEngine.AudioClip)">
      <apidata name="PlaySound" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sound">
          <type api="T:UnityEngine.AudioClip" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttackHelper" ref="true" />
      </containers>
    </api>
    <api id="F:MeleeAttackHelper.roundhouseSkill">
      <apidata name="roundhouseSkill" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:RoundhouseAttack" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttackHelper" ref="true" />
      </containers>
    </api>
    <api id="M:MeleeAttackHelper.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MeleeAttackHelper" ref="true" />
      </containers>
    </api>
    <api id="T:MessageBoard">
      <apidata name="MessageBoard" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:MessageBoard.msgBoardInstance" />
        <element api="F:MessageBoard.guiStyle" />
        <element api="F:MessageBoard.guiStyleDialogue" />
        <element api="F:MessageBoard.maxHeight" />
        <element api="F:MessageBoard.margin" />
        <element api="F:MessageBoard.marginLeft" />
        <element api="F:MessageBoard.messages" />
        <element api="F:MessageBoard.borderWidth" />
        <element api="F:MessageBoard.backgroundTextureParts" />
        <element api="M:MessageBoard.GetMessageBoardInstance" />
        <element api="M:MessageBoard.AddMessage(System.String,UnityEngine.Texture2D,System.Boolean)" />
        <element api="M:MessageBoard.DrawMessageBackground(System.Int32,System.Int32,System.Int32,System.Int32)" />
        <element api="M:MessageBoard.DrawMessageBackground(System.Single,System.Single,System.Single,System.Single)" />
        <element api="M:MessageBoard.DrawMessageBackground(UnityEngine.Rect)" />
        <element api="M:MessageBoard.GetGUIStyle(System.Boolean)" />
        <element api="M:MessageBoard.Add(System.String,UnityEngine.Texture2D,System.Boolean)" />
        <element api="M:MessageBoard.OnGUI" />
        <element api="M:MessageBoard.GenerateMessageBackgroundTexture" />
        <element api="M:MessageBoard.CopyTexture(UnityEngine.Texture2D,MessageBoard.BackgroundTexturePartIndices,System.Int32,System.Int32,System.Int32,System.Int32)" />
        <element api="M:MessageBoard.DrawMsgBackground(System.Int32,System.Int32,System.Int32,System.Int32)" />
        <element api="M:MessageBoard.DrawTexture(MessageBoard.BackgroundTexturePartIndices,System.Int32,System.Int32,System.Int32,System.Int32)" />
        <element api="M:MessageBoard.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:MessageBoard.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="M:MessageBoard.Add(System.String,UnityEngine.Texture2D,System.Boolean)">
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="icon">
          <type api="T:UnityEngine.Texture2D" ref="true" />
        </parameter>
        <parameter name="dialogueMessage">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="M:MessageBoard.AddMessage(System.String,UnityEngine.Texture2D,System.Boolean)">
      <apidata name="AddMessage" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="icon" optional="true">
          <type api="T:UnityEngine.Texture2D" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="dialogueMessage" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoard.backgroundTextureParts">
      <apidata name="backgroundTextureParts" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <arrayOf rank="1">
          <type api="T:UnityEngine.Texture2D" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoard.borderWidth">
      <apidata name="borderWidth" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="M:MessageBoard.CopyTexture(UnityEngine.Texture2D,MessageBoard.BackgroundTexturePartIndices,System.Int32,System.Int32,System.Int32,System.Int32)">
      <apidata name="CopyTexture" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="from">
          <type api="T:UnityEngine.Texture2D" ref="true" />
        </parameter>
        <parameter name="toIndex">
          <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
            <type api="T:MessageBoard" ref="true" />
          </type>
        </parameter>
        <parameter name="fromX">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="fromY">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="w">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="h">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="M:MessageBoard.DrawMessageBackground(System.Int32,System.Int32,System.Int32,System.Int32)">
      <apidata name="DrawMessageBackground" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="x">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="y">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="wdt">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="hgt">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="M:MessageBoard.DrawMessageBackground(System.Single,System.Single,System.Single,System.Single)">
      <apidata name="DrawMessageBackground" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="x">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="y">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="wdt">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="hgt">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="M:MessageBoard.DrawMessageBackground(UnityEngine.Rect)">
      <apidata name="DrawMessageBackground" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="r">
          <type api="T:UnityEngine.Rect" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="M:MessageBoard.DrawMsgBackground(System.Int32,System.Int32,System.Int32,System.Int32)">
      <apidata name="DrawMsgBackground" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="x">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="y">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="wdt">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="hgt">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="M:MessageBoard.DrawTexture(MessageBoard.BackgroundTexturePartIndices,System.Int32,System.Int32,System.Int32,System.Int32)">
      <apidata name="DrawTexture" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="index">
          <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
            <type api="T:MessageBoard" ref="true" />
          </type>
        </parameter>
        <parameter name="x">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="y">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="wdt">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="hgt">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="M:MessageBoard.GenerateMessageBackgroundTexture">
      <apidata name="GenerateMessageBackgroundTexture" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="M:MessageBoard.GetGUIStyle(System.Boolean)">
      <apidata name="GetGUIStyle" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="forDialogues" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:UnityEngine.GUIStyle" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="M:MessageBoard.GetMessageBoardInstance">
      <apidata name="GetMessageBoardInstance" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:MessageBoard" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoard.guiStyle">
      <apidata name="guiStyle" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GUIStyle" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoard.guiStyleDialogue">
      <apidata name="guiStyleDialogue" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GUIStyle" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoard.margin">
      <apidata name="margin" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoard.marginLeft">
      <apidata name="marginLeft" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoard.maxHeight">
      <apidata name="maxHeight" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoard.messages">
      <apidata name="messages" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:MessageBoardMessage" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoard.msgBoardInstance">
      <apidata name="msgBoardInstance" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:MessageBoard" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="M:MessageBoard.OnGUI">
      <apidata name="OnGUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="T:MessageBoard.BackgroundTexturePartIndices">
      <apidata name="BackgroundTexturePartIndices" group="type" subgroup="enumeration" />
      <typedata visibility="private" sealed="true" serializable="false" layout="auto" format="ansi" />
      <elements>
        <element api="F:MessageBoard.BackgroundTexturePartIndices.TopLeft" />
        <element api="F:MessageBoard.BackgroundTexturePartIndices.Top" />
        <element api="F:MessageBoard.BackgroundTexturePartIndices.TopRight" />
        <element api="F:MessageBoard.BackgroundTexturePartIndices.Left" />
        <element api="F:MessageBoard.BackgroundTexturePartIndices.Center" />
        <element api="F:MessageBoard.BackgroundTexturePartIndices.Right" />
        <element api="F:MessageBoard.BackgroundTexturePartIndices.BottomLeft" />
        <element api="F:MessageBoard.BackgroundTexturePartIndices.Bottom" />
        <element api="F:MessageBoard.BackgroundTexturePartIndices.BottomRight" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoard.BackgroundTexturePartIndices.Bottom">
      <apidata name="Bottom" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
          <type api="T:MessageBoard" ref="true" />
        </type>
      </returns>
      <value>7</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
          <type api="T:MessageBoard" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:MessageBoard.BackgroundTexturePartIndices.BottomLeft">
      <apidata name="BottomLeft" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
          <type api="T:MessageBoard" ref="true" />
        </type>
      </returns>
      <value>6</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
          <type api="T:MessageBoard" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:MessageBoard.BackgroundTexturePartIndices.BottomRight">
      <apidata name="BottomRight" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
          <type api="T:MessageBoard" ref="true" />
        </type>
      </returns>
      <value>8</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
          <type api="T:MessageBoard" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:MessageBoard.BackgroundTexturePartIndices.Center">
      <apidata name="Center" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
          <type api="T:MessageBoard" ref="true" />
        </type>
      </returns>
      <value>4</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
          <type api="T:MessageBoard" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:MessageBoard.BackgroundTexturePartIndices.Left">
      <apidata name="Left" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
          <type api="T:MessageBoard" ref="true" />
        </type>
      </returns>
      <value>3</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
          <type api="T:MessageBoard" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:MessageBoard.BackgroundTexturePartIndices.Right">
      <apidata name="Right" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
          <type api="T:MessageBoard" ref="true" />
        </type>
      </returns>
      <value>5</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
          <type api="T:MessageBoard" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:MessageBoard.BackgroundTexturePartIndices.Top">
      <apidata name="Top" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
          <type api="T:MessageBoard" ref="true" />
        </type>
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
          <type api="T:MessageBoard" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:MessageBoard.BackgroundTexturePartIndices.TopLeft">
      <apidata name="TopLeft" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
          <type api="T:MessageBoard" ref="true" />
        </type>
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
          <type api="T:MessageBoard" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:MessageBoard.BackgroundTexturePartIndices.TopRight">
      <apidata name="TopRight" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
          <type api="T:MessageBoard" ref="true" />
        </type>
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoard.BackgroundTexturePartIndices" ref="false">
          <type api="T:MessageBoard" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:MessageBoardMessage">
      <apidata name="MessageBoardMessage" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:MessageBoardMessage.totalMessageWidth" />
        <element api="F:MessageBoardMessage.maxTimeInSecondsPerChar" />
        <element api="F:MessageBoardMessage.fadeInTimeInSeconds" />
        <element api="F:MessageBoardMessage.fadeOutTimeInSeconds" />
        <element api="F:MessageBoardMessage.icon" />
        <element api="F:MessageBoardMessage.message" />
        <element api="F:MessageBoardMessage.guiContent" />
        <element api="F:MessageBoardMessage.isDialogueMessage" />
        <element api="F:MessageBoardMessage.age" />
        <element api="F:MessageBoardMessage.shouldBeRemoved" />
        <element api="M:MessageBoardMessage.#ctor(System.String,UnityEngine.Texture2D,System.Boolean)" />
        <element api="M:MessageBoardMessage.GetTotalMessageWidth" />
        <element api="M:MessageBoardMessage.GetTextWidth(System.Single)" />
        <element api="M:MessageBoardMessage.GetHeight" />
        <element api="M:MessageBoardMessage.Draw(System.Single,System.Single)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:MessageBoardMessage.#ctor(System.String,UnityEngine.Texture2D,System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="_icon">
          <type api="T:UnityEngine.Texture2D" ref="true" />
        </parameter>
        <parameter name="_isDialogueMessage">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoardMessage" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoardMessage.age">
      <apidata name="age" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoardMessage" ref="true" />
      </containers>
    </api>
    <api id="M:MessageBoardMessage.Draw(System.Single,System.Single)">
      <apidata name="Draw" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="offsetX">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="offsetY">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoardMessage" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoardMessage.fadeInTimeInSeconds">
      <apidata name="fadeInTimeInSeconds" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoardMessage" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoardMessage.fadeOutTimeInSeconds">
      <apidata name="fadeOutTimeInSeconds" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoardMessage" ref="true" />
      </containers>
    </api>
    <api id="M:MessageBoardMessage.GetHeight">
      <apidata name="GetHeight" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoardMessage" ref="true" />
      </containers>
    </api>
    <api id="M:MessageBoardMessage.GetTextWidth(System.Single)">
      <apidata name="GetTextWidth" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="totalWdt">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoardMessage" ref="true" />
      </containers>
    </api>
    <api id="M:MessageBoardMessage.GetTotalMessageWidth">
      <apidata name="GetTotalMessageWidth" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoardMessage" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoardMessage.guiContent">
      <apidata name="guiContent" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GUIContent" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoardMessage" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoardMessage.icon">
      <apidata name="icon" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoardMessage" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoardMessage.isDialogueMessage">
      <apidata name="isDialogueMessage" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoardMessage" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoardMessage.maxTimeInSecondsPerChar">
      <apidata name="maxTimeInSecondsPerChar" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoardMessage" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoardMessage.message">
      <apidata name="message" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoardMessage" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoardMessage.shouldBeRemoved">
      <apidata name="shouldBeRemoved" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoardMessage" ref="true" />
      </containers>
    </api>
    <api id="F:MessageBoardMessage.totalMessageWidth">
      <apidata name="totalMessageWidth" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MessageBoardMessage" ref="true" />
      </containers>
    </api>
    <api id="T:Microchip">
      <apidata name="Microchip" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:BaseItem" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Microchip.expSparksPrefab" />
        <element api="F:Microchip.experienceValue" />
        <element api="M:Microchip.PickUp" />
        <element api="M:Microchip.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Microchip.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Microchip" ref="true" />
      </containers>
    </api>
    <api id="F:Microchip.experienceValue">
      <apidata name="experienceValue" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Microchip" ref="true" />
      </containers>
    </api>
    <api id="F:Microchip.expSparksPrefab">
      <apidata name="expSparksPrefab" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Microchip" ref="true" />
      </containers>
    </api>
    <api id="M:Microchip.PickUp">
      <apidata name="PickUp" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseItem.PickUp">
          <type api="T:BaseItem" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:IInvItem" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Microchip" ref="true" />
      </containers>
    </api>
    <api id="T:Microwave">
      <apidata name="Microwave" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:Prism" ref="true" />
          <type api="T:BaseItem" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Microwave.GetName" />
        <element api="M:Microwave.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Microwave.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Microwave" ref="true" />
      </containers>
    </api>
    <api id="M:Microwave.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Prism.GetName">
          <type api="T:Prism" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Microwave" ref="true" />
      </containers>
    </api>
    <api id="T:MicrowaveAttack">
      <apidata name="MicrowaveAttack" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:BaseSkill" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:MicrowaveAttack.microwaveSpherePrefab" />
        <element api="F:MicrowaveAttack.sound" />
        <element api="F:MicrowaveAttack.initialDamage" />
        <element api="F:MicrowaveAttack.initialRange" />
        <element api="M:MicrowaveAttack.GetName" />
        <element api="M:MicrowaveAttack.GetNeededItems" />
        <element api="M:MicrowaveAttack.OnUse(UnityEngine.GameObject,Igor,System.Int32)" />
        <element api="M:MicrowaveAttack.GetCooldown(System.Int32)" />
        <element api="M:MicrowaveAttack.GetNeededEnergy(System.Int32)" />
        <element api="M:MicrowaveAttack.AttackCooldownAnimation(CommonEntity,System.Int32)" />
        <element api="M:MicrowaveAttack.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:MicrowaveAttack.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttack" ref="true" />
      </containers>
    </api>
    <api id="M:MicrowaveAttack.AttackCooldownAnimation(CommonEntity,System.Int32)">
      <apidata name="AttackCooldownAnimation" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="ce">
          <type api="T:CommonEntity" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttack" ref="true" />
      </containers>
    </api>
    <api id="M:MicrowaveAttack.GetCooldown(System.Int32)">
      <apidata name="GetCooldown" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetCooldown(System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetCooldown(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttack" ref="true" />
      </containers>
    </api>
    <api id="M:MicrowaveAttack.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetName">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:ISkill.GetName">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttack" ref="true" />
      </containers>
    </api>
    <api id="M:MicrowaveAttack.GetNeededEnergy(System.Int32)">
      <apidata name="GetNeededEnergy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededEnergy(System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededEnergy(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttack" ref="true" />
      </containers>
    </api>
    <api id="M:MicrowaveAttack.GetNeededItems">
      <apidata name="GetNeededItems" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededItems">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededItems">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttack" ref="true" />
      </containers>
    </api>
    <api id="F:MicrowaveAttack.initialDamage">
      <apidata name="initialDamage" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttack" ref="true" />
      </containers>
    </api>
    <api id="F:MicrowaveAttack.initialRange">
      <apidata name="initialRange" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttack" ref="true" />
      </containers>
    </api>
    <api id="F:MicrowaveAttack.microwaveSpherePrefab">
      <apidata name="microwaveSpherePrefab" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttack" ref="true" />
      </containers>
    </api>
    <api id="M:MicrowaveAttack.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
      <apidata name="OnUse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="igorInstance">
          <type api="T:Igor" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttack" ref="true" />
      </containers>
    </api>
    <api id="F:MicrowaveAttack.sound">
      <apidata name="sound" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.AudioClip" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttack" ref="true" />
      </containers>
    </api>
    <api id="T:MicrowaveAttackSphere">
      <apidata name="MicrowaveAttackSphere" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:MicrowaveAttackSphere.damage" />
        <element api="F:MicrowaveAttackSphere.damagesPlayer" />
        <element api="F:MicrowaveAttackSphere.damagesEnemies" />
        <element api="F:MicrowaveAttackSphere.hitPrefab" />
        <element api="F:MicrowaveAttackSphere.maxScale" />
        <element api="F:MicrowaveAttackSphere.parentTransform" />
        <element api="F:MicrowaveAttackSphere.parentTranslation" />
        <element api="F:MicrowaveAttackSphere.outerSphere" />
        <element api="F:MicrowaveAttackSphere.innerSphere" />
        <element api="F:MicrowaveAttackSphere.hitObjects" />
        <element api="M:MicrowaveAttackSphere.Start" />
        <element api="M:MicrowaveAttackSphere.Update" />
        <element api="M:MicrowaveAttackSphere.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:MicrowaveAttackSphere.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttackSphere" ref="true" />
      </containers>
    </api>
    <api id="F:MicrowaveAttackSphere.damage">
      <apidata name="damage" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttackSphere" ref="true" />
      </containers>
    </api>
    <api id="F:MicrowaveAttackSphere.damagesEnemies">
      <apidata name="damagesEnemies" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttackSphere" ref="true" />
      </containers>
    </api>
    <api id="F:MicrowaveAttackSphere.damagesPlayer">
      <apidata name="damagesPlayer" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttackSphere" ref="true" />
      </containers>
    </api>
    <api id="F:MicrowaveAttackSphere.hitObjects">
      <apidata name="hitObjects" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:UnityEngine.GameObject" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttackSphere" ref="true" />
      </containers>
    </api>
    <api id="F:MicrowaveAttackSphere.hitPrefab">
      <apidata name="hitPrefab" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttackSphere" ref="true" />
      </containers>
    </api>
    <api id="F:MicrowaveAttackSphere.innerSphere">
      <apidata name="innerSphere" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttackSphere" ref="true" />
      </containers>
    </api>
    <api id="F:MicrowaveAttackSphere.maxScale">
      <apidata name="maxScale" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttackSphere" ref="true" />
      </containers>
    </api>
    <api id="F:MicrowaveAttackSphere.outerSphere">
      <apidata name="outerSphere" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttackSphere" ref="true" />
      </containers>
    </api>
    <api id="F:MicrowaveAttackSphere.parentTransform">
      <apidata name="parentTransform" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Transform" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttackSphere" ref="true" />
      </containers>
    </api>
    <api id="F:MicrowaveAttackSphere.parentTranslation">
      <apidata name="parentTranslation" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttackSphere" ref="true" />
      </containers>
    </api>
    <api id="M:MicrowaveAttackSphere.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttackSphere" ref="true" />
      </containers>
    </api>
    <api id="M:MicrowaveAttackSphere.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MicrowaveAttackSphere" ref="true" />
      </containers>
    </api>
    <api id="T:Mine">
      <apidata name="Mine" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Mine.faction" />
        <element api="F:Mine.explosionEffectPrefab" />
        <element api="F:Mine.damage" />
        <element api="F:Mine.explosionAudioClip" />
        <element api="M:Mine.OnCollisionEnter(UnityEngine.Collision)" />
        <element api="M:Mine.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Mine.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Mine" ref="true" />
      </containers>
    </api>
    <api id="F:Mine.damage">
      <apidata name="damage" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Mine" ref="true" />
      </containers>
    </api>
    <api id="F:Mine.explosionAudioClip">
      <apidata name="explosionAudioClip" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.AudioClip" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Mine" ref="true" />
      </containers>
    </api>
    <api id="F:Mine.explosionEffectPrefab">
      <apidata name="explosionEffectPrefab" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Mine" ref="true" />
      </containers>
    </api>
    <api id="F:Mine.faction">
      <apidata name="faction" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:CommonEntity.Faction" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Mine" ref="true" />
      </containers>
    </api>
    <api id="M:Mine.OnCollisionEnter(UnityEngine.Collision)">
      <apidata name="OnCollisionEnter" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="collision">
          <type api="T:UnityEngine.Collision" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Mine" ref="true" />
      </containers>
    </api>
    <api id="T:MovementManager">
      <apidata name="MovementManager" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:Triggerable" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:IntroCutscene" ref="true" />
          <type api="T:JeveAndIgor" ref="true" />
          <type api="T:JeveDie" ref="true" />
          <type api="T:LeaveLevel1" ref="true" />
          <type api="T:IgorLeaveEnemyTest" ref="true" />
          <type api="T:IgorLeaveIgorMaker" ref="true" />
          <type api="T:IgorLeaveJump" ref="true" />
          <type api="T:IgorLeaveTutorial" ref="true" />
          <type api="T:IgotLeaveItemTest" ref="true" />
          <type api="T:TestCutscene" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="F:MovementManager.actions" />
        <element api="F:MovementManager.running" />
        <element api="F:MovementManager.pause" />
        <element api="F:MovementManager.enable" />
        <element api="F:MovementManager.isRun" />
        <element api="F:MovementManager.isLoop" />
        <element api="F:MovementManager.bars" />
        <element api="F:MovementManager.positions" />
        <element api="F:MovementManager.maxPosition" />
        <element api="F:MovementManager.initialPosition" />
        <element api="F:MovementManager.ignoreCutscene" />
        <element api="M:MovementManager.Awake" />
        <element api="M:MovementManager.Start" />
        <element api="M:MovementManager.StartManager" />
        <element api="M:MovementManager.Update" />
        <element api="M:MovementManager.Next" />
        <element api="M:MovementManager.RunCurrent" />
        <element api="M:MovementManager.ReadNext" />
        <element api="M:MovementManager.RunCurrentGUI" />
        <element api="M:MovementManager.OnGUI" />
        <element api="M:MovementManager.Append(IAction)" />
        <element api="M:MovementManager.OnTrigger(UnityEngine.GameObject,System.Boolean)" />
        <element api="M:MovementManager.Sleep(System.Single)" />
        <element api="M:MovementManager.Reset" />
        <element api="M:MovementManager.Script" />
        <element api="M:MovementManager.#ctor" />
        <element api="P:MovementManager.IsRunning" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:MovementManager.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="F:MovementManager.actions">
      <apidata name="actions" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Queue" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="M:MovementManager.Append(IAction)">
      <apidata name="Append" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="action">
          <type api="T:IAction" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="M:MovementManager.Awake">
      <apidata name="Awake" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="F:MovementManager.bars">
      <apidata name="bars" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="F:MovementManager.enable">
      <apidata name="enable" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="F:MovementManager.ignoreCutscene">
      <apidata name="ignoreCutscene" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="F:MovementManager.initialPosition">
      <apidata name="initialPosition" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="F:MovementManager.isLoop">
      <apidata name="isLoop" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="F:MovementManager.isRun">
      <apidata name="isRun" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="P:MovementManager.IsRunning">
      <apidata name="IsRunning" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsRunning" />
      <setter name="set_IsRunning" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="F:MovementManager.maxPosition">
      <apidata name="maxPosition" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="M:MovementManager.Next">
      <apidata name="Next" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="M:MovementManager.OnGUI">
      <apidata name="OnGUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="M:MovementManager.OnTrigger(UnityEngine.GameObject,System.Boolean)">
      <apidata name="OnTrigger" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Triggerable.OnTrigger(UnityEngine.GameObject,System.Boolean)">
          <type api="T:Triggerable" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="isTriggered">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="F:MovementManager.pause">
      <apidata name="pause" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="F:MovementManager.positions">
      <apidata name="positions" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="M:MovementManager.ReadNext">
      <apidata name="ReadNext" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="M:MovementManager.Reset">
      <apidata name="Reset" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="M:MovementManager.RunCurrent">
      <apidata name="RunCurrent" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="M:MovementManager.RunCurrentGUI">
      <apidata name="RunCurrentGUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="F:MovementManager.running">
      <apidata name="running" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.ArrayList" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="M:MovementManager.Script">
      <apidata name="Script" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="M:MovementManager.Sleep(System.Single)">
      <apidata name="Sleep" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="seconds">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="M:MovementManager.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="M:MovementManager.StartManager">
      <apidata name="StartManager" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="M:MovementManager.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MovementManager" ref="true" />
      </containers>
    </api>
    <api id="T:MoveToCeiling">
      <apidata name="MoveToCeiling" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:MoveToCeiling.moveSpeed" />
        <element api="M:MoveToCeiling.Start" />
        <element api="M:MoveToCeiling.Update" />
        <element api="M:MoveToCeiling.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:MoveToCeiling.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MoveToCeiling" ref="true" />
      </containers>
    </api>
    <api id="F:MoveToCeiling.moveSpeed">
      <apidata name="moveSpeed" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MoveToCeiling" ref="true" />
      </containers>
    </api>
    <api id="M:MoveToCeiling.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MoveToCeiling" ref="true" />
      </containers>
    </api>
    <api id="M:MoveToCeiling.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MoveToCeiling" ref="true" />
      </containers>
    </api>
    <api id="T:MySettings">
      <apidata name="MySettings" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:MySettings.mySkin" />
        <element api="F:MySettings.sound" />
        <element api="F:MySettings.current" />
        <element api="F:MySettings.lastSwitch" />
        <element api="F:MySettings.lastMousePos" />
        <element api="F:MySettings.isPressed" />
        <element api="F:MySettings.timing" />
        <element api="M:MySettings.Start" />
        <element api="M:MySettings.OnGUI" />
        <element api="M:MySettings.HandleButton(System.Int32)" />
        <element api="M:MySettings.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:MySettings.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MySettings" ref="true" />
      </containers>
    </api>
    <api id="F:MySettings.current">
      <apidata name="current" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MySettings" ref="true" />
      </containers>
    </api>
    <api id="M:MySettings.HandleButton(System.Int32)">
      <apidata name="HandleButton" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="id">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MySettings" ref="true" />
      </containers>
    </api>
    <api id="F:MySettings.isPressed">
      <apidata name="isPressed" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MySettings" ref="true" />
      </containers>
    </api>
    <api id="F:MySettings.lastMousePos">
      <apidata name="lastMousePos" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MySettings" ref="true" />
      </containers>
    </api>
    <api id="F:MySettings.lastSwitch">
      <apidata name="lastSwitch" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MySettings" ref="true" />
      </containers>
    </api>
    <api id="F:MySettings.mySkin">
      <apidata name="mySkin" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GUISkin" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MySettings" ref="true" />
      </containers>
    </api>
    <api id="M:MySettings.OnGUI">
      <apidata name="OnGUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MySettings" ref="true" />
      </containers>
    </api>
    <api id="F:MySettings.sound">
      <apidata name="sound" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MySettings" ref="true" />
      </containers>
    </api>
    <api id="M:MySettings.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MySettings" ref="true" />
      </containers>
    </api>
    <api id="F:MySettings.timing">
      <apidata name="timing" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:MySettings" ref="true" />
      </containers>
    </api>
    <api id="T:PassiveBaseSkill">
      <apidata name="PassiveBaseSkill" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:BaseSkill" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:PassiveIgorSkill" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:PassiveBaseSkill.IsPassive" />
        <element api="M:PassiveBaseSkill.GetCooldown(System.Int32)" />
        <element api="M:PassiveBaseSkill.GetNeededEnergy(System.Int32)" />
        <element api="M:PassiveBaseSkill.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:PassiveBaseSkill.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PassiveBaseSkill" ref="true" />
      </containers>
    </api>
    <api id="M:PassiveBaseSkill.GetCooldown(System.Int32)">
      <apidata name="GetCooldown" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetCooldown(System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetCooldown(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PassiveBaseSkill" ref="true" />
      </containers>
    </api>
    <api id="M:PassiveBaseSkill.GetNeededEnergy(System.Int32)">
      <apidata name="GetNeededEnergy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededEnergy(System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededEnergy(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PassiveBaseSkill" ref="true" />
      </containers>
    </api>
    <api id="M:PassiveBaseSkill.IsPassive">
      <apidata name="IsPassive" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.IsPassive">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.IsPassive">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PassiveBaseSkill" ref="true" />
      </containers>
    </api>
    <api id="T:PassiveIgorSkill">
      <apidata name="PassiveIgorSkill" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:PassiveBaseSkill" ref="true" />
          <type api="T:BaseSkill" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:PassiveIgorSkill.skillName" />
        <element api="F:PassiveIgorSkill.propertyName" />
        <element api="F:PassiveIgorSkill.initialPropertyName" />
        <element api="F:PassiveIgorSkill.factor" />
        <element api="M:PassiveIgorSkill.GetName" />
        <element api="M:PassiveIgorSkill.Awake" />
        <element api="M:PassiveIgorSkill.OnLevelChange(UnityEngine.GameObject,Igor,System.Int32)" />
        <element api="M:PassiveIgorSkill.GetNeededSkills" />
        <element api="M:PassiveIgorSkill.#ctor" />
        <element api="M:PassiveIgorSkill.#cctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:PassiveIgorSkill.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PassiveIgorSkill" ref="true" />
      </containers>
    </api>
    <api id="M:PassiveIgorSkill.#cctor">
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PassiveIgorSkill" ref="true" />
      </containers>
    </api>
    <api id="M:PassiveIgorSkill.Awake">
      <apidata name="Awake" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PassiveIgorSkill" ref="true" />
      </containers>
    </api>
    <api id="F:PassiveIgorSkill.factor">
      <apidata name="factor" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PassiveIgorSkill" ref="true" />
      </containers>
    </api>
    <api id="M:PassiveIgorSkill.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetName">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:ISkill.GetName">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PassiveIgorSkill" ref="true" />
      </containers>
    </api>
    <api id="M:PassiveIgorSkill.GetNeededSkills">
      <apidata name="GetNeededSkills" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededSkills">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededSkills">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PassiveIgorSkill" ref="true" />
      </containers>
    </api>
    <api id="F:PassiveIgorSkill.initialPropertyName">
      <apidata name="initialPropertyName" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PassiveIgorSkill" ref="true" />
      </containers>
    </api>
    <api id="M:PassiveIgorSkill.OnLevelChange(UnityEngine.GameObject,Igor,System.Int32)">
      <apidata name="OnLevelChange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.OnLevelChange(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="igorInstance">
          <type api="T:Igor" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.OnLevelChange(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PassiveIgorSkill" ref="true" />
      </containers>
    </api>
    <api id="F:PassiveIgorSkill.propertyName">
      <apidata name="propertyName" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PassiveIgorSkill" ref="true" />
      </containers>
    </api>
    <api id="F:PassiveIgorSkill.skillName">
      <apidata name="skillName" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PassiveIgorSkill" ref="true" />
      </containers>
    </api>
    <api id="T:PauseScreen">
      <apidata name="PauseScreen" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:PauseScreen.isPaused" />
        <element api="F:PauseScreen.background" />
        <element api="M:PauseScreen.Start" />
        <element api="M:PauseScreen.Update" />
        <element api="M:PauseScreen.OnGUI" />
        <element api="M:PauseScreen.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:PauseScreen.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PauseScreen" ref="true" />
      </containers>
    </api>
    <api id="F:PauseScreen.background">
      <apidata name="background" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PauseScreen" ref="true" />
      </containers>
    </api>
    <api id="F:PauseScreen.isPaused">
      <apidata name="isPaused" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PauseScreen" ref="true" />
      </containers>
    </api>
    <api id="M:PauseScreen.OnGUI">
      <apidata name="OnGUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PauseScreen" ref="true" />
      </containers>
    </api>
    <api id="M:PauseScreen.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PauseScreen" ref="true" />
      </containers>
    </api>
    <api id="M:PauseScreen.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PauseScreen" ref="true" />
      </containers>
    </api>
    <api id="T:Prism">
      <apidata name="Prism" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:BaseItem" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:BasicItem" ref="true" />
          <type api="T:Microwave" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:Prism.PickUp" />
        <element api="M:Prism.GetName" />
        <element api="M:Prism.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Prism.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Prism" ref="true" />
      </containers>
    </api>
    <api id="M:Prism.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Prism" ref="true" />
      </containers>
    </api>
    <api id="M:Prism.PickUp">
      <apidata name="PickUp" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseItem.PickUp">
          <type api="T:BaseItem" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:IInvItem" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Prism" ref="true" />
      </containers>
    </api>
    <api id="T:Prism.InvItem">
      <apidata name="InvItem" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:IInvItem" ref="true" />
      </implements>
      <elements>
        <element api="F:Prism.InvItem.name" />
        <element api="M:Prism.InvItem.#ctor(System.String)" />
        <element api="M:Prism.InvItem.GetDisplayName" />
        <element api="M:Prism.InvItem.GetMaxStackSize" />
        <element api="M:Prism.InvItem.Drop" />
        <element api="M:Prism.InvItem.Use(UnityEngine.GameObject)" />
        <element api="M:Prism.InvItem.Combinable(IInvItem)" />
        <element api="M:Prism.InvItem.Combine(IInvItem)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Prism" ref="true" />
      </containers>
    </api>
    <api id="M:Prism.InvItem.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Prism.InvItem" ref="true">
          <type api="T:Prism" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Prism.InvItem.Combinable(IInvItem)">
      <apidata name="Combinable" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <type api="T:IInvItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Combinable(IInvItem)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Prism.InvItem" ref="true">
          <type api="T:Prism" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Prism.InvItem.Combine(IInvItem)">
      <apidata name="Combine" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <type api="T:IInvItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:IInvItem" ref="true" />
      </returns>
      <implements>
        <member api="M:IInvItem.Combine(IInvItem)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Prism.InvItem" ref="true">
          <type api="T:Prism" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Prism.InvItem.Drop">
      <apidata name="Drop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Drop">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Prism.InvItem" ref="true">
          <type api="T:Prism" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Prism.InvItem.GetDisplayName">
      <apidata name="GetDisplayName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:IInvItem.GetDisplayName">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Prism.InvItem" ref="true">
          <type api="T:Prism" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Prism.InvItem.GetMaxStackSize">
      <apidata name="GetMaxStackSize" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.GetMaxStackSize">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Prism.InvItem" ref="true">
          <type api="T:Prism" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Prism.InvItem.name">
      <apidata name="name" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Prism.InvItem" ref="true">
          <type api="T:Prism" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Prism.InvItem.Use(UnityEngine.GameObject)">
      <apidata name="Use" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="entity">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Use(UnityEngine.GameObject)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Prism.InvItem" ref="true">
          <type api="T:Prism" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:PrismAttack">
      <apidata name="PrismAttack" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:LaserAttack" ref="true" />
          <type api="T:BaseSkill" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:PrismAttack.attackLevels" />
        <element api="F:PrismAttack.attackProjectiles" />
        <element api="M:PrismAttack.GetName" />
        <element api="M:PrismAttack.GetNeededSkills" />
        <element api="M:PrismAttack.GetNeededItems" />
        <element api="M:PrismAttack.GetNeededEnergy(System.Int32)" />
        <element api="M:PrismAttack.OnUse(UnityEngine.GameObject,Igor,System.Int32)" />
        <element api="M:PrismAttack.SpawnProjectiles(CommonEntity,System.Int32)" />
        <element api="M:PrismAttack.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:PrismAttack.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PrismAttack" ref="true" />
      </containers>
    </api>
    <api id="F:PrismAttack.attackLevels">
      <apidata name="attackLevels" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <arrayOf rank="1">
          <type api="T:PrismAttack.LaserAttack" ref="false">
            <type api="T:PrismAttack" ref="true" />
          </type>
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PrismAttack" ref="true" />
      </containers>
    </api>
    <api id="F:PrismAttack.attackProjectiles">
      <apidata name="attackProjectiles" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Int32" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PrismAttack" ref="true" />
      </containers>
    </api>
    <api id="M:PrismAttack.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LaserAttack.GetName">
          <type api="T:LaserAttack" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:ISkill.GetName">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PrismAttack" ref="true" />
      </containers>
    </api>
    <api id="M:PrismAttack.GetNeededEnergy(System.Int32)">
      <apidata name="GetNeededEnergy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LaserAttack.GetNeededEnergy(System.Int32)">
          <type api="T:LaserAttack" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededEnergy(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PrismAttack" ref="true" />
      </containers>
    </api>
    <api id="M:PrismAttack.GetNeededItems">
      <apidata name="GetNeededItems" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededItems">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededItems">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PrismAttack" ref="true" />
      </containers>
    </api>
    <api id="M:PrismAttack.GetNeededSkills">
      <apidata name="GetNeededSkills" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LaserAttack.GetNeededSkills">
          <type api="T:LaserAttack" ref="true" />
        </member>
      </overrides>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededSkills">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PrismAttack" ref="true" />
      </containers>
    </api>
    <api id="M:PrismAttack.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
      <apidata name="OnUse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LaserAttack.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:LaserAttack" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="igorInstance">
          <type api="T:Igor" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PrismAttack" ref="true" />
      </containers>
    </api>
    <api id="M:PrismAttack.SpawnProjectiles(CommonEntity,System.Int32)">
      <apidata name="SpawnProjectiles" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:LaserAttack.SpawnProjectiles(CommonEntity,System.Int32)">
          <type api="T:LaserAttack" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="ce">
          <type api="T:CommonEntity" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PrismAttack" ref="true" />
      </containers>
    </api>
    <api id="T:PrismAttack.LaserAttack">
      <apidata name="LaserAttack" group="type" subgroup="enumeration" />
      <typedata visibility="private" sealed="true" serializable="false" layout="auto" format="ansi" />
      <elements>
        <element api="F:PrismAttack.LaserAttack.Horizontal" />
        <element api="F:PrismAttack.LaserAttack.Vertical" />
        <element api="F:PrismAttack.LaserAttack.Cross" />
        <element api="F:PrismAttack.LaserAttack.Area" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PrismAttack" ref="true" />
      </containers>
    </api>
    <api id="F:PrismAttack.LaserAttack.Area">
      <apidata name="Area" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:PrismAttack.LaserAttack" ref="false">
          <type api="T:PrismAttack" ref="true" />
        </type>
      </returns>
      <value>3</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PrismAttack.LaserAttack" ref="false">
          <type api="T:PrismAttack" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:PrismAttack.LaserAttack.Cross">
      <apidata name="Cross" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:PrismAttack.LaserAttack" ref="false">
          <type api="T:PrismAttack" ref="true" />
        </type>
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PrismAttack.LaserAttack" ref="false">
          <type api="T:PrismAttack" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:PrismAttack.LaserAttack.Horizontal">
      <apidata name="Horizontal" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:PrismAttack.LaserAttack" ref="false">
          <type api="T:PrismAttack" ref="true" />
        </type>
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PrismAttack.LaserAttack" ref="false">
          <type api="T:PrismAttack" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:PrismAttack.LaserAttack.Vertical">
      <apidata name="Vertical" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:PrismAttack.LaserAttack" ref="false">
          <type api="T:PrismAttack" ref="true" />
        </type>
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PrismAttack.LaserAttack" ref="false">
          <type api="T:PrismAttack" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:Projectile">
      <apidata name="Projectile" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Projectile.damage" />
        <element api="F:Projectile.damagePerIntervall" />
        <element api="F:Projectile.damageIntervallLength" />
        <element api="F:Projectile.damageTime" />
        <element api="F:Projectile.speed" />
        <element api="F:Projectile.maxTimeAlive" />
        <element api="F:Projectile.timeOfCreation" />
        <element api="F:Projectile.faction" />
        <element api="F:Projectile.hitPrefab" />
        <element api="M:Projectile.Start" />
        <element api="M:Projectile.Update" />
        <element api="M:Projectile.OnTriggerEnter(UnityEngine.Collider)" />
        <element api="M:Projectile.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Projectile.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Projectile" ref="true" />
      </containers>
    </api>
    <api id="F:Projectile.damage">
      <apidata name="damage" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Projectile" ref="true" />
      </containers>
    </api>
    <api id="F:Projectile.damageIntervallLength">
      <apidata name="damageIntervallLength" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Projectile" ref="true" />
      </containers>
    </api>
    <api id="F:Projectile.damagePerIntervall">
      <apidata name="damagePerIntervall" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Projectile" ref="true" />
      </containers>
    </api>
    <api id="F:Projectile.damageTime">
      <apidata name="damageTime" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Projectile" ref="true" />
      </containers>
    </api>
    <api id="F:Projectile.faction">
      <apidata name="faction" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:CommonEntity.Faction" ref="false">
          <type api="T:CommonEntity" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Projectile" ref="true" />
      </containers>
    </api>
    <api id="F:Projectile.hitPrefab">
      <apidata name="hitPrefab" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Projectile" ref="true" />
      </containers>
    </api>
    <api id="F:Projectile.maxTimeAlive">
      <apidata name="maxTimeAlive" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Projectile" ref="true" />
      </containers>
    </api>
    <api id="M:Projectile.OnTriggerEnter(UnityEngine.Collider)">
      <apidata name="OnTriggerEnter" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="collider">
          <type api="T:UnityEngine.Collider" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Projectile" ref="true" />
      </containers>
    </api>
    <api id="F:Projectile.speed">
      <apidata name="speed" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Projectile" ref="true" />
      </containers>
    </api>
    <api id="M:Projectile.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Projectile" ref="true" />
      </containers>
    </api>
    <api id="F:Projectile.timeOfCreation">
      <apidata name="timeOfCreation" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Projectile" ref="true" />
      </containers>
    </api>
    <api id="M:Projectile.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Projectile" ref="true" />
      </containers>
    </api>
    <api id="T:PushableBox">
      <apidata name="PushableBox" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:IUsable" ref="true" />
      </implements>
      <elements>
        <element api="F:PushableBox.moveSpeed" />
        <element api="F:PushableBox.oldPosition" />
        <element api="F:PushableBox._fallingDown" />
        <element api="F:PushableBox.fallSpeed" />
        <element api="F:PushableBox._realSize" />
        <element api="F:PushableBox.gotRealRealSize" />
        <element api="M:PushableBox.CalculateRealSize" />
        <element api="M:PushableBox.SavePosition" />
        <element api="M:PushableBox.LoadOldPosition" />
        <element api="M:PushableBox.Start" />
        <element api="M:PushableBox.PushingAllowed(UnityEngine.GameObject,System.Boolean)" />
        <element api="M:PushableBox.GetPushingDirection(UnityEngine.Vector3)" />
        <element api="M:PushableBox.OnUse(UnityEngine.GameObject)" />
        <element api="M:PushableBox.Update" />
        <element api="M:PushableBox.FallDown" />
        <element api="M:PushableBox.#ctor" />
        <element api="P:PushableBox.FallingDown" />
        <element api="P:PushableBox.RealSize" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:PushableBox.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PushableBox" ref="true" />
      </containers>
    </api>
    <api id="F:PushableBox._fallingDown">
      <apidata name="_fallingDown" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PushableBox" ref="true" />
      </containers>
    </api>
    <api id="F:PushableBox._realSize">
      <apidata name="_realSize" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PushableBox" ref="true" />
      </containers>
    </api>
    <api id="M:PushableBox.CalculateRealSize">
      <apidata name="CalculateRealSize" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PushableBox" ref="true" />
      </containers>
    </api>
    <api id="M:PushableBox.FallDown">
      <apidata name="FallDown" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PushableBox" ref="true" />
      </containers>
    </api>
    <api id="P:PushableBox.FallingDown">
      <apidata name="FallingDown" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_FallingDown" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PushableBox" ref="true" />
      </containers>
    </api>
    <api id="F:PushableBox.fallSpeed">
      <apidata name="fallSpeed" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PushableBox" ref="true" />
      </containers>
    </api>
    <api id="M:PushableBox.GetPushingDirection(UnityEngine.Vector3)">
      <apidata name="GetPushingDirection" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="playerpos">
          <type api="T:UnityEngine.Vector3" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PushableBox" ref="true" />
      </containers>
    </api>
    <api id="F:PushableBox.gotRealRealSize">
      <apidata name="gotRealRealSize" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PushableBox" ref="true" />
      </containers>
    </api>
    <api id="M:PushableBox.LoadOldPosition">
      <apidata name="LoadOldPosition" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PushableBox" ref="true" />
      </containers>
    </api>
    <api id="F:PushableBox.moveSpeed">
      <apidata name="moveSpeed" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PushableBox" ref="true" />
      </containers>
    </api>
    <api id="F:PushableBox.oldPosition">
      <apidata name="oldPosition" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PushableBox" ref="true" />
      </containers>
    </api>
    <api id="M:PushableBox.OnUse(UnityEngine.GameObject)">
      <apidata name="OnUse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="obj">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:IUsable.OnUse(UnityEngine.GameObject)">
          <type api="T:IUsable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PushableBox" ref="true" />
      </containers>
    </api>
    <api id="M:PushableBox.PushingAllowed(UnityEngine.GameObject,System.Boolean)">
      <apidata name="PushingAllowed" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="igorGO">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="forward">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PushableBox" ref="true" />
      </containers>
    </api>
    <api id="P:PushableBox.RealSize">
      <apidata name="RealSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RealSize" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PushableBox" ref="true" />
      </containers>
    </api>
    <api id="M:PushableBox.SavePosition">
      <apidata name="SavePosition" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PushableBox" ref="true" />
      </containers>
    </api>
    <api id="M:PushableBox.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PushableBox" ref="true" />
      </containers>
    </api>
    <api id="M:PushableBox.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:PushableBox" ref="true" />
      </containers>
    </api>
    <api id="T:Puzzle1Platform">
      <apidata name="Puzzle1Platform" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Puzzle1Platform.canMove" />
        <element api="F:Puzzle1Platform.bla" />
        <element api="F:Puzzle1Platform.isMoving" />
        <element api="F:Puzzle1Platform.lastDir" />
        <element api="F:Puzzle1Platform.dir" />
        <element api="M:Puzzle1Platform.OnCollisionEnter(UnityEngine.Collision)" />
        <element api="M:Puzzle1Platform.Moving(System.String)" />
        <element api="M:Puzzle1Platform.Start" />
        <element api="M:Puzzle1Platform.Update" />
        <element api="M:Puzzle1Platform.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Puzzle1Platform.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Puzzle1Platform" ref="true" />
      </containers>
    </api>
    <api id="F:Puzzle1Platform.bla">
      <apidata name="bla" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Puzzle1Platform" ref="true" />
      </containers>
    </api>
    <api id="F:Puzzle1Platform.canMove">
      <apidata name="canMove" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Puzzle1Platform" ref="true" />
      </containers>
    </api>
    <api id="F:Puzzle1Platform.dir">
      <apidata name="dir" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Puzzle1Platform" ref="true" />
      </containers>
    </api>
    <api id="F:Puzzle1Platform.isMoving">
      <apidata name="isMoving" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Puzzle1Platform" ref="true" />
      </containers>
    </api>
    <api id="F:Puzzle1Platform.lastDir">
      <apidata name="lastDir" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Puzzle1Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Puzzle1Platform.Moving(System.String)">
      <apidata name="Moving" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="direction">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Puzzle1Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Puzzle1Platform.OnCollisionEnter(UnityEngine.Collision)">
      <apidata name="OnCollisionEnter" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="collision">
          <type api="T:UnityEngine.Collision" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Puzzle1Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Puzzle1Platform.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Puzzle1Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Puzzle1Platform.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Puzzle1Platform" ref="true" />
      </containers>
    </api>
    <api id="T:Remove">
      <apidata name="Remove" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:Triggerable" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Remove.objekts" />
        <element api="M:Remove.OnTrigger(UnityEngine.GameObject,System.Boolean)" />
        <element api="M:Remove.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Remove.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Remove" ref="true" />
      </containers>
    </api>
    <api id="F:Remove.objekts">
      <apidata name="objekts" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:UnityEngine.GameObject" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Remove" ref="true" />
      </containers>
    </api>
    <api id="M:Remove.OnTrigger(UnityEngine.GameObject,System.Boolean)">
      <apidata name="OnTrigger" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Triggerable.OnTrigger(UnityEngine.GameObject,System.Boolean)">
          <type api="T:Triggerable" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="isTriggered">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Remove" ref="true" />
      </containers>
    </api>
    <api id="T:RepairKit">
      <apidata name="RepairKit" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:BaseItem" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:RepairKit.amountToHeal" />
        <element api="F:RepairKit.healPrefab" />
        <element api="F:RepairKit.texture" />
        <element api="F:RepairKit.invRepairKit" />
        <element api="M:RepairKit.PickUp" />
        <element api="M:RepairKit.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:RepairKit.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RepairKit" ref="true" />
      </containers>
    </api>
    <api id="F:RepairKit.amountToHeal">
      <apidata name="amountToHeal" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RepairKit" ref="true" />
      </containers>
    </api>
    <api id="F:RepairKit.healPrefab">
      <apidata name="healPrefab" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RepairKit" ref="true" />
      </containers>
    </api>
    <api id="F:RepairKit.invRepairKit">
      <apidata name="invRepairKit" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:RepairKit.InvRepairKit" ref="true">
          <type api="T:RepairKit" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RepairKit" ref="true" />
      </containers>
    </api>
    <api id="M:RepairKit.PickUp">
      <apidata name="PickUp" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseItem.PickUp">
          <type api="T:BaseItem" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:IInvItem" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RepairKit" ref="true" />
      </containers>
    </api>
    <api id="F:RepairKit.texture">
      <apidata name="texture" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RepairKit" ref="true" />
      </containers>
    </api>
    <api id="T:RepairKit.InvRepairKit">
      <apidata name="InvRepairKit" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:IInvItem" ref="true" />
      </implements>
      <elements>
        <element api="F:RepairKit.InvRepairKit.amountToHeal" />
        <element api="F:RepairKit.InvRepairKit.healPrefab" />
        <element api="F:RepairKit.InvRepairKit.texture" />
        <element api="M:RepairKit.InvRepairKit.#ctor(System.Single,UnityEngine.GameObject,UnityEngine.Texture2D)" />
        <element api="M:RepairKit.InvRepairKit.GetDisplayName" />
        <element api="M:RepairKit.InvRepairKit.GetMaxStackSize" />
        <element api="M:RepairKit.InvRepairKit.Drop" />
        <element api="M:RepairKit.InvRepairKit.Use(UnityEngine.GameObject)" />
        <element api="M:RepairKit.InvRepairKit.Combinable(IInvItem)" />
        <element api="M:RepairKit.InvRepairKit.Combine(IInvItem)" />
        <element api="M:RepairKit.InvRepairKit.GetDrawable" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RepairKit" ref="true" />
      </containers>
    </api>
    <api id="M:RepairKit.InvRepairKit.#ctor(System.Single,UnityEngine.GameObject,UnityEngine.Texture2D)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="amount">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="prefab">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="tex">
          <type api="T:UnityEngine.Texture2D" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RepairKit.InvRepairKit" ref="true">
          <type api="T:RepairKit" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:RepairKit.InvRepairKit.amountToHeal">
      <apidata name="amountToHeal" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RepairKit.InvRepairKit" ref="true">
          <type api="T:RepairKit" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:RepairKit.InvRepairKit.Combinable(IInvItem)">
      <apidata name="Combinable" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <type api="T:IInvItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Combinable(IInvItem)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RepairKit.InvRepairKit" ref="true">
          <type api="T:RepairKit" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:RepairKit.InvRepairKit.Combine(IInvItem)">
      <apidata name="Combine" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <type api="T:IInvItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:IInvItem" ref="true" />
      </returns>
      <implements>
        <member api="M:IInvItem.Combine(IInvItem)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RepairKit.InvRepairKit" ref="true">
          <type api="T:RepairKit" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:RepairKit.InvRepairKit.Drop">
      <apidata name="Drop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Drop">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RepairKit.InvRepairKit" ref="true">
          <type api="T:RepairKit" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:RepairKit.InvRepairKit.GetDisplayName">
      <apidata name="GetDisplayName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:IInvItem.GetDisplayName">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RepairKit.InvRepairKit" ref="true">
          <type api="T:RepairKit" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:RepairKit.InvRepairKit.GetDrawable">
      <apidata name="GetDrawable" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RepairKit.InvRepairKit" ref="true">
          <type api="T:RepairKit" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:RepairKit.InvRepairKit.GetMaxStackSize">
      <apidata name="GetMaxStackSize" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.GetMaxStackSize">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RepairKit.InvRepairKit" ref="true">
          <type api="T:RepairKit" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:RepairKit.InvRepairKit.healPrefab">
      <apidata name="healPrefab" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RepairKit.InvRepairKit" ref="true">
          <type api="T:RepairKit" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:RepairKit.InvRepairKit.texture">
      <apidata name="texture" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RepairKit.InvRepairKit" ref="true">
          <type api="T:RepairKit" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:RepairKit.InvRepairKit.Use(UnityEngine.GameObject)">
      <apidata name="Use" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="entity">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Use(UnityEngine.GameObject)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RepairKit.InvRepairKit" ref="true">
          <type api="T:RepairKit" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:RoundhouseAttack">
      <apidata name="RoundhouseAttack" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:BaseSkill" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:RoundhouseAttack.sound" />
        <element api="F:RoundhouseAttack.animationDuration" />
        <element api="F:RoundhouseAttack.initialDamage" />
        <element api="M:RoundhouseAttack.GetName" />
        <element api="M:RoundhouseAttack.GetNeededSkills" />
        <element api="M:RoundhouseAttack.GetNeededItems" />
        <element api="M:RoundhouseAttack.OnUse(UnityEngine.GameObject,Igor,System.Int32)" />
        <element api="M:RoundhouseAttack.GetCooldown(System.Int32)" />
        <element api="M:RoundhouseAttack.GetNeededEnergy(System.Int32)" />
        <element api="M:RoundhouseAttack.GetDamage(System.Int32)" />
        <element api="M:RoundhouseAttack.AttackCooldownAnimation(CommonEntity,System.Int32)" />
        <element api="M:RoundhouseAttack.EnemyHit(CommonEntity,CommonEntity,UnityEngine.Collider,UnityEngine.Transform,System.Single,MeleeAttackHelper)" />
        <element api="M:RoundhouseAttack.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:RoundhouseAttack.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RoundhouseAttack" ref="true" />
      </containers>
    </api>
    <api id="F:RoundhouseAttack.animationDuration">
      <apidata name="animationDuration" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RoundhouseAttack" ref="true" />
      </containers>
    </api>
    <api id="M:RoundhouseAttack.AttackCooldownAnimation(CommonEntity,System.Int32)">
      <apidata name="AttackCooldownAnimation" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="ce">
          <type api="T:CommonEntity" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RoundhouseAttack" ref="true" />
      </containers>
    </api>
    <api id="M:RoundhouseAttack.EnemyHit(CommonEntity,CommonEntity,UnityEngine.Collider,UnityEngine.Transform,System.Single,MeleeAttackHelper)">
      <apidata name="EnemyHit" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="entity">
          <type api="T:CommonEntity" ref="true" />
        </parameter>
        <parameter name="enemy">
          <type api="T:CommonEntity" ref="true" />
        </parameter>
        <parameter name="collider">
          <type api="T:UnityEngine.Collider" ref="true" />
        </parameter>
        <parameter name="fistTransform">
          <type api="T:UnityEngine.Transform" ref="true" />
        </parameter>
        <parameter name="damage">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="mah">
          <type api="T:MeleeAttackHelper" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RoundhouseAttack" ref="true" />
      </containers>
    </api>
    <api id="M:RoundhouseAttack.GetCooldown(System.Int32)">
      <apidata name="GetCooldown" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetCooldown(System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetCooldown(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RoundhouseAttack" ref="true" />
      </containers>
    </api>
    <api id="M:RoundhouseAttack.GetDamage(System.Int32)">
      <apidata name="GetDamage" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RoundhouseAttack" ref="true" />
      </containers>
    </api>
    <api id="M:RoundhouseAttack.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetName">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:ISkill.GetName">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RoundhouseAttack" ref="true" />
      </containers>
    </api>
    <api id="M:RoundhouseAttack.GetNeededEnergy(System.Int32)">
      <apidata name="GetNeededEnergy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededEnergy(System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededEnergy(System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RoundhouseAttack" ref="true" />
      </containers>
    </api>
    <api id="M:RoundhouseAttack.GetNeededItems">
      <apidata name="GetNeededItems" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededItems">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededItems">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RoundhouseAttack" ref="true" />
      </containers>
    </api>
    <api id="M:RoundhouseAttack.GetNeededSkills">
      <apidata name="GetNeededSkills" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.GetNeededSkills">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <implements>
        <member api="M:ISkill.GetNeededSkills">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RoundhouseAttack" ref="true" />
      </containers>
    </api>
    <api id="F:RoundhouseAttack.initialDamage">
      <apidata name="initialDamage" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RoundhouseAttack" ref="true" />
      </containers>
    </api>
    <api id="M:RoundhouseAttack.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
      <apidata name="OnUse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseSkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:BaseSkill" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="igorInstance">
          <type api="T:Igor" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:ISkill.OnUse(UnityEngine.GameObject,Igor,System.Int32)">
          <type api="T:ISkill" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RoundhouseAttack" ref="true" />
      </containers>
    </api>
    <api id="F:RoundhouseAttack.sound">
      <apidata name="sound" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.AudioClip" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:RoundhouseAttack" ref="true" />
      </containers>
    </api>
    <api id="T:SceneLoader">
      <apidata name="SceneLoader" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:Triggerable" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:SceneLoader.sceneName" />
        <element api="F:SceneLoader.otherTriggable" />
        <element api="F:SceneLoader.triggered" />
        <element api="F:SceneLoader.delay" />
        <element api="M:SceneLoader.Start" />
        <element api="M:SceneLoader.OnTrigger(UnityEngine.GameObject,System.Boolean)" />
        <element api="M:SceneLoader.Load" />
        <element api="M:SceneLoader.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:SceneLoader.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SceneLoader" ref="true" />
      </containers>
    </api>
    <api id="F:SceneLoader.delay">
      <apidata name="delay" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SceneLoader" ref="true" />
      </containers>
    </api>
    <api id="M:SceneLoader.Load">
      <apidata name="Load" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SceneLoader" ref="true" />
      </containers>
    </api>
    <api id="M:SceneLoader.OnTrigger(UnityEngine.GameObject,System.Boolean)">
      <apidata name="OnTrigger" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Triggerable.OnTrigger(UnityEngine.GameObject,System.Boolean)">
          <type api="T:Triggerable" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="isTriggered">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SceneLoader" ref="true" />
      </containers>
    </api>
    <api id="F:SceneLoader.otherTriggable">
      <apidata name="otherTriggable" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Triggerable" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SceneLoader" ref="true" />
      </containers>
    </api>
    <api id="F:SceneLoader.sceneName">
      <apidata name="sceneName" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SceneLoader" ref="true" />
      </containers>
    </api>
    <api id="M:SceneLoader.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SceneLoader" ref="true" />
      </containers>
    </api>
    <api id="F:SceneLoader.triggered">
      <apidata name="triggered" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SceneLoader" ref="true" />
      </containers>
    </api>
    <api id="T:Score">
      <apidata name="Score" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Score.mySkin" />
        <element api="F:Score.lastMousePos" />
        <element api="F:Score.current" />
        <element api="F:Score.lastSwitch" />
        <element api="M:Score.Start" />
        <element api="M:Score.OnGUI" />
        <element api="M:Score.HandleButton(System.Int32)" />
        <element api="M:Score.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Score.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Score" ref="true" />
      </containers>
    </api>
    <api id="F:Score.current">
      <apidata name="current" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Score" ref="true" />
      </containers>
    </api>
    <api id="M:Score.HandleButton(System.Int32)">
      <apidata name="HandleButton" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="id">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Score" ref="true" />
      </containers>
    </api>
    <api id="F:Score.lastMousePos">
      <apidata name="lastMousePos" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Score" ref="true" />
      </containers>
    </api>
    <api id="F:Score.lastSwitch">
      <apidata name="lastSwitch" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Score" ref="true" />
      </containers>
    </api>
    <api id="F:Score.mySkin">
      <apidata name="mySkin" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GUISkin" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Score" ref="true" />
      </containers>
    </api>
    <api id="M:Score.OnGUI">
      <apidata name="OnGUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Score" ref="true" />
      </containers>
    </api>
    <api id="M:Score.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Score" ref="true" />
      </containers>
    </api>
    <api id="T:SelfDestructor">
      <apidata name="SelfDestructor" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:Triggerable" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:SelfDestructor.OnTrigger(UnityEngine.GameObject,System.Boolean)" />
        <element api="M:SelfDestructor.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:SelfDestructor.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SelfDestructor" ref="true" />
      </containers>
    </api>
    <api id="M:SelfDestructor.OnTrigger(UnityEngine.GameObject,System.Boolean)">
      <apidata name="OnTrigger" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Triggerable.OnTrigger(UnityEngine.GameObject,System.Boolean)">
          <type api="T:Triggerable" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="isTriggered">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SelfDestructor" ref="true" />
      </containers>
    </api>
    <api id="T:Siren">
      <apidata name="Siren" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Siren.lights" />
        <element api="F:Siren.speed" />
        <element api="F:Siren.isEnabled" />
        <element api="F:Siren.intEnabled" />
        <element api="M:Siren.Start" />
        <element api="M:Siren.Update" />
        <element api="M:Siren.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Siren.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Siren" ref="true" />
      </containers>
    </api>
    <api id="F:Siren.intEnabled">
      <apidata name="intEnabled" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Siren" ref="true" />
      </containers>
    </api>
    <api id="F:Siren.isEnabled">
      <apidata name="isEnabled" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Siren" ref="true" />
      </containers>
    </api>
    <api id="F:Siren.lights">
      <apidata name="lights" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <arrayOf rank="1">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Siren" ref="true" />
      </containers>
    </api>
    <api id="F:Siren.speed">
      <apidata name="speed" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Siren" ref="true" />
      </containers>
    </api>
    <api id="M:Siren.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Siren" ref="true" />
      </containers>
    </api>
    <api id="M:Siren.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Siren" ref="true" />
      </containers>
    </api>
    <api id="T:SkillBar">
      <apidata name="SkillBar" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:SkillBar.maxHotkeyCount" />
        <element api="F:SkillBar.skillBarInstance" />
        <element api="F:SkillBar.cooldownBarTexture" />
        <element api="F:SkillBar.mouse1Texture" />
        <element api="F:SkillBar.mouse2Texture" />
        <element api="F:SkillBar.items" />
        <element api="M:SkillBar.GetInstance" />
        <element api="M:SkillBar.#ctor" />
        <element api="M:SkillBar.Update" />
        <element api="M:SkillBar.OnHotkeyPressed(System.Int32)" />
        <element api="M:SkillBar.AssignSlot(System.Int32,System.String,SkillBar.SkillBarItem.ItemType,UnityEngine.Texture2D)" />
        <element api="M:SkillBar.OnGUI" />
        <element api="M:SkillBar.#cctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:SkillBar.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar" ref="true" />
      </containers>
    </api>
    <api id="M:SkillBar.#cctor">
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar" ref="true" />
      </containers>
    </api>
    <api id="M:SkillBar.AssignSlot(System.Int32,System.String,SkillBar.SkillBarItem.ItemType,UnityEngine.Texture2D)">
      <apidata name="AssignSlot" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="item">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:SkillBar.SkillBarItem.ItemType" ref="false">
            <type api="T:SkillBar.SkillBarItem" ref="true">
              <type api="T:SkillBar" ref="true" />
            </type>
          </type>
        </parameter>
        <parameter name="texture" optional="true">
          <type api="T:UnityEngine.Texture2D" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar" ref="true" />
      </containers>
    </api>
    <api id="F:SkillBar.cooldownBarTexture">
      <apidata name="cooldownBarTexture" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar" ref="true" />
      </containers>
    </api>
    <api id="M:SkillBar.GetInstance">
      <apidata name="GetInstance" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:SkillBar" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar" ref="true" />
      </containers>
    </api>
    <api id="F:SkillBar.items">
      <apidata name="items" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:SkillBar.SkillBarItem" ref="true">
              <type api="T:SkillBar" ref="true" />
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar" ref="true" />
      </containers>
    </api>
    <api id="F:SkillBar.maxHotkeyCount">
      <apidata name="maxHotkeyCount" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar" ref="true" />
      </containers>
    </api>
    <api id="F:SkillBar.mouse1Texture">
      <apidata name="mouse1Texture" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar" ref="true" />
      </containers>
    </api>
    <api id="F:SkillBar.mouse2Texture">
      <apidata name="mouse2Texture" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar" ref="true" />
      </containers>
    </api>
    <api id="M:SkillBar.OnGUI">
      <apidata name="OnGUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar" ref="true" />
      </containers>
    </api>
    <api id="M:SkillBar.OnHotkeyPressed(System.Int32)">
      <apidata name="OnHotkeyPressed" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="currentHotkey">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar" ref="true" />
      </containers>
    </api>
    <api id="F:SkillBar.skillBarInstance">
      <apidata name="skillBarInstance" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:SkillBar" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar" ref="true" />
      </containers>
    </api>
    <api id="M:SkillBar.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar" ref="true" />
      </containers>
    </api>
    <api id="T:SkillBar.SkillBarItem">
      <apidata name="SkillBarItem" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:SkillBar.SkillBarItem.iconTexture" />
        <element api="F:SkillBar.SkillBarItem.name" />
        <element api="F:SkillBar.SkillBarItem.type" />
        <element api="F:SkillBar.SkillBarItem.cooldown" />
        <element api="F:SkillBar.SkillBarItem.lastMaxCooldown" />
        <element api="M:SkillBar.SkillBarItem.#ctor(SkillBar.SkillBarItem.ItemType,System.String,UnityEngine.Texture2D)" />
        <element api="M:SkillBar.SkillBarItem.StartCooldown(System.Single)" />
        <element api="M:SkillBar.SkillBarItem.DecCooldown" />
        <element api="M:SkillBar.SkillBarItem.HasCooldown" />
        <element api="M:SkillBar.SkillBarItem.GetRelativeCooldown" />
        <element api="M:SkillBar.SkillBarItem.GetName" />
        <element api="M:SkillBar.SkillBarItem.GetTexture" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar" ref="true" />
      </containers>
    </api>
    <api id="M:SkillBar.SkillBarItem.#ctor(SkillBar.SkillBarItem.ItemType,System.String,UnityEngine.Texture2D)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_type">
          <type api="T:SkillBar.SkillBarItem.ItemType" ref="false">
            <type api="T:SkillBar.SkillBarItem" ref="true">
              <type api="T:SkillBar" ref="true" />
            </type>
          </type>
        </parameter>
        <parameter name="_name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="_iconTexture">
          <type api="T:UnityEngine.Texture2D" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar.SkillBarItem" ref="true">
          <type api="T:SkillBar" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:SkillBar.SkillBarItem.cooldown">
      <apidata name="cooldown" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar.SkillBarItem" ref="true">
          <type api="T:SkillBar" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:SkillBar.SkillBarItem.DecCooldown">
      <apidata name="DecCooldown" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar.SkillBarItem" ref="true">
          <type api="T:SkillBar" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:SkillBar.SkillBarItem.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar.SkillBarItem" ref="true">
          <type api="T:SkillBar" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:SkillBar.SkillBarItem.GetRelativeCooldown">
      <apidata name="GetRelativeCooldown" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar.SkillBarItem" ref="true">
          <type api="T:SkillBar" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:SkillBar.SkillBarItem.GetTexture">
      <apidata name="GetTexture" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar.SkillBarItem" ref="true">
          <type api="T:SkillBar" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:SkillBar.SkillBarItem.HasCooldown">
      <apidata name="HasCooldown" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar.SkillBarItem" ref="true">
          <type api="T:SkillBar" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:SkillBar.SkillBarItem.iconTexture">
      <apidata name="iconTexture" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar.SkillBarItem" ref="true">
          <type api="T:SkillBar" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:SkillBar.SkillBarItem.lastMaxCooldown">
      <apidata name="lastMaxCooldown" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar.SkillBarItem" ref="true">
          <type api="T:SkillBar" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:SkillBar.SkillBarItem.name">
      <apidata name="name" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar.SkillBarItem" ref="true">
          <type api="T:SkillBar" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:SkillBar.SkillBarItem.StartCooldown(System.Single)">
      <apidata name="StartCooldown" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="seconds">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar.SkillBarItem" ref="true">
          <type api="T:SkillBar" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:SkillBar.SkillBarItem.type">
      <apidata name="type" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:SkillBar.SkillBarItem.ItemType" ref="false">
          <type api="T:SkillBar.SkillBarItem" ref="true">
            <type api="T:SkillBar" ref="true" />
          </type>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar.SkillBarItem" ref="true">
          <type api="T:SkillBar" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:SkillBar.SkillBarItem.ItemType">
      <apidata name="ItemType" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" layout="auto" format="ansi" />
      <elements>
        <element api="F:SkillBar.SkillBarItem.ItemType.INVALID" />
        <element api="F:SkillBar.SkillBarItem.ItemType.ITEM" />
        <element api="F:SkillBar.SkillBarItem.ItemType.SKILL" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar.SkillBarItem" ref="true">
          <type api="T:SkillBar" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:SkillBar.SkillBarItem.ItemType.INVALID">
      <apidata name="INVALID" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:SkillBar.SkillBarItem.ItemType" ref="false">
          <type api="T:SkillBar.SkillBarItem" ref="true">
            <type api="T:SkillBar" ref="true" />
          </type>
        </type>
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar.SkillBarItem.ItemType" ref="false">
          <type api="T:SkillBar.SkillBarItem" ref="true">
            <type api="T:SkillBar" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="F:SkillBar.SkillBarItem.ItemType.ITEM">
      <apidata name="ITEM" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:SkillBar.SkillBarItem.ItemType" ref="false">
          <type api="T:SkillBar.SkillBarItem" ref="true">
            <type api="T:SkillBar" ref="true" />
          </type>
        </type>
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar.SkillBarItem.ItemType" ref="false">
          <type api="T:SkillBar.SkillBarItem" ref="true">
            <type api="T:SkillBar" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="F:SkillBar.SkillBarItem.ItemType.SKILL">
      <apidata name="SKILL" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:SkillBar.SkillBarItem.ItemType" ref="false">
          <type api="T:SkillBar.SkillBarItem" ref="true">
            <type api="T:SkillBar" ref="true" />
          </type>
        </type>
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillBar.SkillBarItem.ItemType" ref="false">
          <type api="T:SkillBar.SkillBarItem" ref="true">
            <type api="T:SkillBar" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="T:Skills">
      <apidata name="Skills" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Skills.SkillNames" />
        <element api="F:Skills.skills" />
        <element api="M:Skills.SkillsClear" />
        <element api="M:Skills.InstantiateSkills" />
        <element api="M:Skills.GetSkill(System.String)" />
        <element api="M:Skills.GetSkills" />
        <element api="M:Skills.KnowsSkill(System.String)" />
        <element api="M:Skills.LevelUpSkill(System.String)" />
        <element api="M:Skills.SetSkillLevel(System.String,System.Int32)" />
        <element api="M:Skills.#cctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Skills.#cctor">
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Skills" ref="true" />
      </containers>
    </api>
    <api id="M:Skills.GetSkill(System.String)">
      <apidata name="GetSkill" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="displayName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Skills.SkillData" ref="true">
          <type api="T:Skills" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Skills" ref="true" />
      </containers>
    </api>
    <api id="M:Skills.GetSkills">
      <apidata name="GetSkills" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Skills.SkillData" ref="true">
              <type api="T:Skills" ref="true" />
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Skills" ref="true" />
      </containers>
    </api>
    <api id="M:Skills.InstantiateSkills">
      <apidata name="InstantiateSkills" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Skills" ref="true" />
      </containers>
    </api>
    <api id="M:Skills.KnowsSkill(System.String)">
      <apidata name="KnowsSkill" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Skills" ref="true" />
      </containers>
    </api>
    <api id="M:Skills.LevelUpSkill(System.String)">
      <apidata name="LevelUpSkill" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Skills" ref="true" />
      </containers>
    </api>
    <api id="M:Skills.SetSkillLevel(System.String,System.Int32)">
      <apidata name="SetSkillLevel" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Skills" ref="true" />
      </containers>
    </api>
    <api id="F:Skills.SkillNames">
      <apidata name="SkillNames" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Skills" ref="true" />
      </containers>
    </api>
    <api id="F:Skills.skills">
      <apidata name="skills" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Skills.SkillData" ref="true">
              <type api="T:Skills" ref="true" />
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Skills" ref="true" />
      </containers>
    </api>
    <api id="M:Skills.SkillsClear">
      <apidata name="SkillsClear" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Skills" ref="true" />
      </containers>
    </api>
    <api id="T:Skills.SkillData">
      <apidata name="SkillData" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Skills.SkillData.skill" />
        <element api="F:Skills.SkillData.level" />
        <element api="M:Skills.SkillData.#ctor(ISkill,System.Int32)" />
        <element api="M:Skills.SkillData.IsRelated(Skills.SkillData)" />
        <element api="M:Skills.SkillData.IsChildOf(Skills.SkillData)" />
        <element api="M:Skills.SkillData.IsParentOf(Skills.SkillData)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Skills" ref="true" />
      </containers>
    </api>
    <api id="M:Skills.SkillData.#ctor(ISkill,System.Int32)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_skill">
          <type api="T:ISkill" ref="true" />
        </parameter>
        <parameter name="_level" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Skills.SkillData" ref="true">
          <type api="T:Skills" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Skills.SkillData.IsChildOf(Skills.SkillData)">
      <apidata name="IsChildOf" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="otherSkillData">
          <type api="T:Skills.SkillData" ref="true">
            <type api="T:Skills" ref="true" />
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Skills.SkillData" ref="true">
          <type api="T:Skills" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Skills.SkillData.IsParentOf(Skills.SkillData)">
      <apidata name="IsParentOf" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="otherSkillData">
          <type api="T:Skills.SkillData" ref="true">
            <type api="T:Skills" ref="true" />
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Skills.SkillData" ref="true">
          <type api="T:Skills" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Skills.SkillData.IsRelated(Skills.SkillData)">
      <apidata name="IsRelated" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="otherSkillData">
          <type api="T:Skills.SkillData" ref="true">
            <type api="T:Skills" ref="true" />
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Skills.SkillData" ref="true">
          <type api="T:Skills" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Skills.SkillData.level">
      <apidata name="level" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Skills.SkillData" ref="true">
          <type api="T:Skills" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Skills.SkillData.skill">
      <apidata name="skill" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:ISkill" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Skills.SkillData" ref="true">
          <type api="T:Skills" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:SkillTree">
      <apidata name="SkillTree" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:SkillTree.MarginLeftRight" />
        <element api="F:SkillTree.MarginTopBottom" />
        <element api="F:SkillTree.skillTreeInstance" />
        <element api="F:SkillTree.levelUpSymbol" />
        <element api="F:SkillTree.maxSkillNodePositionX" />
        <element api="F:SkillTree.maxSkillNodePositionY" />
        <element api="F:SkillTree.nodes" />
        <element api="F:SkillTree.isEnabled" />
        <element api="F:SkillTree.scrollViewPosition" />
        <element api="M:SkillTree.GetInstance" />
        <element api="M:SkillTree.ReportNodePosition(System.Single,System.Single,System.Single,System.Single)" />
        <element api="M:SkillTree.Show" />
        <element api="M:SkillTree.Hide" />
        <element api="M:SkillTree.Update" />
        <element api="M:SkillTree.RefreshAllStates" />
        <element api="M:SkillTree.Recalculate" />
        <element api="M:SkillTree.IsPositionFree(System.Single,System.Single,System.Single,System.Single)" />
        <element api="M:SkillTree.DrawLevelUpSymbol(System.Single,System.Single,System.Single,System.Single)" />
        <element api="M:SkillTree.DrawFrame(System.Single,System.Single,System.Single,System.Single,UnityEngine.Rect,UnityEngine.Color,System.Single,System.Boolean)" />
        <element api="M:SkillTree.DrawCross(System.Single,System.Single,System.Single,System.Single,UnityEngine.Rect,UnityEngine.Color,System.Single,System.Boolean)" />
        <element api="M:SkillTree.OnGUI" />
        <element api="M:SkillTree.#ctor" />
        <element api="M:SkillTree.#cctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:SkillTree.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="M:SkillTree.#cctor">
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="M:SkillTree.DrawCross(System.Single,System.Single,System.Single,System.Single,UnityEngine.Rect,UnityEngine.Color,System.Single,System.Boolean)">
      <apidata name="DrawCross" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="x">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="y">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="wdt">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="hgt">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="drawRect">
          <type api="T:UnityEngine.Rect" ref="false" />
        </parameter>
        <parameter name="color">
          <type api="T:UnityEngine.Color" ref="false" />
        </parameter>
        <parameter name="width">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="antialease" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="M:SkillTree.DrawFrame(System.Single,System.Single,System.Single,System.Single,UnityEngine.Rect,UnityEngine.Color,System.Single,System.Boolean)">
      <apidata name="DrawFrame" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="x">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="y">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="wdt">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="hgt">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="drawRect">
          <type api="T:UnityEngine.Rect" ref="false" />
        </parameter>
        <parameter name="color">
          <type api="T:UnityEngine.Color" ref="false" />
        </parameter>
        <parameter name="width">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="antialease" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="M:SkillTree.DrawLevelUpSymbol(System.Single,System.Single,System.Single,System.Single)">
      <apidata name="DrawLevelUpSymbol" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="x">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="y">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="wdt">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="hgt">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="M:SkillTree.GetInstance">
      <apidata name="GetInstance" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:SkillTree" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="M:SkillTree.Hide">
      <apidata name="Hide" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="F:SkillTree.isEnabled">
      <apidata name="isEnabled" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="M:SkillTree.IsPositionFree(System.Single,System.Single,System.Single,System.Single)">
      <apidata name="IsPositionFree" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="x">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="y">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="wdt">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="hgt">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="F:SkillTree.levelUpSymbol">
      <apidata name="levelUpSymbol" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="F:SkillTree.MarginLeftRight">
      <apidata name="MarginLeftRight" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="F:SkillTree.MarginTopBottom">
      <apidata name="MarginTopBottom" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="F:SkillTree.maxSkillNodePositionX">
      <apidata name="maxSkillNodePositionX" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="F:SkillTree.maxSkillNodePositionY">
      <apidata name="maxSkillNodePositionY" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="F:SkillTree.nodes">
      <apidata name="nodes" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:SkillTree.SkillTreeNode" ref="true">
              <type api="T:SkillTree" ref="true" />
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="M:SkillTree.OnGUI">
      <apidata name="OnGUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="M:SkillTree.Recalculate">
      <apidata name="Recalculate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="M:SkillTree.RefreshAllStates">
      <apidata name="RefreshAllStates" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="M:SkillTree.ReportNodePosition(System.Single,System.Single,System.Single,System.Single)">
      <apidata name="ReportNodePosition" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="x">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="y">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="wdt">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="hgt">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="F:SkillTree.scrollViewPosition">
      <apidata name="scrollViewPosition" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector2" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="M:SkillTree.Show">
      <apidata name="Show" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="F:SkillTree.skillTreeInstance">
      <apidata name="skillTreeInstance" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:SkillTree" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="M:SkillTree.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="T:SkillTree.SkillTreeNode">
      <apidata name="SkillTreeNode" group="type" subgroup="class" />
      <typedata visibility="private" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:SkillTree.SkillTreeNode.stdWidth" />
        <element api="F:SkillTree.SkillTreeNode.x" />
        <element api="F:SkillTree.SkillTreeNode.y" />
        <element api="F:SkillTree.SkillTreeNode.wdt" />
        <element api="F:SkillTree.SkillTreeNode.hgt" />
        <element api="F:SkillTree.SkillTreeNode.skillData" />
        <element api="F:SkillTree.SkillTreeNode.parent" />
        <element api="F:SkillTree.SkillTreeNode.canBeSelected" />
        <element api="F:SkillTree.SkillTreeNode.neededItemInformation" />
        <element api="F:SkillTree.SkillTreeNode.skillTooltip" />
        <element api="F:SkillTree.SkillTreeNode.drawingName" />
        <element api="F:SkillTree.SkillTreeNode.drawingTexture" />
        <element api="M:SkillTree.SkillTreeNode.#ctor(Skills.SkillData,SkillTree.SkillTreeNode)" />
        <element api="M:SkillTree.SkillTreeNode.RefreshState(SkillTree)" />
        <element api="M:SkillTree.SkillTreeNode.Refresh(SkillTree)" />
        <element api="M:SkillTree.SkillTreeNode.Draw(SkillTree,UnityEngine.Rect)" />
        <element api="M:SkillTree.SkillTreeNode.OnSkillSelected(SkillTree)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree" ref="true" />
      </containers>
    </api>
    <api id="M:SkillTree.SkillTreeNode.#ctor(Skills.SkillData,SkillTree.SkillTreeNode)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_skillData">
          <type api="T:Skills.SkillData" ref="true">
            <type api="T:Skills" ref="true" />
          </type>
        </parameter>
        <parameter name="_parent">
          <type api="T:SkillTree.SkillTreeNode" ref="true">
            <type api="T:SkillTree" ref="true" />
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree.SkillTreeNode" ref="true">
          <type api="T:SkillTree" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:SkillTree.SkillTreeNode.canBeSelected">
      <apidata name="canBeSelected" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree.SkillTreeNode" ref="true">
          <type api="T:SkillTree" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:SkillTree.SkillTreeNode.Draw(SkillTree,UnityEngine.Rect)">
      <apidata name="Draw" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="tree">
          <type api="T:SkillTree" ref="true" />
        </parameter>
        <parameter name="drawArea">
          <type api="T:UnityEngine.Rect" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree.SkillTreeNode" ref="true">
          <type api="T:SkillTree" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:SkillTree.SkillTreeNode.drawingName">
      <apidata name="drawingName" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree.SkillTreeNode" ref="true">
          <type api="T:SkillTree" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:SkillTree.SkillTreeNode.drawingTexture">
      <apidata name="drawingTexture" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Texture2D" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree.SkillTreeNode" ref="true">
          <type api="T:SkillTree" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:SkillTree.SkillTreeNode.hgt">
      <apidata name="hgt" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree.SkillTreeNode" ref="true">
          <type api="T:SkillTree" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:SkillTree.SkillTreeNode.neededItemInformation">
      <apidata name="neededItemInformation" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GUIContent" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree.SkillTreeNode" ref="true">
          <type api="T:SkillTree" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:SkillTree.SkillTreeNode.OnSkillSelected(SkillTree)">
      <apidata name="OnSkillSelected" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="tree">
          <type api="T:SkillTree" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree.SkillTreeNode" ref="true">
          <type api="T:SkillTree" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:SkillTree.SkillTreeNode.parent">
      <apidata name="parent" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:SkillTree.SkillTreeNode" ref="true">
          <type api="T:SkillTree" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree.SkillTreeNode" ref="true">
          <type api="T:SkillTree" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:SkillTree.SkillTreeNode.Refresh(SkillTree)">
      <apidata name="Refresh" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="tree">
          <type api="T:SkillTree" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree.SkillTreeNode" ref="true">
          <type api="T:SkillTree" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:SkillTree.SkillTreeNode.RefreshState(SkillTree)">
      <apidata name="RefreshState" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="tree">
          <type api="T:SkillTree" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree.SkillTreeNode" ref="true">
          <type api="T:SkillTree" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:SkillTree.SkillTreeNode.skillData">
      <apidata name="skillData" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Skills.SkillData" ref="true">
          <type api="T:Skills" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree.SkillTreeNode" ref="true">
          <type api="T:SkillTree" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:SkillTree.SkillTreeNode.skillTooltip">
      <apidata name="skillTooltip" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree.SkillTreeNode" ref="true">
          <type api="T:SkillTree" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:SkillTree.SkillTreeNode.stdWidth">
      <apidata name="stdWidth" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree.SkillTreeNode" ref="true">
          <type api="T:SkillTree" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:SkillTree.SkillTreeNode.wdt">
      <apidata name="wdt" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree.SkillTreeNode" ref="true">
          <type api="T:SkillTree" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:SkillTree.SkillTreeNode.x">
      <apidata name="x" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree.SkillTreeNode" ref="true">
          <type api="T:SkillTree" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:SkillTree.SkillTreeNode.y">
      <apidata name="y" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SkillTree.SkillTreeNode" ref="true">
          <type api="T:SkillTree" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:SpawnPoint">
      <apidata name="SpawnPoint" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:SpawnPoint.igorPrefab" />
        <element api="M:SpawnPoint.Start" />
        <element api="M:SpawnPoint.SpawnIgor" />
        <element api="M:SpawnPoint.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:SpawnPoint.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SpawnPoint" ref="true" />
      </containers>
    </api>
    <api id="F:SpawnPoint.igorPrefab">
      <apidata name="igorPrefab" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SpawnPoint" ref="true" />
      </containers>
    </api>
    <api id="M:SpawnPoint.SpawnIgor">
      <apidata name="SpawnIgor" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SpawnPoint" ref="true" />
      </containers>
    </api>
    <api id="M:SpawnPoint.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SpawnPoint" ref="true" />
      </containers>
    </api>
    <api id="T:SplashScreen">
      <apidata name="SplashScreen" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:SplashScreen.levelToLoad" />
        <element api="F:SplashScreen.mySkin" />
        <element api="F:SplashScreen.current" />
        <element api="F:SplashScreen.lastSwitch" />
        <element api="F:SplashScreen.lastMousePos" />
        <element api="M:SplashScreen.Awake" />
        <element api="M:SplashScreen.Start" />
        <element api="M:SplashScreen.OnGUI" />
        <element api="M:SplashScreen.HandleButton(System.Int32)" />
        <element api="M:SplashScreen.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:SplashScreen.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SplashScreen" ref="true" />
      </containers>
    </api>
    <api id="M:SplashScreen.Awake">
      <apidata name="Awake" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SplashScreen" ref="true" />
      </containers>
    </api>
    <api id="F:SplashScreen.current">
      <apidata name="current" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SplashScreen" ref="true" />
      </containers>
    </api>
    <api id="M:SplashScreen.HandleButton(System.Int32)">
      <apidata name="HandleButton" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="id">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SplashScreen" ref="true" />
      </containers>
    </api>
    <api id="F:SplashScreen.lastMousePos">
      <apidata name="lastMousePos" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Vector3" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SplashScreen" ref="true" />
      </containers>
    </api>
    <api id="F:SplashScreen.lastSwitch">
      <apidata name="lastSwitch" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SplashScreen" ref="true" />
      </containers>
    </api>
    <api id="F:SplashScreen.levelToLoad">
      <apidata name="levelToLoad" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SplashScreen" ref="true" />
      </containers>
    </api>
    <api id="F:SplashScreen.mySkin">
      <apidata name="mySkin" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GUISkin" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SplashScreen" ref="true" />
      </containers>
    </api>
    <api id="M:SplashScreen.OnGUI">
      <apidata name="OnGUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SplashScreen" ref="true" />
      </containers>
    </api>
    <api id="M:SplashScreen.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SplashScreen" ref="true" />
      </containers>
    </api>
    <api id="T:Spring">
      <apidata name="Spring" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:BaseItem" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Spring.PickUp" />
        <element api="M:Spring.GetName" />
        <element api="M:Spring.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Spring.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Spring" ref="true" />
      </containers>
    </api>
    <api id="M:Spring.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Spring" ref="true" />
      </containers>
    </api>
    <api id="M:Spring.PickUp">
      <apidata name="PickUp" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseItem.PickUp">
          <type api="T:BaseItem" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:IInvItem" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Spring" ref="true" />
      </containers>
    </api>
    <api id="T:Spring.InvItem">
      <apidata name="InvItem" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:IInvItem" ref="true" />
      </implements>
      <elements>
        <element api="F:Spring.InvItem.name" />
        <element api="M:Spring.InvItem.#ctor(System.String)" />
        <element api="M:Spring.InvItem.GetDisplayName" />
        <element api="M:Spring.InvItem.GetMaxStackSize" />
        <element api="M:Spring.InvItem.Drop" />
        <element api="M:Spring.InvItem.Use(UnityEngine.GameObject)" />
        <element api="M:Spring.InvItem.Combinable(IInvItem)" />
        <element api="M:Spring.InvItem.Combine(IInvItem)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Spring" ref="true" />
      </containers>
    </api>
    <api id="M:Spring.InvItem.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Spring.InvItem" ref="true">
          <type api="T:Spring" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Spring.InvItem.Combinable(IInvItem)">
      <apidata name="Combinable" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <type api="T:IInvItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Combinable(IInvItem)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Spring.InvItem" ref="true">
          <type api="T:Spring" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Spring.InvItem.Combine(IInvItem)">
      <apidata name="Combine" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <type api="T:IInvItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:IInvItem" ref="true" />
      </returns>
      <implements>
        <member api="M:IInvItem.Combine(IInvItem)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Spring.InvItem" ref="true">
          <type api="T:Spring" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Spring.InvItem.Drop">
      <apidata name="Drop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Drop">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Spring.InvItem" ref="true">
          <type api="T:Spring" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Spring.InvItem.GetDisplayName">
      <apidata name="GetDisplayName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:IInvItem.GetDisplayName">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Spring.InvItem" ref="true">
          <type api="T:Spring" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Spring.InvItem.GetMaxStackSize">
      <apidata name="GetMaxStackSize" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.GetMaxStackSize">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Spring.InvItem" ref="true">
          <type api="T:Spring" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Spring.InvItem.name">
      <apidata name="name" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Spring.InvItem" ref="true">
          <type api="T:Spring" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:Spring.InvItem.Use(UnityEngine.GameObject)">
      <apidata name="Use" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="entity">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Use(UnityEngine.GameObject)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Spring.InvItem" ref="true">
          <type api="T:Spring" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:SteamyObstacle">
      <apidata name="SteamyObstacle" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:SteamyObstacle.OnTriggerStay(UnityEngine.Collider)" />
        <element api="M:SteamyObstacle.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:SteamyObstacle.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SteamyObstacle" ref="true" />
      </containers>
    </api>
    <api id="M:SteamyObstacle.OnTriggerStay(UnityEngine.Collider)">
      <apidata name="OnTriggerStay" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="other">
          <type api="T:UnityEngine.Collider" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SteamyObstacle" ref="true" />
      </containers>
    </api>
    <api id="T:SwitchPlatform">
      <apidata name="SwitchPlatform" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:SwitchPlatform.platform1" />
        <element api="F:SwitchPlatform.platform" />
        <element api="M:SwitchPlatform.Start" />
        <element api="M:SwitchPlatform.OnCollisionEnter(UnityEngine.Collision)" />
        <element api="M:SwitchPlatform.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:SwitchPlatform.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SwitchPlatform" ref="true" />
      </containers>
    </api>
    <api id="M:SwitchPlatform.OnCollisionEnter(UnityEngine.Collision)">
      <apidata name="OnCollisionEnter" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="collision">
          <type api="T:UnityEngine.Collision" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SwitchPlatform" ref="true" />
      </containers>
    </api>
    <api id="F:SwitchPlatform.platform">
      <apidata name="platform" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SwitchPlatform" ref="true" />
      </containers>
    </api>
    <api id="F:SwitchPlatform.platform1">
      <apidata name="platform1" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Puzzle1Platform" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SwitchPlatform" ref="true" />
      </containers>
    </api>
    <api id="M:SwitchPlatform.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SwitchPlatform" ref="true" />
      </containers>
    </api>
    <api id="T:SwitchTrigger">
      <apidata name="SwitchTrigger" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:WeightTrigger" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:ITrigger" ref="true" />
        <type api="T:IUsable" ref="true" />
      </implements>
      <elements>
        <element api="F:SwitchTrigger.enable" />
        <element api="F:SwitchTrigger.animator" />
        <element api="F:SwitchTrigger.isTriggered" />
        <element api="F:SwitchTrigger.isOneShotTrigger" />
        <element api="F:SwitchTrigger.hasBeenTriggeredOnce" />
        <element api="F:SwitchTrigger.connectedObjects" />
        <element api="M:SwitchTrigger.AddTriggerable(Triggerable)" />
        <element api="M:SwitchTrigger.SetOneShotTrigger(System.Boolean)" />
        <element api="M:SwitchTrigger.OnUse(UnityEngine.GameObject)" />
        <element api="M:SwitchTrigger.IsTriggered" />
        <element api="M:SwitchTrigger.Start" />
        <element api="M:SwitchTrigger.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:SwitchTrigger.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SwitchTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:SwitchTrigger.AddTriggerable(Triggerable)">
      <apidata name="AddTriggerable" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="triggerable">
          <type api="T:Triggerable" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:ITrigger.AddTriggerable(Triggerable)">
          <type api="T:ITrigger" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SwitchTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:SwitchTrigger.animator">
      <apidata name="animator" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Animator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SwitchTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:SwitchTrigger.connectedObjects">
      <apidata name="connectedObjects" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Triggerable" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SwitchTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:SwitchTrigger.enable">
      <apidata name="enable" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SwitchTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:SwitchTrigger.hasBeenTriggeredOnce">
      <apidata name="hasBeenTriggeredOnce" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SwitchTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:SwitchTrigger.isOneShotTrigger">
      <apidata name="isOneShotTrigger" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SwitchTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:SwitchTrigger.isTriggered">
      <apidata name="isTriggered" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SwitchTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:SwitchTrigger.IsTriggered">
      <apidata name="IsTriggered" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:ITrigger.IsTriggered">
          <type api="T:ITrigger" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SwitchTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:SwitchTrigger.OnUse(UnityEngine.GameObject)">
      <apidata name="OnUse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:IUsable.OnUse(UnityEngine.GameObject)">
          <type api="T:IUsable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SwitchTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:SwitchTrigger.SetOneShotTrigger(System.Boolean)">
      <apidata name="SetOneShotTrigger" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="makeOneShot">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:ITrigger.SetOneShotTrigger(System.Boolean)">
          <type api="T:ITrigger" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SwitchTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:SwitchTrigger.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:SwitchTrigger" ref="true" />
      </containers>
    </api>
    <api id="T:TestCutscene">
      <apidata name="TestCutscene" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:MovementManager" ref="true" />
          <type api="T:Triggerable" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:TestCutscene.toAnimate" />
        <element api="M:TestCutscene.Script" />
        <element api="M:TestCutscene.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:TestCutscene.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:TestCutscene" ref="true" />
      </containers>
    </api>
    <api id="M:TestCutscene.Script">
      <apidata name="Script" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:MovementManager.Script">
          <type api="T:MovementManager" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:TestCutscene" ref="true" />
      </containers>
    </api>
    <api id="F:TestCutscene.toAnimate">
      <apidata name="toAnimate" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.GameObject" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:TestCutscene" ref="true" />
      </containers>
    </api>
    <api id="T:Transformer">
      <apidata name="Transformer" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:CommonEntity" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Transformer.animator" />
        <element api="M:Transformer.Start" />
        <element api="M:Transformer.Update" />
        <element api="M:Transformer.Die" />
        <element api="M:Transformer.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Transformer.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Transformer" ref="true" />
      </containers>
    </api>
    <api id="F:Transformer.animator">
      <apidata name="animator" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:UnityEngine.Animator" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Transformer" ref="true" />
      </containers>
    </api>
    <api id="M:Transformer.Die">
      <apidata name="Die" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:CommonEntity.Die">
          <type api="T:CommonEntity" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Transformer" ref="true" />
      </containers>
    </api>
    <api id="M:Transformer.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:CommonEntity.Start">
          <type api="T:CommonEntity" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Transformer" ref="true" />
      </containers>
    </api>
    <api id="M:Transformer.Update">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:CommonEntity.Update">
          <type api="T:CommonEntity" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Transformer" ref="true" />
      </containers>
    </api>
    <api id="T:Triggerable">
      <apidata name="Triggerable" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:MovementManager" ref="true" />
          <type api="T:Door" ref="true" />
          <type api="T:Elevator" ref="true" />
          <type api="T:Remove" ref="true" />
          <type api="T:SceneLoader" ref="true" />
          <type api="T:SelfDestructor" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:Triggerable.OnTrigger(UnityEngine.GameObject,System.Boolean)" />
        <element api="M:Triggerable.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Triggerable.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Triggerable" ref="true" />
      </containers>
    </api>
    <api id="M:Triggerable.OnTrigger(UnityEngine.GameObject,System.Boolean)">
      <apidata name="OnTrigger" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="by">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
        <parameter name="isTriggered">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Triggerable" ref="true" />
      </containers>
    </api>
    <api id="T:USBStick">
      <apidata name="USBStick" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:BaseItem" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:USBStick.PickUp" />
        <element api="M:USBStick.GetName" />
        <element api="M:USBStick.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:USBStick.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:USBStick" ref="true" />
      </containers>
    </api>
    <api id="M:USBStick.GetName">
      <apidata name="GetName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:USBStick" ref="true" />
      </containers>
    </api>
    <api id="M:USBStick.PickUp">
      <apidata name="PickUp" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:BaseItem.PickUp">
          <type api="T:BaseItem" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:IInvItem" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:USBStick" ref="true" />
      </containers>
    </api>
    <api id="T:USBStick.InvItem">
      <apidata name="InvItem" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:IInvItem" ref="true" />
      </implements>
      <elements>
        <element api="F:USBStick.InvItem.name" />
        <element api="M:USBStick.InvItem.#ctor(System.String)" />
        <element api="M:USBStick.InvItem.GetDisplayName" />
        <element api="M:USBStick.InvItem.GetMaxStackSize" />
        <element api="M:USBStick.InvItem.Drop" />
        <element api="M:USBStick.InvItem.Use(UnityEngine.GameObject)" />
        <element api="M:USBStick.InvItem.Combinable(IInvItem)" />
        <element api="M:USBStick.InvItem.Combine(IInvItem)" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:USBStick" ref="true" />
      </containers>
    </api>
    <api id="M:USBStick.InvItem.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:USBStick.InvItem" ref="true">
          <type api="T:USBStick" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:USBStick.InvItem.Combinable(IInvItem)">
      <apidata name="Combinable" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <type api="T:IInvItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Combinable(IInvItem)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:USBStick.InvItem" ref="true">
          <type api="T:USBStick" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:USBStick.InvItem.Combine(IInvItem)">
      <apidata name="Combine" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <type api="T:IInvItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:IInvItem" ref="true" />
      </returns>
      <implements>
        <member api="M:IInvItem.Combine(IInvItem)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:USBStick.InvItem" ref="true">
          <type api="T:USBStick" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:USBStick.InvItem.Drop">
      <apidata name="Drop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Drop">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:USBStick.InvItem" ref="true">
          <type api="T:USBStick" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:USBStick.InvItem.GetDisplayName">
      <apidata name="GetDisplayName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:IInvItem.GetDisplayName">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:USBStick.InvItem" ref="true">
          <type api="T:USBStick" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:USBStick.InvItem.GetMaxStackSize">
      <apidata name="GetMaxStackSize" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.GetMaxStackSize">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:USBStick.InvItem" ref="true">
          <type api="T:USBStick" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:USBStick.InvItem.name">
      <apidata name="name" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:USBStick.InvItem" ref="true">
          <type api="T:USBStick" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:USBStick.InvItem.Use(UnityEngine.GameObject)">
      <apidata name="Use" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="entity">
          <type api="T:UnityEngine.GameObject" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:IInvItem.Use(UnityEngine.GameObject)">
          <type api="T:IInvItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:USBStick.InvItem" ref="true">
          <type api="T:USBStick" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:WallTexture">
      <apidata name="WallTexture" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:WallTexture.scaleFactor" />
        <element api="M:WallTexture.Start" />
        <element api="M:WallTexture.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:WallTexture.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:WallTexture" ref="true" />
      </containers>
    </api>
    <api id="F:WallTexture.scaleFactor">
      <apidata name="scaleFactor" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:WallTexture" ref="true" />
      </containers>
    </api>
    <api id="M:WallTexture.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:WallTexture" ref="true" />
      </containers>
    </api>
    <api id="T:Waypoint">
      <apidata name="Waypoint" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Waypoint.Start" />
        <element api="M:Waypoint.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:Waypoint.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Waypoint" ref="true" />
      </containers>
    </api>
    <api id="M:Waypoint.Start">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:Waypoint" ref="true" />
      </containers>
    </api>
    <api id="T:WeightTrigger">
      <apidata name="WeightTrigger" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:SwitchTrigger" ref="true" />
          <type api="T:UnityEngine.MonoBehaviour" ref="true" />
          <type api="T:UnityEngine.Behaviour" ref="true" />
          <type api="T:UnityEngine.Component" ref="true" />
          <type api="T:UnityEngine.Object" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:WeightTrigger.triggeringMass" />
        <element api="F:WeightTrigger.objectsCurrentlyInside" />
        <element api="M:WeightTrigger.CheckMass" />
        <element api="M:WeightTrigger.OnCollisionEnter(UnityEngine.Collision)" />
        <element api="M:WeightTrigger.OnCollisionExit(UnityEngine.Collision)" />
        <element api="M:WeightTrigger.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:WeightTrigger.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:WeightTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:WeightTrigger.CheckMass">
      <apidata name="CheckMass" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:WeightTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:WeightTrigger.objectsCurrentlyInside">
      <apidata name="objectsCurrentlyInside" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:UnityEngine.GameObject" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:WeightTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:WeightTrigger.OnCollisionEnter(UnityEngine.Collision)">
      <apidata name="OnCollisionEnter" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="collision">
          <type api="T:UnityEngine.Collision" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:WeightTrigger" ref="true" />
      </containers>
    </api>
    <api id="M:WeightTrigger.OnCollisionExit(UnityEngine.Collision)">
      <apidata name="OnCollisionExit" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="collision">
          <type api="T:UnityEngine.Collision" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:WeightTrigger" ref="true" />
      </containers>
    </api>
    <api id="F:WeightTrigger.triggeringMass">
      <apidata name="triggeringMass" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:WeightTrigger" ref="true" />
      </containers>
    </api>
    <api id="T:XMLGameSaver">
      <apidata name="XMLGameSaver" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" layout="auto" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:XMLGameSaver.SerializeObject(System.Object)" />
        <element api="M:XMLGameSaver.DeserializeObject``1(System.String)" />
        <element api="M:XMLGameSaver.SaveGame(System.String,System.String,System.String)" />
        <element api="M:XMLGameSaver.SaveGame(System.String,System.String)" />
        <element api="M:XMLGameSaver.LoadGame(System.String,System.String)" />
        <element api="M:XMLGameSaver.LoadGame(System.String)" />
        <element api="M:XMLGameSaver.UTF8ByteArrayToString(System.Byte[])" />
        <element api="M:XMLGameSaver.StringToUTF8ByteArray(System.String)" />
        <element api="M:XMLGameSaver.#ctor" />
      </elements>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
      </containers>
    </api>
    <api id="M:XMLGameSaver.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:XMLGameSaver" ref="true" />
      </containers>
    </api>
    <api id="M:XMLGameSaver.DeserializeObject``1(System.String)">
      <apidata name="DeserializeObject" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="xmlString">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:XMLGameSaver.DeserializeObject``1(System.String)" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:XMLGameSaver" ref="true" />
      </containers>
    </api>
    <api id="M:XMLGameSaver.LoadGame(System.String)">
      <apidata name="LoadGame" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:XMLGameSaver" ref="true" />
      </containers>
    </api>
    <api id="M:XMLGameSaver.LoadGame(System.String,System.String)">
      <apidata name="LoadGame" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fileLocation">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:XMLGameSaver" ref="true" />
      </containers>
    </api>
    <api id="M:XMLGameSaver.SaveGame(System.String,System.String)">
      <apidata name="SaveGame" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="xmlData">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:XMLGameSaver" ref="true" />
      </containers>
    </api>
    <api id="M:XMLGameSaver.SaveGame(System.String,System.String,System.String)">
      <apidata name="SaveGame" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fileLocation">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="xmlData">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:XMLGameSaver" ref="true" />
      </containers>
    </api>
    <api id="M:XMLGameSaver.SerializeObject(System.Object)">
      <apidata name="SerializeObject" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="gObj">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:XMLGameSaver" ref="true" />
      </containers>
    </api>
    <api id="M:XMLGameSaver.StringToUTF8ByteArray(System.String)">
      <apidata name="StringToUTF8ByteArray" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="xmlString">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Byte" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:XMLGameSaver" ref="true" />
      </containers>
    </api>
    <api id="M:XMLGameSaver.UTF8ByteArrayToString(System.Byte[])">
      <apidata name="UTF8ByteArrayToString" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="characters">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Assembly-CSharp" module="Assembly-CSharp" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:" />
        <type api="T:XMLGameSaver" ref="true" />
      </containers>
    </api>
  </apis>
</reflection>